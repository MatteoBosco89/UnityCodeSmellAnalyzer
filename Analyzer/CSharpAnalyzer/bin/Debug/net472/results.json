{
  "ProjectName": "C# Project",
  "ProjectDirectory": "D:\\progetti\\UnityCodeSmellAnalyzer\\example\\UnityProjectExample",
  "ConfigurationFile": "Config.json",
  "ProjectLanguage": "C#",
  "ProjectLanguageVersion": "CSharp8",
  "Project": [
    {
      "Name": "Program",
      "FileName": "D:\\progetti\\UnityCodeSmellAnalyzer\\example\\UnityProjectExample\\Assets\\ExampleScript\\TestSolution\\Program.cs",
      "Language": "C#",
      "Interfaces": [],
      "Namespaces": [],
      "Classes": [
        {
          "Name": "Program",
          "FullName": "Program",
          "FullInheritanceName": "object",
          "InnerClasses": [],
          "ClassConstraints": [],
          "Modifiers": [
            "public"
          ],
          "Inheritance": "object",
          "Interfaces": [],
          "Properties": [],
          "Methods": [
            {
              "HasBody": false,
              "HasExpressionBody": false,
              "Name": "Main",
              "IsEmpty": true,
              "FullName": "Program.Main(string[])",
              "Modifiers": [
                "public",
                "static"
              ],
              "Attributes": [],
              "ReturnType": "void",
              "Parameters": [
                {
                  "Name": "args",
                  "Type": "string[]",
                  "Assignment": null,
                  "Attributes": []
                }
              ],
              "Invocations": [],
              "Variables": [],
              "Statements": [],
              "WhileBlocks": [],
              "ForEachBlocks": [],
              "ForBlocks": [],
              "IfBlocks": [],
              "SwitchBlocks": [],
              "Returns": [],
              "TryBlocks": [],
              "ExpressionBody": null,
              "Line": 5
            }
          ],
          "Fields": [],
          "Constructors": [],
          "Attributes": [],
          "Line": 3
        }
      ],
      "Usings": [
        {
          "Name": "System",
          "Line": 1
        }
      ],
      "Line": 1
    },
    {
      "Name": "State",
      "FileName": "D:\\progetti\\UnityCodeSmellAnalyzer\\example\\UnityProjectExample\\Assets\\ExampleScript\\TestSolution\\State.cs",
      "Language": "C#",
      "Interfaces": [],
      "Namespaces": [
        {
          "Attributes": [],
          "Name": "Test",
          "Interfaces": [],
          "Namespaces": [],
          "Classes": [
            {
              "Name": "State",
              "FullName": "Test.State",
              "FullInheritanceName": "Test.StateManager",
              "InnerClasses": [],
              "ClassConstraints": [],
              "Modifiers": [
                "public"
              ],
              "Inheritance": "Test.StateManager",
              "Interfaces": [],
              "Properties": [],
              "Methods": [],
              "Fields": [
                {
                  "Name": "b",
                  "Type": "int",
                  "Modifiers": [
                    "protected"
                  ],
                  "Assignment": null,
                  "Attributes": [],
                  "FullName": "Test.State.b",
                  "Line": 7
                }
              ],
              "Constructors": [
                {
                  "ClassRef": "Test.State",
                  "ReturnType": "State",
                  "HasBody": false,
                  "HasExpressionBody": true,
                  "Name": "State",
                  "IsEmpty": false,
                  "FullName": "State",
                  "Modifiers": [
                    "public"
                  ],
                  "Attributes": [
                    "Obsolete"
                  ],
                  "Parameters": [
                    {
                      "Name": "a",
                      "Type": "int",
                      "Assignment": null,
                      "Attributes": []
                    },
                    {
                      "Name": "b",
                      "Type": "int",
                      "Assignment": null,
                      "Attributes": []
                    }
                  ],
                  "Invocations": [],
                  "Variables": [],
                  "Statements": [],
                  "WhileBlocks": [],
                  "ForEachBlocks": [],
                  "ForBlocks": [],
                  "IfBlocks": [],
                  "SwitchBlocks": [],
                  "Returns": [],
                  "TryBlocks": [],
                  "ExpressionBody": {
                    "Tokens": [
                      "this.b",
                      "b"
                    ],
                    "Properties": [],
                    "Fields": [
                      "Test.State.b"
                    ],
                    "Invocations": [],
                    "Type": "int",
                    "Statement": "this.b = b",
                    "ExpressionType": "SimpleAssignmentExpression",
                    "Kind": "Literal"
                  },
                  "Line": 8
                },
                {
                  "ClassRef": "Test.State",
                  "ReturnType": "State",
                  "HasBody": true,
                  "HasExpressionBody": false,
                  "Name": "State",
                  "IsEmpty": false,
                  "FullName": "State",
                  "Modifiers": [
                    "public"
                  ],
                  "Attributes": [],
                  "Parameters": [
                    {
                      "Name": "a",
                      "Type": "int",
                      "Assignment": null,
                      "Attributes": []
                    },
                    {
                      "Name": "b",
                      "Type": "int",
                      "Assignment": null,
                      "Attributes": []
                    },
                    {
                      "Name": "c",
                      "Type": "int",
                      "Assignment": null,
                      "Attributes": []
                    }
                  ],
                  "Invocations": [],
                  "Variables": [
                    {
                      "Variable": {
                        "Name": "this.b",
                        "Type": "int",
                        "Assignment": "b",
                        "Kind": "Assignment",
                        "AssignmentLine": 11,
                        "VariableKind": "Field",
                        "FullName": "Test.State.b",
                        "AssignmentKind": "SimpleAssignmentExpression"
                      }
                    },
                    {
                      "Variable": {
                        "Name": "b",
                        "Type": "int",
                        "Kind": "Use",
                        "UseLine": 11,
                        "UseKind": "ParameterReference",
                        "AssignedTo": "this.b",
                        "Value": null,
                        "Operation": "SimpleAssignmentExpression",
                        "VariablesList": []
                      }
                    }
                  ],
                  "Statements": [],
                  "WhileBlocks": [],
                  "ForEachBlocks": [],
                  "ForBlocks": [],
                  "IfBlocks": [],
                  "SwitchBlocks": [],
                  "Returns": [],
                  "TryBlocks": [],
                  "ExpressionBody": null,
                  "Line": 10
                }
              ],
              "Attributes": [],
              "Line": 5
            }
          ],
          "Usings": [],
          "Line": 3
        }
      ],
      "Classes": [],
      "Usings": [
        {
          "Name": "System",
          "Line": 1
        }
      ],
      "Line": 1
    },
    {
      "Name": "StateInState",
      "FileName": "D:\\progetti\\UnityCodeSmellAnalyzer\\example\\UnityProjectExample\\Assets\\ExampleScript\\TestSolution\\StateInState.cs",
      "Language": "C#",
      "Interfaces": [],
      "Namespaces": [
        {
          "Attributes": [],
          "Name": "Test",
          "Interfaces": [],
          "Namespaces": [],
          "Classes": [
            {
              "Name": "StateInState",
              "FullName": "Test.StateInState<T>",
              "FullInheritanceName": "object",
              "InnerClasses": [
                {
                  "Name": "InnerState",
                  "FullName": "Test.StateInState<T>.InnerState",
                  "FullInheritanceName": "object",
                  "InnerClasses": [],
                  "ClassConstraints": [],
                  "Modifiers": [
                    "public"
                  ],
                  "Inheritance": "object",
                  "Interfaces": [],
                  "Properties": [
                    {
                      "Name": "D",
                      "Type": "int",
                      "Modifiers": [
                        "public"
                      ],
                      "Attributes": [],
                      "IsAutoProperty": false,
                      "Initializer": false,
                      "InitializerValue": null,
                      "Accessor": [
                        {
                          "AccessorType": "get",
                          "HasBody": true,
                          "HasExpressionBody": false,
                          "IsEmpty": false,
                          "Modifiers": [],
                          "Attributes": [],
                          "ReturnType": null,
                          "Parameters": [],
                          "Invocations": [],
                          "Variables": [],
                          "Statements": [],
                          "WhileBlocks": [],
                          "ForEachBlocks": [],
                          "ForBlocks": [],
                          "IfBlocks": [],
                          "SwitchBlocks": [],
                          "Returns": [
                            {
                              "ReturnStatement": {
                                "Tokens": [],
                                "Properties": [],
                                "Fields": [
                                  "Test.StateInState<T>.InnerState.d"
                                ],
                                "Invocations": [],
                                "Type": "int",
                                "Statement": "d",
                                "ExpressionType": "IdentifierName",
                                "Kind": "Field"
                              },
                              "ReturnType": "int",
                              "Line": 24
                            }
                          ],
                          "TryBlocks": [],
                          "ExpressionBody": null,
                          "Line": 24
                        },
                        {
                          "AccessorType": "set",
                          "HasBody": true,
                          "HasExpressionBody": false,
                          "IsEmpty": false,
                          "Modifiers": [
                            "protected"
                          ],
                          "Attributes": [],
                          "ReturnType": null,
                          "Parameters": [],
                          "Invocations": [],
                          "Variables": [
                            {
                              "Variable": {
                                "Name": "d",
                                "Type": "int",
                                "Assignment": "value",
                                "Kind": "Assignment",
                                "AssignmentLine": 23,
                                "VariableKind": "Field",
                                "FullName": "Test.StateInState<T>.InnerState.d",
                                "AssignmentKind": "SimpleAssignmentExpression"
                              }
                            },
                            {
                              "Variable": {
                                "Name": "value",
                                "Type": "int",
                                "Kind": "Use",
                                "UseLine": 23,
                                "UseKind": "ParameterReference",
                                "AssignedTo": "d",
                                "Value": null,
                                "Operation": "SimpleAssignmentExpression",
                                "VariablesList": []
                              }
                            }
                          ],
                          "Statements": [],
                          "WhileBlocks": [],
                          "ForEachBlocks": [],
                          "ForBlocks": [],
                          "IfBlocks": [],
                          "SwitchBlocks": [],
                          "Returns": [],
                          "TryBlocks": [],
                          "ExpressionBody": null,
                          "Line": 24
                        }
                      ],
                      "HasExpressionBody": false,
                      "ExpressionBody": null,
                      "Line": 24
                    }
                  ],
                  "Methods": [
                    {
                      "HasBody": true,
                      "HasExpressionBody": false,
                      "Name": "M",
                      "IsEmpty": false,
                      "FullName": "Test.StateInState<T>.InnerState.M()",
                      "Modifiers": [
                        "public"
                      ],
                      "Attributes": [],
                      "ReturnType": "int",
                      "Parameters": [],
                      "Invocations": [],
                      "Variables": [],
                      "Statements": [],
                      "WhileBlocks": [],
                      "ForEachBlocks": [],
                      "ForBlocks": [],
                      "IfBlocks": [],
                      "SwitchBlocks": [],
                      "Returns": [
                        {
                          "ReturnStatement": {
                            "Tokens": [],
                            "Properties": [],
                            "Fields": [],
                            "Invocations": [],
                            "Type": "int",
                            "Statement": "12",
                            "ExpressionType": "NumericLiteralExpression",
                            "Kind": "Literal"
                          },
                          "ReturnType": "int",
                          "Line": 35
                        }
                      ],
                      "TryBlocks": [],
                      "ExpressionBody": null,
                      "Line": 35
                    },
                    {
                      "HasBody": false,
                      "HasExpressionBody": false,
                      "Name": "Method2",
                      "IsEmpty": true,
                      "FullName": "Test.StateInState<T>.InnerState.Method2()",
                      "Modifiers": [
                        "public"
                      ],
                      "Attributes": [],
                      "ReturnType": "void",
                      "Parameters": [],
                      "Invocations": [],
                      "Variables": [],
                      "Statements": [],
                      "WhileBlocks": [],
                      "ForEachBlocks": [],
                      "ForBlocks": [],
                      "IfBlocks": [],
                      "SwitchBlocks": [],
                      "Returns": [],
                      "TryBlocks": [],
                      "ExpressionBody": null,
                      "Line": 36
                    },
                    {
                      "HasBody": true,
                      "HasExpressionBody": false,
                      "Name": "Method3",
                      "IsEmpty": false,
                      "FullName": "Test.StateInState<T>.InnerState.Method3()",
                      "Modifiers": [
                        "public"
                      ],
                      "Attributes": [],
                      "ReturnType": "int",
                      "Parameters": [],
                      "Invocations": [],
                      "Variables": [],
                      "Statements": [],
                      "WhileBlocks": [],
                      "ForEachBlocks": [],
                      "ForBlocks": [],
                      "IfBlocks": [],
                      "SwitchBlocks": [],
                      "Returns": [
                        {
                          "ReturnStatement": {
                            "Tokens": [],
                            "Properties": [
                              "Test.StateInState<T>.InnerState.D"
                            ],
                            "Fields": [],
                            "Invocations": [],
                            "Type": "int",
                            "Statement": "D",
                            "ExpressionType": "IdentifierName",
                            "Kind": "Property"
                          },
                          "ReturnType": "int",
                          "Line": 37
                        }
                      ],
                      "TryBlocks": [],
                      "ExpressionBody": null,
                      "Line": 37
                    },
                    {
                      "HasBody": false,
                      "HasExpressionBody": true,
                      "Name": "Ciaone2",
                      "IsEmpty": false,
                      "FullName": "Test.StateInState<T>.InnerState.Ciaone2()",
                      "Modifiers": [
                        "public"
                      ],
                      "Attributes": [],
                      "ReturnType": "InnerState",
                      "Parameters": [],
                      "Invocations": [],
                      "Variables": [],
                      "Statements": [],
                      "WhileBlocks": [],
                      "ForEachBlocks": [],
                      "ForBlocks": [],
                      "IfBlocks": [],
                      "SwitchBlocks": [],
                      "Returns": [],
                      "TryBlocks": [],
                      "ExpressionBody": {
                        "Tokens": [
                          "new",
                          "InnerState"
                        ],
                        "Properties": [],
                        "Fields": [],
                        "Invocations": [],
                        "Type": "Test.StateInState<T>.InnerState",
                        "Statement": "new InnerState()",
                        "ExpressionType": "ObjectCreationExpression",
                        "Kind": "Method"
                      },
                      "Line": 39
                    }
                  ],
                  "Fields": [
                    {
                      "Name": "d",
                      "Type": "int",
                      "Modifiers": [
                        "protected"
                      ],
                      "Assignment": null,
                      "Attributes": [],
                      "FullName": "Test.StateInState<T>.InnerState.d",
                      "Line": 23
                    }
                  ],
                  "Constructors": [
                    {
                      "ClassRef": "Test.StateInState<T>.InnerState",
                      "ReturnType": "InnerState",
                      "HasBody": true,
                      "HasExpressionBody": false,
                      "Name": "InnerState",
                      "IsEmpty": false,
                      "FullName": "InnerState",
                      "Modifiers": [
                        "public"
                      ],
                      "Attributes": [],
                      "Parameters": [],
                      "Invocations": [
                        {
                          "Name": "Method2",
                          "FullName": "Test.StateInState<T>.InnerState.Method2()",
                          "ReturnType": "Void",
                          "FileName": "D:\\progetti\\UnityCodeSmellAnalyzer\\example\\UnityProjectExample\\Assets\\ExampleScript\\TestSolution\\StateInState.cs",
                          "DefinitionLine": 36,
                          "Kind": "SourceFile",
                          "Module": null,
                          "ReferenceFound": true,
                          "Arguments": [],
                          "Line": 28
                        },
                        {
                          "Name": "Method3",
                          "FullName": "Test.StateInState<T>.InnerState.Method3()",
                          "ReturnType": "Int32",
                          "FileName": "D:\\progetti\\UnityCodeSmellAnalyzer\\example\\UnityProjectExample\\Assets\\ExampleScript\\TestSolution\\StateInState.cs",
                          "DefinitionLine": 37,
                          "Kind": "SourceFile",
                          "Module": null,
                          "ReferenceFound": true,
                          "Arguments": [],
                          "Line": 29
                        }
                      ],
                      "Variables": [
                        {
                          "Variable": {
                            "Name": "this.d",
                            "Type": "int",
                            "Assignment": "1",
                            "Kind": "Assignment",
                            "AssignmentLine": 26,
                            "VariableKind": "Field",
                            "FullName": "Test.StateInState<T>.InnerState.d",
                            "AssignmentKind": "SimpleAssignmentExpression"
                          }
                        },
                        {
                          "Variable": {
                            "Name": "this.d",
                            "Type": "int",
                            "Assignment": "Method3()",
                            "Kind": "Assignment",
                            "AssignmentLine": 28,
                            "VariableKind": "Field",
                            "FullName": "Test.StateInState<T>.InnerState.d",
                            "AssignmentKind": "SimpleAssignmentExpression"
                          }
                        },
                        {
                          "Variable": {
                            "Name": null,
                            "Type": "int",
                            "Kind": "Use",
                            "UseLine": 26,
                            "UseKind": "Literal",
                            "AssignedTo": "this.d",
                            "Value": "1",
                            "Operation": "SimpleAssignmentExpression",
                            "VariablesList": []
                          }
                        },
                        {
                          "Variable": {
                            "Name": "Method3()",
                            "Type": "int",
                            "Kind": "Use",
                            "UseLine": 28,
                            "UseKind": "Invocation",
                            "AssignedTo": "this.d",
                            "Value": null,
                            "Operation": "SimpleAssignmentExpression",
                            "VariablesList": []
                          }
                        }
                      ],
                      "Statements": [],
                      "WhileBlocks": [
                        {
                          "Condition": {
                            "Tokens": [
                              "Method3",
                              "0",
                              "D",
                              "0"
                            ],
                            "Properties": [
                              "Test.StateInState<T>.InnerState.D"
                            ],
                            "Fields": [],
                            "Invocations": [
                              {
                                "Name": "Method3",
                                "FullName": "Test.StateInState<T>.InnerState.Method3()",
                                "ReturnType": "Int32",
                                "FileName": "D:\\progetti\\UnityCodeSmellAnalyzer\\example\\UnityProjectExample\\Assets\\ExampleScript\\TestSolution\\StateInState.cs",
                                "DefinitionLine": 37,
                                "Kind": "SourceFile",
                                "Module": null,
                                "ReferenceFound": true,
                                "Arguments": [],
                                "Line": 31
                              }
                            ],
                            "Type": "bool",
                            "Statement": "Method3() < 0 && D > 0",
                            "ExpressionType": "LogicalAndExpression",
                            "Kind": "Literal"
                          },
                          "Depth": 1,
                          "EndLine": 31,
                          "StartLine": 31,
                          "Invocations": [
                            {
                              "Name": "Method3",
                              "FullName": "Test.StateInState<T>.InnerState.Method3()",
                              "ReturnType": "Int32",
                              "FileName": "D:\\progetti\\UnityCodeSmellAnalyzer\\example\\UnityProjectExample\\Assets\\ExampleScript\\TestSolution\\StateInState.cs",
                              "DefinitionLine": 37,
                              "Kind": "SourceFile",
                              "Module": null,
                              "ReferenceFound": true,
                              "Arguments": [],
                              "Line": 31
                            },
                            {
                              "Name": "Method2",
                              "FullName": "Test.StateInState<T>.InnerState.Method2()",
                              "ReturnType": "Void",
                              "FileName": "D:\\progetti\\UnityCodeSmellAnalyzer\\example\\UnityProjectExample\\Assets\\ExampleScript\\TestSolution\\StateInState.cs",
                              "DefinitionLine": 36,
                              "Kind": "SourceFile",
                              "Module": null,
                              "ReferenceFound": true,
                              "Arguments": [],
                              "Line": 31
                            }
                          ],
                          "Variables": [],
                          "WhileBlocks": [],
                          "ForBlocks": [],
                          "IfBlocks": [],
                          "SwitchBlocks": [],
                          "ForEachBlocks": [],
                          "ElseBlocks": [],
                          "TryBlocks": [],
                          "Returns": []
                        }
                      ],
                      "ForEachBlocks": [],
                      "ForBlocks": [],
                      "IfBlocks": [],
                      "SwitchBlocks": [],
                      "Returns": [],
                      "TryBlocks": [],
                      "ExpressionBody": null,
                      "Line": 25
                    },
                    {
                      "ClassRef": "Test.StateInState<T>.InnerState",
                      "ReturnType": "InnerState",
                      "HasBody": false,
                      "HasExpressionBody": true,
                      "Name": "InnerState",
                      "IsEmpty": false,
                      "FullName": "InnerState",
                      "Modifiers": [
                        "public"
                      ],
                      "Attributes": [],
                      "Parameters": [
                        {
                          "Name": "d",
                          "Type": "int",
                          "Assignment": null,
                          "Attributes": []
                        }
                      ],
                      "Invocations": [],
                      "Variables": [],
                      "Statements": [],
                      "WhileBlocks": [],
                      "ForEachBlocks": [],
                      "ForBlocks": [],
                      "IfBlocks": [],
                      "SwitchBlocks": [],
                      "Returns": [],
                      "TryBlocks": [],
                      "ExpressionBody": {
                        "Tokens": [
                          "this.d",
                          "Method3"
                        ],
                        "Properties": [],
                        "Fields": [
                          "Test.StateInState<T>.InnerState.d"
                        ],
                        "Invocations": [
                          {
                            "Name": "Method3",
                            "FullName": "Test.StateInState<T>.InnerState.Method3()",
                            "ReturnType": "Int32",
                            "FileName": "D:\\progetti\\UnityCodeSmellAnalyzer\\example\\UnityProjectExample\\Assets\\ExampleScript\\TestSolution\\StateInState.cs",
                            "DefinitionLine": 37,
                            "Kind": "SourceFile",
                            "Module": null,
                            "ReferenceFound": true,
                            "Arguments": [],
                            "Line": 38
                          }
                        ],
                        "Type": "int",
                        "Statement": "this.d = Method3()",
                        "ExpressionType": "SimpleAssignmentExpression",
                        "Kind": "Literal"
                      },
                      "Line": 38
                    }
                  ],
                  "Attributes": [],
                  "Line": 21
                }
              ],
              "ClassConstraints": [],
              "Modifiers": [
                "public"
              ],
              "Inheritance": "object",
              "Interfaces": [],
              "Properties": [],
              "Methods": [
                {
                  "HasBody": true,
                  "HasExpressionBody": false,
                  "Name": "Method1",
                  "IsEmpty": false,
                  "FullName": "Test.StateInState<T>.Method1(string)",
                  "Modifiers": [
                    "public"
                  ],
                  "Attributes": [],
                  "ReturnType": "void",
                  "Parameters": [
                    {
                      "Name": "s",
                      "Type": "string",
                      "Assignment": null,
                      "Attributes": []
                    }
                  ],
                  "Invocations": [
                    {
                      "Name": "Method3",
                      "FullName": "Test.StateInState<T>.InnerState.Method3()",
                      "ReturnType": "Int32",
                      "FileName": "D:\\progetti\\UnityCodeSmellAnalyzer\\example\\UnityProjectExample\\Assets\\ExampleScript\\TestSolution\\StateInState.cs",
                      "DefinitionLine": 37,
                      "Kind": "SourceFile",
                      "Module": null,
                      "ReferenceFound": true,
                      "Arguments": [],
                      "Line": 18
                    },
                    {
                      "Name": "Ciaone2",
                      "FullName": "Test.StateInState<T>.InnerState.Ciaone2()",
                      "ReturnType": "InnerState",
                      "FileName": "D:\\progetti\\UnityCodeSmellAnalyzer\\example\\UnityProjectExample\\Assets\\ExampleScript\\TestSolution\\StateInState.cs",
                      "DefinitionLine": 39,
                      "Kind": "SourceFile",
                      "Module": null,
                      "ReferenceFound": true,
                      "Arguments": [],
                      "Line": 18
                    }
                  ],
                  "Variables": [
                    {
                      "Variable": {
                        "Name": "i",
                        "Type": "InnerState",
                        "Assignment": "new InnerState()",
                        "Kind": "Definition",
                        "DefinitionLine": 16
                      }
                    }
                  ],
                  "Statements": [],
                  "WhileBlocks": [],
                  "ForEachBlocks": [],
                  "ForBlocks": [],
                  "IfBlocks": [],
                  "SwitchBlocks": [],
                  "Returns": [],
                  "TryBlocks": [],
                  "ExpressionBody": null,
                  "Line": 15
                }
              ],
              "Fields": [
                {
                  "Name": "aaaaa",
                  "Type": "int",
                  "Modifiers": [
                    "protected"
                  ],
                  "Assignment": null,
                  "Attributes": [],
                  "FullName": "Test.StateInState<T>.aaaaa",
                  "Line": 9
                }
              ],
              "Constructors": [
                {
                  "ClassRef": "Test.StateInState<T>",
                  "ReturnType": "StateInState",
                  "HasBody": false,
                  "HasExpressionBody": true,
                  "Name": "StateInState",
                  "IsEmpty": false,
                  "FullName": "StateInState",
                  "Modifiers": [
                    "public"
                  ],
                  "Attributes": [],
                  "Parameters": [
                    {
                      "Name": "b",
                      "Type": "int",
                      "Assignment": null,
                      "Attributes": []
                    }
                  ],
                  "Invocations": [],
                  "Variables": [],
                  "Statements": [],
                  "WhileBlocks": [],
                  "ForEachBlocks": [],
                  "ForBlocks": [],
                  "IfBlocks": [],
                  "SwitchBlocks": [],
                  "Returns": [],
                  "TryBlocks": [],
                  "ExpressionBody": {
                    "Tokens": [
                      "aaaaa",
                      "1"
                    ],
                    "Properties": [],
                    "Fields": [
                      "Test.StateInState<T>.aaaaa"
                    ],
                    "Invocations": [],
                    "Type": "int",
                    "Statement": "aaaaa = 1",
                    "ExpressionType": "SimpleAssignmentExpression",
                    "Kind": "Literal"
                  },
                  "Line": 11
                },
                {
                  "ClassRef": "Test.StateInState<T>",
                  "ReturnType": "StateInState",
                  "HasBody": false,
                  "HasExpressionBody": false,
                  "Name": "StateInState",
                  "IsEmpty": true,
                  "FullName": "StateInState",
                  "Modifiers": [
                    "public"
                  ],
                  "Attributes": [],
                  "Parameters": [],
                  "Invocations": [],
                  "Variables": [],
                  "Statements": [],
                  "WhileBlocks": [],
                  "ForEachBlocks": [],
                  "ForBlocks": [],
                  "IfBlocks": [],
                  "SwitchBlocks": [],
                  "Returns": [],
                  "TryBlocks": [],
                  "ExpressionBody": null,
                  "Line": 13
                }
              ],
              "Attributes": [],
              "Line": 6
            }
          ],
          "Usings": [],
          "Line": 4
        }
      ],
      "Classes": [],
      "Usings": [
        {
          "Name": "System",
          "Line": 1
        },
        {
          "Name": "System.Text.Json.Serialization",
          "Line": 2
        }
      ],
      "Line": 1
    },
    {
      "Name": "StateManager",
      "FileName": "D:\\progetti\\UnityCodeSmellAnalyzer\\example\\UnityProjectExample\\Assets\\ExampleScript\\TestSolution\\StateManager.cs",
      "Language": "C#",
      "Interfaces": [],
      "Namespaces": [
        {
          "Attributes": [],
          "Name": "Test",
          "Interfaces": [
            {
              "Name": "ITest",
              "FullName": "Test.ITest",
              "Modifiers": [
                "public"
              ],
              "Methods": [],
              "Properties": [
                {
                  "Name": "P",
                  "Type": "int",
                  "Modifiers": [],
                  "Attributes": [],
                  "IsAutoProperty": true,
                  "Initializer": false,
                  "InitializerValue": null,
                  "Accessor": [
                    {
                      "AccessorType": "get",
                      "HasBody": false,
                      "HasExpressionBody": false,
                      "IsEmpty": true,
                      "Modifiers": [],
                      "Attributes": [],
                      "ReturnType": null,
                      "Parameters": [],
                      "Invocations": [],
                      "Variables": [],
                      "Statements": [],
                      "WhileBlocks": [],
                      "ForEachBlocks": [],
                      "ForBlocks": [],
                      "IfBlocks": [],
                      "SwitchBlocks": [],
                      "Returns": [],
                      "TryBlocks": [],
                      "ExpressionBody": null,
                      "Line": 10
                    }
                  ],
                  "HasExpressionBody": false,
                  "ExpressionBody": null,
                  "Line": 10
                }
              ],
              "Attributes": [],
              "Line": 8
            }
          ],
          "Namespaces": [],
          "Classes": [
            {
              "Name": "StateManager",
              "FullName": "Test.StateManager",
              "FullInheritanceName": "object",
              "InnerClasses": [],
              "ClassConstraints": [],
              "Modifiers": [
                "public",
                "abstract"
              ],
              "Inheritance": "object",
              "Interfaces": [
                "ITest"
              ],
              "Properties": [
                {
                  "Name": "D",
                  "Type": "int",
                  "Modifiers": [
                    "public"
                  ],
                  "Attributes": [],
                  "IsAutoProperty": false,
                  "Initializer": false,
                  "InitializerValue": null,
                  "Accessor": [],
                  "HasExpressionBody": true,
                  "ExpressionBody": {
                    "Tokens": [
                      "d"
                    ],
                    "Properties": [],
                    "Fields": [
                      "Test.StateManager.d"
                    ],
                    "Invocations": [],
                    "Type": "int",
                    "Statement": "d",
                    "ExpressionType": "IdentifierName",
                    "Kind": "Field"
                  },
                  "Line": 20
                },
                {
                  "Name": "A",
                  "Type": "int",
                  "Modifiers": [
                    "public"
                  ],
                  "Attributes": [
                    "JsonIgnore"
                  ],
                  "IsAutoProperty": false,
                  "Initializer": false,
                  "InitializerValue": null,
                  "Accessor": [
                    {
                      "AccessorType": "get",
                      "HasBody": true,
                      "HasExpressionBody": false,
                      "IsEmpty": false,
                      "Modifiers": [],
                      "Attributes": [],
                      "ReturnType": null,
                      "Parameters": [],
                      "Invocations": [],
                      "Variables": [],
                      "Statements": [],
                      "WhileBlocks": [],
                      "ForEachBlocks": [],
                      "ForBlocks": [],
                      "IfBlocks": [],
                      "SwitchBlocks": [],
                      "Returns": [
                        {
                          "ReturnStatement": {
                            "Tokens": [],
                            "Properties": [],
                            "Fields": [
                              "Test.StateManager.a"
                            ],
                            "Invocations": [],
                            "Type": "int",
                            "Statement": "a",
                            "ExpressionType": "IdentifierName",
                            "Kind": "Field"
                          },
                          "ReturnType": "int",
                          "Line": 23
                        }
                      ],
                      "TryBlocks": [],
                      "ExpressionBody": null,
                      "Line": 23
                    },
                    {
                      "AccessorType": "set",
                      "HasBody": true,
                      "HasExpressionBody": false,
                      "IsEmpty": false,
                      "Modifiers": [],
                      "Attributes": [],
                      "ReturnType": null,
                      "Parameters": [],
                      "Invocations": [],
                      "Variables": [
                        {
                          "Variable": {
                            "Name": "a",
                            "Type": "int",
                            "Assignment": "value",
                            "Kind": "Assignment",
                            "AssignmentLine": 22,
                            "VariableKind": "Field",
                            "FullName": "Test.StateManager.a",
                            "AssignmentKind": "SimpleAssignmentExpression"
                          }
                        },
                        {
                          "Variable": {
                            "Name": "value",
                            "Type": "int",
                            "Kind": "Use",
                            "UseLine": 22,
                            "UseKind": "ParameterReference",
                            "AssignedTo": "a",
                            "Value": null,
                            "Operation": "SimpleAssignmentExpression",
                            "VariablesList": []
                          }
                        }
                      ],
                      "Statements": [],
                      "WhileBlocks": [],
                      "ForEachBlocks": [],
                      "ForBlocks": [],
                      "IfBlocks": [],
                      "SwitchBlocks": [],
                      "Returns": [],
                      "TryBlocks": [],
                      "ExpressionBody": null,
                      "Line": 23
                    }
                  ],
                  "HasExpressionBody": false,
                  "ExpressionBody": null,
                  "Line": 22
                },
                {
                  "Name": "B",
                  "Type": "int",
                  "Modifiers": [
                    "public"
                  ],
                  "Attributes": [],
                  "IsAutoProperty": false,
                  "Initializer": false,
                  "InitializerValue": null,
                  "Accessor": [
                    {
                      "AccessorType": "get",
                      "HasBody": true,
                      "HasExpressionBody": false,
                      "IsEmpty": false,
                      "Modifiers": [],
                      "Attributes": [],
                      "ReturnType": null,
                      "Parameters": [],
                      "Invocations": [],
                      "Variables": [],
                      "Statements": [],
                      "WhileBlocks": [],
                      "ForEachBlocks": [],
                      "ForBlocks": [],
                      "IfBlocks": [],
                      "SwitchBlocks": [],
                      "Returns": [
                        {
                          "ReturnStatement": {
                            "Tokens": [],
                            "Properties": [],
                            "Fields": [
                              "Test.StateManager.b"
                            ],
                            "Invocations": [],
                            "Type": "int",
                            "Statement": "b",
                            "ExpressionType": "IdentifierName",
                            "Kind": "Field"
                          },
                          "ReturnType": "int",
                          "Line": 26
                        }
                      ],
                      "TryBlocks": [],
                      "ExpressionBody": null,
                      "Line": 26
                    },
                    {
                      "AccessorType": "set",
                      "HasBody": true,
                      "HasExpressionBody": false,
                      "IsEmpty": false,
                      "Modifiers": [],
                      "Attributes": [],
                      "ReturnType": null,
                      "Parameters": [],
                      "Invocations": [],
                      "Variables": [
                        {
                          "Variable": {
                            "Name": "b",
                            "Type": "int",
                            "Assignment": "value",
                            "Kind": "Assignment",
                            "AssignmentLine": 26,
                            "VariableKind": "Field",
                            "FullName": "Test.StateManager.b",
                            "AssignmentKind": "SimpleAssignmentExpression"
                          }
                        },
                        {
                          "Variable": {
                            "Name": "value",
                            "Type": "int",
                            "Kind": "Use",
                            "UseLine": 26,
                            "UseKind": "ParameterReference",
                            "AssignedTo": "b",
                            "Value": null,
                            "Operation": "SimpleAssignmentExpression",
                            "VariablesList": []
                          }
                        }
                      ],
                      "Statements": [],
                      "WhileBlocks": [
                        {
                          "Condition": {
                            "Tokens": [
                              "Meth22",
                              "0",
                              "Meth22",
                              "0"
                            ],
                            "Properties": [],
                            "Fields": [],
                            "Invocations": [
                              {
                                "Name": "Meth22",
                                "FullName": "Test.StateManager.Meth22()",
                                "ReturnType": "Int32",
                                "FileName": "D:\\progetti\\UnityCodeSmellAnalyzer\\example\\UnityProjectExample\\Assets\\ExampleScript\\TestSolution\\StateManager.cs",
                                "DefinitionLine": 79,
                                "Kind": "SourceFile",
                                "Module": null,
                                "ReferenceFound": true,
                                "Arguments": [],
                                "Line": 27
                              },
                              {
                                "Name": "Meth22",
                                "FullName": "Test.StateManager.Meth22()",
                                "ReturnType": "Int32",
                                "FileName": "D:\\progetti\\UnityCodeSmellAnalyzer\\example\\UnityProjectExample\\Assets\\ExampleScript\\TestSolution\\StateManager.cs",
                                "DefinitionLine": 79,
                                "Kind": "SourceFile",
                                "Module": null,
                                "ReferenceFound": true,
                                "Arguments": [],
                                "Line": 27
                              }
                            ],
                            "Type": "bool",
                            "Statement": "Meth22() < 0 && Meth22() > 0",
                            "ExpressionType": "LogicalAndExpression",
                            "Kind": "Literal"
                          },
                          "Depth": 1,
                          "EndLine": 27,
                          "StartLine": 27,
                          "Invocations": [
                            {
                              "Name": "Meth22",
                              "FullName": "Test.StateManager.Meth22()",
                              "ReturnType": "Int32",
                              "FileName": "D:\\progetti\\UnityCodeSmellAnalyzer\\example\\UnityProjectExample\\Assets\\ExampleScript\\TestSolution\\StateManager.cs",
                              "DefinitionLine": 79,
                              "Kind": "SourceFile",
                              "Module": null,
                              "ReferenceFound": true,
                              "Arguments": [],
                              "Line": 27
                            },
                            {
                              "Name": "Meth22",
                              "FullName": "Test.StateManager.Meth22()",
                              "ReturnType": "Int32",
                              "FileName": "D:\\progetti\\UnityCodeSmellAnalyzer\\example\\UnityProjectExample\\Assets\\ExampleScript\\TestSolution\\StateManager.cs",
                              "DefinitionLine": 79,
                              "Kind": "SourceFile",
                              "Module": null,
                              "ReferenceFound": true,
                              "Arguments": [],
                              "Line": 27
                            }
                          ],
                          "Variables": [],
                          "WhileBlocks": [],
                          "ForBlocks": [],
                          "IfBlocks": [],
                          "SwitchBlocks": [],
                          "ForEachBlocks": [],
                          "ElseBlocks": [],
                          "TryBlocks": [],
                          "Returns": []
                        }
                      ],
                      "ForEachBlocks": [],
                      "ForBlocks": [],
                      "IfBlocks": [],
                      "SwitchBlocks": [],
                      "Returns": [],
                      "TryBlocks": [],
                      "ExpressionBody": null,
                      "Line": 27
                    }
                  ],
                  "HasExpressionBody": false,
                  "ExpressionBody": null,
                  "Line": 24
                },
                {
                  "Name": "C",
                  "Type": "int",
                  "Modifiers": [
                    "public"
                  ],
                  "Attributes": [],
                  "IsAutoProperty": true,
                  "Initializer": true,
                  "InitializerValue": {
                    "Tokens": [
                      "0"
                    ],
                    "Properties": [],
                    "Fields": [],
                    "Invocations": [],
                    "Type": "int",
                    "Statement": "0",
                    "ExpressionType": "NumericLiteralExpression",
                    "Kind": "Literal"
                  },
                  "Accessor": [
                    {
                      "AccessorType": "get",
                      "HasBody": false,
                      "HasExpressionBody": false,
                      "IsEmpty": true,
                      "Modifiers": [],
                      "Attributes": [],
                      "ReturnType": null,
                      "Parameters": [],
                      "Invocations": [],
                      "Variables": [],
                      "Statements": [],
                      "WhileBlocks": [],
                      "ForEachBlocks": [],
                      "ForBlocks": [],
                      "IfBlocks": [],
                      "SwitchBlocks": [],
                      "Returns": [],
                      "TryBlocks": [],
                      "ExpressionBody": null,
                      "Line": 29
                    },
                    {
                      "AccessorType": "set",
                      "HasBody": false,
                      "HasExpressionBody": false,
                      "IsEmpty": true,
                      "Modifiers": [],
                      "Attributes": [],
                      "ReturnType": null,
                      "Parameters": [],
                      "Invocations": [],
                      "Variables": [],
                      "Statements": [],
                      "WhileBlocks": [],
                      "ForEachBlocks": [],
                      "ForBlocks": [],
                      "IfBlocks": [],
                      "SwitchBlocks": [],
                      "Returns": [],
                      "TryBlocks": [],
                      "ExpressionBody": null,
                      "Line": 29
                    }
                  ],
                  "HasExpressionBody": false,
                  "ExpressionBody": null,
                  "Line": 29
                },
                {
                  "Name": "P",
                  "Type": "int",
                  "Modifiers": [
                    "public"
                  ],
                  "Attributes": [],
                  "IsAutoProperty": false,
                  "Initializer": false,
                  "InitializerValue": null,
                  "Accessor": [],
                  "HasExpressionBody": true,
                  "ExpressionBody": {
                    "Tokens": [
                      "a",
                      "+",
                      "d"
                    ],
                    "Properties": [],
                    "Fields": [
                      "Test.StateManager.a",
                      "Test.StateManager.d"
                    ],
                    "Invocations": [],
                    "Type": "int",
                    "Statement": "a + d",
                    "ExpressionType": "AddExpression",
                    "Kind": "Method"
                  },
                  "Line": 31
                }
              ],
              "Methods": [
                {
                  "HasBody": true,
                  "HasExpressionBody": false,
                  "Name": "MethodArg",
                  "IsEmpty": false,
                  "FullName": "Test.StateManager.MethodArg(int, bool, Test.State)",
                  "Modifiers": [
                    "public"
                  ],
                  "Attributes": [],
                  "ReturnType": "void",
                  "Parameters": [
                    {
                      "Name": "a",
                      "Type": "int",
                      "Assignment": null,
                      "Attributes": []
                    },
                    {
                      "Name": "b",
                      "Type": "bool",
                      "Assignment": null,
                      "Attributes": []
                    },
                    {
                      "Name": "s",
                      "Type": "State",
                      "Assignment": null,
                      "Attributes": []
                    }
                  ],
                  "Invocations": [],
                  "Variables": [],
                  "Statements": [],
                  "WhileBlocks": [
                    {
                      "Condition": {
                        "Tokens": [
                          "a",
                          "c",
                          "0"
                        ],
                        "Properties": [],
                        "Fields": [
                          "Test.StateManager.c"
                        ],
                        "Invocations": [],
                        "Type": "bool",
                        "Statement": "(a = c) == 0",
                        "ExpressionType": "EqualsExpression",
                        "Kind": "Method"
                      },
                      "Depth": 1,
                      "EndLine": 35,
                      "StartLine": 35,
                      "Invocations": [
                        {
                          "Name": "WriteLine",
                          "FullName": "System.Console.WriteLine(int)",
                          "ReturnType": "Void",
                          "FileName": null,
                          "DefinitionLine": 1,
                          "Kind": "MetadataFile",
                          "Module": "CommonLanguageRuntimeLibrary",
                          "ReferenceFound": true,
                          "Arguments": [
                            {
                              "Argument": "a",
                              "IsInvocation": false,
                              "IsLiteral": false
                            }
                          ],
                          "Line": 35
                        }
                      ],
                      "Variables": [
                        {
                          "Variable": {
                            "Name": "a",
                            "Type": "int",
                            "Assignment": "c",
                            "Kind": "Assignment",
                            "AssignmentLine": 34,
                            "VariableKind": "Parameter",
                            "FullName": "int",
                            "AssignmentKind": "SimpleAssignmentExpression"
                          }
                        },
                        {
                          "Variable": {
                            "Name": "c",
                            "Type": "int",
                            "Kind": "Use",
                            "UseLine": 34,
                            "UseKind": "FieldReference",
                            "AssignedTo": "a",
                            "Value": null,
                            "Operation": "SimpleAssignmentExpression",
                            "VariablesList": []
                          }
                        }
                      ],
                      "WhileBlocks": [],
                      "ForBlocks": [],
                      "IfBlocks": [],
                      "SwitchBlocks": [],
                      "ForEachBlocks": [],
                      "ElseBlocks": [],
                      "TryBlocks": [],
                      "Returns": []
                    }
                  ],
                  "ForEachBlocks": [],
                  "ForBlocks": [],
                  "IfBlocks": [],
                  "SwitchBlocks": [],
                  "Returns": [],
                  "TryBlocks": [],
                  "ExpressionBody": null,
                  "Line": 33
                },
                {
                  "HasBody": true,
                  "HasExpressionBody": false,
                  "Name": "SwitchMeth",
                  "IsEmpty": false,
                  "FullName": "Test.StateManager.SwitchMeth()",
                  "Modifiers": [
                    "public"
                  ],
                  "Attributes": [],
                  "ReturnType": "void",
                  "Parameters": [],
                  "Invocations": [
                    {
                      "Name": "MethodArg",
                      "FullName": "Test.StateManager.MethodArg(int, bool, Test.State)",
                      "ReturnType": "Void",
                      "FileName": "D:\\progetti\\UnityCodeSmellAnalyzer\\example\\UnityProjectExample\\Assets\\ExampleScript\\TestSolution\\StateManager.cs",
                      "DefinitionLine": 33,
                      "Kind": "SourceFile",
                      "Module": null,
                      "ReferenceFound": true,
                      "Arguments": [
                        {
                          "Argument": "1",
                          "IsInvocation": false,
                          "IsLiteral": false
                        },
                        {
                          "Argument": "false",
                          "IsInvocation": false,
                          "IsLiteral": false
                        },
                        {
                          "Argument": "new State(1, 2)",
                          "IsInvocation": true,
                          "IsLiteral": false
                        }
                      ],
                      "Line": 40
                    }
                  ],
                  "Variables": [
                    {
                      "Variable": {
                        "Name": "bbb",
                        "Type": "int",
                        "Assignment": "0",
                        "Kind": "Definition",
                        "DefinitionLine": 40
                      }
                    },
                    {
                      "Variable": {
                        "Name": "aa",
                        "Type": "int",
                        "Assignment": "A",
                        "Kind": "Definition",
                        "DefinitionLine": 43
                      }
                    }
                  ],
                  "Statements": [],
                  "WhileBlocks": [],
                  "ForEachBlocks": [],
                  "ForBlocks": [],
                  "IfBlocks": [
                    {
                      "Condition": {
                        "Tokens": [
                          "A",
                          "0",
                          "bbb",
                          "0",
                          "c",
                          "1"
                        ],
                        "Properties": [
                          "Test.StateManager.A"
                        ],
                        "Fields": [
                          "Test.StateManager.c"
                        ],
                        "Invocations": [],
                        "Type": "bool",
                        "Statement": "A > 0 && bbb < 0 || c > 1",
                        "ExpressionType": "LogicalOrExpression",
                        "Kind": "Literal"
                      },
                      "Else": null,
                      "DanglingElse": true,
                      "Depth": 1,
                      "EndLine": 42,
                      "StartLine": 42,
                      "Invocations": [
                        {
                          "Name": "WriteLine",
                          "FullName": "System.Console.WriteLine(string)",
                          "ReturnType": "Void",
                          "FileName": null,
                          "DefinitionLine": 1,
                          "Kind": "MetadataFile",
                          "Module": "CommonLanguageRuntimeLibrary",
                          "ReferenceFound": true,
                          "Arguments": [
                            {
                              "Argument": "\"A\"",
                              "IsInvocation": false,
                              "IsLiteral": false
                            }
                          ],
                          "Line": 42
                        }
                      ],
                      "Variables": [],
                      "WhileBlocks": [],
                      "ForBlocks": [],
                      "IfBlocks": [],
                      "SwitchBlocks": [],
                      "ForEachBlocks": [],
                      "ElseBlocks": [],
                      "TryBlocks": [],
                      "Returns": []
                    }
                  ],
                  "SwitchBlocks": [
                    {
                      "Condition": {
                        "Tokens": [
                          "A"
                        ],
                        "Properties": [
                          "Test.StateManager.A"
                        ],
                        "Fields": [],
                        "Invocations": [],
                        "Type": "int",
                        "Statement": "A",
                        "ExpressionType": "IdentifierName",
                        "Kind": "Property"
                      },
                      "CaseBranches": [
                        {
                          "labels": [
                            "case 0:",
                            "case 2:"
                          ],
                          "EndLine": 49,
                          "StartLine": 47,
                          "Invocations": [
                            {
                              "Name": "WriteLine",
                              "FullName": "System.Console.WriteLine(int)",
                              "ReturnType": "Void",
                              "FileName": null,
                              "DefinitionLine": 1,
                              "Kind": "MetadataFile",
                              "Module": "CommonLanguageRuntimeLibrary",
                              "ReferenceFound": true,
                              "Arguments": [
                                {
                                  "Argument": "0",
                                  "IsInvocation": false,
                                  "IsLiteral": false
                                }
                              ],
                              "Line": 49
                            }
                          ],
                          "Variables": [],
                          "WhileBlocks": [],
                          "ForBlocks": [],
                          "IfBlocks": [],
                          "SwitchBlocks": [],
                          "ForEachBlocks": [],
                          "ElseBlocks": [],
                          "TryBlocks": [],
                          "Returns": []
                        },
                        {
                          "labels": [
                            "case 1:"
                          ],
                          "EndLine": 50,
                          "StartLine": 50,
                          "Invocations": [],
                          "Variables": [],
                          "WhileBlocks": [
                            {
                              "Condition": {
                                "Tokens": [
                                  "B",
                                  "10"
                                ],
                                "Properties": [
                                  "Test.StateManager.B"
                                ],
                                "Fields": [],
                                "Invocations": [],
                                "Type": "bool",
                                "Statement": "B > 10",
                                "ExpressionType": "GreaterThanExpression",
                                "Kind": "Method"
                              },
                              "Depth": 2,
                              "EndLine": 50,
                              "StartLine": 50,
                              "Invocations": [],
                              "Variables": [
                                {
                                  "Variable": {
                                    "Name": "B",
                                    "Type": "int",
                                    "Assignment": "1",
                                    "Kind": "Assignment",
                                    "AssignmentLine": 49,
                                    "VariableKind": "Property",
                                    "FullName": "Test.StateManager.B",
                                    "AssignmentKind": "SubtractAssignmentExpression"
                                  }
                                },
                                {
                                  "Variable": {
                                    "Name": null,
                                    "Type": "int",
                                    "Kind": "Use",
                                    "UseLine": 49,
                                    "UseKind": "Literal",
                                    "AssignedTo": "B",
                                    "Value": "1",
                                    "Operation": "SubtractAssignmentExpression",
                                    "VariablesList": []
                                  }
                                }
                              ],
                              "WhileBlocks": [],
                              "ForBlocks": [],
                              "IfBlocks": [],
                              "SwitchBlocks": [],
                              "ForEachBlocks": [],
                              "ElseBlocks": [],
                              "TryBlocks": [],
                              "Returns": []
                            }
                          ],
                          "ForBlocks": [],
                          "IfBlocks": [],
                          "SwitchBlocks": [],
                          "ForEachBlocks": [],
                          "ElseBlocks": [],
                          "TryBlocks": [],
                          "Returns": []
                        },
                        {
                          "labels": [
                            "default:"
                          ],
                          "EndLine": 51,
                          "StartLine": 51,
                          "Invocations": [
                            {
                              "Name": "WriteLine",
                              "FullName": "System.Console.WriteLine(int)",
                              "ReturnType": "Void",
                              "FileName": null,
                              "DefinitionLine": 1,
                              "Kind": "MetadataFile",
                              "Module": "CommonLanguageRuntimeLibrary",
                              "ReferenceFound": true,
                              "Arguments": [
                                {
                                  "Argument": "10",
                                  "IsInvocation": false,
                                  "IsLiteral": false
                                }
                              ],
                              "Line": 51
                            }
                          ],
                          "Variables": [],
                          "WhileBlocks": [],
                          "ForBlocks": [],
                          "IfBlocks": [],
                          "SwitchBlocks": [],
                          "ForEachBlocks": [],
                          "ElseBlocks": [],
                          "TryBlocks": [],
                          "Returns": []
                        }
                      ],
                      "Depth": 1,
                      "EndLine": 52,
                      "StartLine": 45,
                      "Invocations": [],
                      "Variables": [],
                      "WhileBlocks": [],
                      "ForBlocks": [],
                      "IfBlocks": [],
                      "SwitchBlocks": [],
                      "ForEachBlocks": [],
                      "ElseBlocks": [],
                      "TryBlocks": [],
                      "Returns": []
                    }
                  ],
                  "Returns": [],
                  "TryBlocks": [
                    {
                      "CatchBlocks": [
                        {
                          "Declaration": "(Exception)",
                          "Filter": {
                            "Tokens": [
                              "A",
                              "1"
                            ],
                            "Properties": [
                              "Test.StateManager.A"
                            ],
                            "Fields": [],
                            "Invocations": [],
                            "Type": "bool",
                            "Statement": "A == 1",
                            "ExpressionType": "EqualsExpression",
                            "Kind": "Method"
                          },
                          "EndLine": 66,
                          "StartLine": 58,
                          "Invocations": [
                            {
                              "Name": "Meth22",
                              "FullName": "Test.StateManager.Meth22()",
                              "ReturnType": "Int32",
                              "FileName": "D:\\progetti\\UnityCodeSmellAnalyzer\\example\\UnityProjectExample\\Assets\\ExampleScript\\TestSolution\\StateManager.cs",
                              "DefinitionLine": 79,
                              "Kind": "SourceFile",
                              "Module": null,
                              "ReferenceFound": true,
                              "Arguments": [],
                              "Line": 60
                            }
                          ],
                          "Variables": [],
                          "WhileBlocks": [],
                          "ForBlocks": [],
                          "IfBlocks": [],
                          "SwitchBlocks": [],
                          "ForEachBlocks": [],
                          "ElseBlocks": [],
                          "TryBlocks": [
                            {
                              "CatchBlocks": [
                                {
                                  "Declaration": "(Exception)",
                                  "Filter": null,
                                  "EndLine": 65,
                                  "StartLine": 65,
                                  "Invocations": [
                                    {
                                      "Name": "Meth23",
                                      "FullName": "Test.StateManager.Meth23()",
                                      "ReturnType": "Void",
                                      "FileName": "D:\\progetti\\UnityCodeSmellAnalyzer\\example\\UnityProjectExample\\Assets\\ExampleScript\\TestSolution\\StateManager.cs",
                                      "DefinitionLine": 80,
                                      "Kind": "SourceFile",
                                      "Module": null,
                                      "ReferenceFound": true,
                                      "Arguments": [],
                                      "Line": 65
                                    }
                                  ],
                                  "Variables": [],
                                  "WhileBlocks": [],
                                  "ForBlocks": [],
                                  "IfBlocks": [],
                                  "SwitchBlocks": [],
                                  "ForEachBlocks": [],
                                  "ElseBlocks": [],
                                  "TryBlocks": [],
                                  "Returns": []
                                }
                              ],
                              "FinallyBlock": null,
                              "EndLine": 65,
                              "StartLine": 61,
                              "Invocations": [
                                {
                                  "Name": "MethExp",
                                  "FullName": "Test.StateManager.MethExp()",
                                  "ReturnType": "Int32",
                                  "FileName": "D:\\progetti\\UnityCodeSmellAnalyzer\\example\\UnityProjectExample\\Assets\\ExampleScript\\TestSolution\\StateManager.cs",
                                  "DefinitionLine": 82,
                                  "Kind": "SourceFile",
                                  "Module": null,
                                  "ReferenceFound": true,
                                  "Arguments": [],
                                  "Line": 63
                                }
                              ],
                              "Variables": [],
                              "WhileBlocks": [],
                              "ForBlocks": [],
                              "IfBlocks": [],
                              "SwitchBlocks": [],
                              "ForEachBlocks": [],
                              "ElseBlocks": [],
                              "TryBlocks": [],
                              "Returns": []
                            }
                          ],
                          "Returns": []
                        }
                      ],
                      "FinallyBlock": null,
                      "EndLine": 66,
                      "StartLine": 54,
                      "Invocations": [
                        {
                          "Name": "Meth23",
                          "FullName": "Test.StateManager.Meth23()",
                          "ReturnType": "Void",
                          "FileName": "D:\\progetti\\UnityCodeSmellAnalyzer\\example\\UnityProjectExample\\Assets\\ExampleScript\\TestSolution\\StateManager.cs",
                          "DefinitionLine": 80,
                          "Kind": "SourceFile",
                          "Module": null,
                          "ReferenceFound": true,
                          "Arguments": [],
                          "Line": 56
                        }
                      ],
                      "Variables": [],
                      "WhileBlocks": [],
                      "ForBlocks": [],
                      "IfBlocks": [],
                      "SwitchBlocks": [],
                      "ForEachBlocks": [],
                      "ElseBlocks": [],
                      "TryBlocks": [],
                      "Returns": []
                    },
                    {
                      "CatchBlocks": [],
                      "FinallyBlock": {
                        "EndLine": 75,
                        "StartLine": 72,
                        "Invocations": [
                          {
                            "Name": "Meth22",
                            "FullName": "Test.StateManager.Meth22()",
                            "ReturnType": "Int32",
                            "FileName": "D:\\progetti\\UnityCodeSmellAnalyzer\\example\\UnityProjectExample\\Assets\\ExampleScript\\TestSolution\\StateManager.cs",
                            "DefinitionLine": 79,
                            "Kind": "SourceFile",
                            "Module": null,
                            "ReferenceFound": true,
                            "Arguments": [],
                            "Line": 74
                          }
                        ],
                        "Variables": [],
                        "WhileBlocks": [],
                        "ForBlocks": [],
                        "IfBlocks": [],
                        "SwitchBlocks": [],
                        "ForEachBlocks": [],
                        "ElseBlocks": [],
                        "TryBlocks": [],
                        "Returns": []
                      },
                      "EndLine": 75,
                      "StartLine": 68,
                      "Invocations": [
                        {
                          "Name": "Meth23",
                          "FullName": "Test.StateManager.Meth23()",
                          "ReturnType": "Void",
                          "FileName": "D:\\progetti\\UnityCodeSmellAnalyzer\\example\\UnityProjectExample\\Assets\\ExampleScript\\TestSolution\\StateManager.cs",
                          "DefinitionLine": 80,
                          "Kind": "SourceFile",
                          "Module": null,
                          "ReferenceFound": true,
                          "Arguments": [],
                          "Line": 70
                        }
                      ],
                      "Variables": [],
                      "WhileBlocks": [],
                      "ForBlocks": [],
                      "IfBlocks": [],
                      "SwitchBlocks": [],
                      "ForEachBlocks": [],
                      "ElseBlocks": [],
                      "TryBlocks": [],
                      "Returns": []
                    }
                  ],
                  "ExpressionBody": null,
                  "Line": 37
                },
                {
                  "HasBody": false,
                  "HasExpressionBody": true,
                  "Name": "Meth22",
                  "IsEmpty": false,
                  "FullName": "Test.StateManager.Meth22()",
                  "Modifiers": [
                    "public"
                  ],
                  "Attributes": [],
                  "ReturnType": "int",
                  "Parameters": [],
                  "Invocations": [],
                  "Variables": [],
                  "Statements": [],
                  "WhileBlocks": [],
                  "ForEachBlocks": [],
                  "ForBlocks": [],
                  "IfBlocks": [],
                  "SwitchBlocks": [],
                  "Returns": [],
                  "TryBlocks": [],
                  "ExpressionBody": {
                    "Tokens": [
                      "10"
                    ],
                    "Properties": [],
                    "Fields": [],
                    "Invocations": [],
                    "Type": "int",
                    "Statement": "10",
                    "ExpressionType": "NumericLiteralExpression",
                    "Kind": "Literal"
                  },
                  "Line": 79
                },
                {
                  "HasBody": false,
                  "HasExpressionBody": false,
                  "Name": "Meth23",
                  "IsEmpty": true,
                  "FullName": "Test.StateManager.Meth23()",
                  "Modifiers": [
                    "public"
                  ],
                  "Attributes": [],
                  "ReturnType": "void",
                  "Parameters": [],
                  "Invocations": [],
                  "Variables": [],
                  "Statements": [],
                  "WhileBlocks": [],
                  "ForEachBlocks": [],
                  "ForBlocks": [],
                  "IfBlocks": [],
                  "SwitchBlocks": [],
                  "Returns": [],
                  "TryBlocks": [],
                  "ExpressionBody": null,
                  "Line": 80
                },
                {
                  "HasBody": false,
                  "HasExpressionBody": true,
                  "Name": "MethExp",
                  "IsEmpty": false,
                  "FullName": "Test.StateManager.MethExp()",
                  "Modifiers": [
                    "public"
                  ],
                  "Attributes": [],
                  "ReturnType": "int",
                  "Parameters": [],
                  "Invocations": [],
                  "Variables": [],
                  "Statements": [],
                  "WhileBlocks": [],
                  "ForEachBlocks": [],
                  "ForBlocks": [],
                  "IfBlocks": [],
                  "SwitchBlocks": [],
                  "Returns": [],
                  "TryBlocks": [],
                  "ExpressionBody": {
                    "Tokens": [
                      "a",
                      "+",
                      "Meth22"
                    ],
                    "Properties": [],
                    "Fields": [
                      "Test.StateManager.a"
                    ],
                    "Invocations": [
                      {
                        "Name": "Meth22",
                        "FullName": "Test.StateManager.Meth22()",
                        "ReturnType": "Int32",
                        "FileName": "D:\\progetti\\UnityCodeSmellAnalyzer\\example\\UnityProjectExample\\Assets\\ExampleScript\\TestSolution\\StateManager.cs",
                        "DefinitionLine": 79,
                        "Kind": "SourceFile",
                        "Module": null,
                        "ReferenceFound": true,
                        "Arguments": [],
                        "Line": 82
                      }
                    ],
                    "Type": "int",
                    "Statement": "a + Meth22()",
                    "ExpressionType": "AddExpression",
                    "Kind": "Method"
                  },
                  "Line": 82
                },
                {
                  "HasBody": false,
                  "HasExpressionBody": true,
                  "Name": "Ciaone",
                  "IsEmpty": false,
                  "FullName": "Test.StateManager.Ciaone()",
                  "Modifiers": [
                    "public"
                  ],
                  "Attributes": [],
                  "ReturnType": "string",
                  "Parameters": [],
                  "Invocations": [],
                  "Variables": [],
                  "Statements": [],
                  "WhileBlocks": [],
                  "ForEachBlocks": [],
                  "ForBlocks": [],
                  "IfBlocks": [],
                  "SwitchBlocks": [],
                  "Returns": [],
                  "TryBlocks": [],
                  "ExpressionBody": {
                    "Tokens": [
                      "\"Ciaone\"",
                      "+",
                      "\"\""
                    ],
                    "Properties": [],
                    "Fields": [],
                    "Invocations": [],
                    "Type": "string",
                    "Statement": "\"Ciaone\" + \"\"",
                    "ExpressionType": "AddExpression",
                    "Kind": "Method"
                  },
                  "Line": 83
                }
              ],
              "Fields": [
                {
                  "Name": "a",
                  "Type": "int",
                  "Modifiers": [
                    "protected"
                  ],
                  "Assignment": null,
                  "Attributes": [],
                  "FullName": "Test.StateManager.a",
                  "Line": 15
                },
                {
                  "Name": "b",
                  "Type": "int",
                  "Modifiers": [
                    "protected"
                  ],
                  "Assignment": null,
                  "Attributes": [],
                  "FullName": "Test.StateManager.b",
                  "Line": 16
                },
                {
                  "Name": "c",
                  "Type": "int",
                  "Modifiers": [
                    "protected"
                  ],
                  "Assignment": null,
                  "Attributes": [],
                  "FullName": "Test.StateManager.c",
                  "Line": 17
                },
                {
                  "Name": "d",
                  "Type": "int",
                  "Modifiers": [
                    "protected"
                  ],
                  "Assignment": null,
                  "Attributes": [],
                  "FullName": "Test.StateManager.d",
                  "Line": 18
                }
              ],
              "Constructors": [
                {
                  "ClassRef": "Test.StateManager",
                  "ReturnType": "StateManager",
                  "HasBody": true,
                  "HasExpressionBody": false,
                  "Name": "StateManager",
                  "IsEmpty": false,
                  "FullName": "StateManager",
                  "Modifiers": [
                    "public"
                  ],
                  "Attributes": [],
                  "Parameters": [
                    {
                      "Name": "a",
                      "Type": "int",
                      "Assignment": null,
                      "Attributes": []
                    }
                  ],
                  "Invocations": [],
                  "Variables": [
                    {
                      "Variable": {
                        "Name": "this.a",
                        "Type": "int",
                        "Assignment": "a",
                        "Kind": "Assignment",
                        "AssignmentLine": 87,
                        "VariableKind": "Field",
                        "FullName": "Test.StateManager.a",
                        "AssignmentKind": "SimpleAssignmentExpression"
                      }
                    },
                    {
                      "Variable": {
                        "Name": "a",
                        "Type": "int",
                        "Kind": "Use",
                        "UseLine": 87,
                        "UseKind": "ParameterReference",
                        "AssignedTo": "this.a",
                        "Value": null,
                        "Operation": "SimpleAssignmentExpression",
                        "VariablesList": []
                      }
                    }
                  ],
                  "Statements": [],
                  "WhileBlocks": [],
                  "ForEachBlocks": [],
                  "ForBlocks": [],
                  "IfBlocks": [],
                  "SwitchBlocks": [],
                  "Returns": [],
                  "TryBlocks": [],
                  "ExpressionBody": null,
                  "Line": 86
                }
              ],
              "Attributes": [],
              "Line": 13
            }
          ],
          "Usings": [],
          "Line": 5
        }
      ],
      "Classes": [],
      "Usings": [
        {
          "Name": "System",
          "Line": 1
        },
        {
          "Name": "System.Runtime.ExceptionServices",
          "Line": 2
        },
        {
          "Name": "System.Text.Json.Serialization",
          "Line": 3
        }
      ],
      "Line": 1
    },
    {
      "Name": ".NETCoreApp,Version=v6.0.AssemblyAttributes",
      "FileName": "D:\\progetti\\UnityCodeSmellAnalyzer\\example\\UnityProjectExample\\Assets\\ExampleScript\\TestSolution\\obj\\Debug\\net6.0\\.NETCoreApp,Version=v6.0.AssemblyAttributes.cs",
      "Language": "C#",
      "Interfaces": [],
      "Namespaces": [],
      "Classes": [],
      "Usings": [
        {
          "Name": "System",
          "Line": 2
        },
        {
          "Name": "System.Reflection",
          "Line": 3
        }
      ],
      "Line": 2
    },
    {
      "Name": "TestSolution.AssemblyInfo",
      "FileName": "D:\\progetti\\UnityCodeSmellAnalyzer\\example\\UnityProjectExample\\Assets\\ExampleScript\\TestSolution\\obj\\Debug\\net6.0\\TestSolution.AssemblyInfo.cs",
      "Language": "C#",
      "Interfaces": [],
      "Namespaces": [],
      "Classes": [],
      "Usings": [
        {
          "Name": "System",
          "Line": 11
        },
        {
          "Name": "System.Reflection",
          "Line": 12
        }
      ],
      "Line": 11
    },
    {
      "Name": "TestSolution.GlobalUsings.g",
      "FileName": "D:\\progetti\\UnityCodeSmellAnalyzer\\example\\UnityProjectExample\\Assets\\ExampleScript\\TestSolution\\obj\\Debug\\net6.0\\TestSolution.GlobalUsings.g.cs",
      "Language": "C#",
      "Interfaces": [],
      "Namespaces": [],
      "Classes": [],
      "Usings": [
        {
          "Name": "global::System",
          "Line": 2
        },
        {
          "Name": "global::System.Collections.Generic",
          "Line": 3
        },
        {
          "Name": "global::System.IO",
          "Line": 4
        },
        {
          "Name": "global::System.Linq",
          "Line": 5
        },
        {
          "Name": "global::System.Net.Http",
          "Line": 6
        },
        {
          "Name": "global::System.Threading",
          "Line": 7
        },
        {
          "Name": "global::System.Threading.Tasks",
          "Line": 8
        }
      ],
      "Line": 2
    },
    {
      "Name": "CubeManager",
      "FileName": "D:\\progetti\\UnityCodeSmellAnalyzer\\example\\UnityProjectExample\\Assets\\Script\\CubeManager.cs",
      "Language": "C#",
      "Interfaces": [],
      "Namespaces": [
        {
          "Attributes": [],
          "Name": "MyGame",
          "Interfaces": [],
          "Namespaces": [
            {
              "Attributes": [],
              "Name": "Cube",
              "Interfaces": [],
              "Namespaces": [],
              "Classes": [
                {
                  "Name": "CubeHolder",
                  "FullName": "MyGame.Cube.CubeHolder",
                  "FullInheritanceName": "object",
                  "InnerClasses": [],
                  "ClassConstraints": [],
                  "Modifiers": [
                    "public"
                  ],
                  "Inheritance": "object",
                  "Interfaces": [],
                  "Properties": [
                    {
                      "Name": "Cube",
                      "Type": "GameObject",
                      "Modifiers": [
                        "public"
                      ],
                      "Attributes": [],
                      "IsAutoProperty": false,
                      "Initializer": false,
                      "InitializerValue": null,
                      "Accessor": [
                        {
                          "AccessorType": "get",
                          "HasBody": true,
                          "HasExpressionBody": false,
                          "IsEmpty": false,
                          "Modifiers": [],
                          "Attributes": [],
                          "ReturnType": null,
                          "Parameters": [],
                          "Invocations": [],
                          "Variables": [],
                          "Statements": [],
                          "WhileBlocks": [],
                          "ForEachBlocks": [],
                          "ForBlocks": [],
                          "IfBlocks": [],
                          "SwitchBlocks": [],
                          "Returns": [
                            {
                              "ReturnStatement": {
                                "Tokens": [],
                                "Properties": [],
                                "Fields": [
                                  "MyGame.Cube.CubeHolder.cube"
                                ],
                                "Invocations": [],
                                "Type": "UnityEngine.GameObject",
                                "Statement": "cube",
                                "ExpressionType": "IdentifierName",
                                "Kind": "Field"
                              },
                              "ReturnType": "UnityEngine.GameObject",
                              "Line": 16
                            }
                          ],
                          "TryBlocks": [],
                          "ExpressionBody": null,
                          "Line": 16
                        }
                      ],
                      "HasExpressionBody": false,
                      "ExpressionBody": null,
                      "Line": 16
                    }
                  ],
                  "Methods": [],
                  "Fields": [
                    {
                      "Name": "cube",
                      "Type": "GameObject",
                      "Modifiers": [
                        "protected"
                      ],
                      "Assignment": null,
                      "Attributes": [
                        "SerializeField"
                      ],
                      "FullName": "MyGame.Cube.CubeHolder.cube",
                      "Line": 13
                    },
                    {
                      "Name": "num",
                      "Type": "int",
                      "Modifiers": [
                        "public"
                      ],
                      "Assignment": "0",
                      "Attributes": [],
                      "FullName": "MyGame.Cube.CubeHolder.num",
                      "Line": 14
                    }
                  ],
                  "Constructors": [
                    {
                      "ClassRef": "MyGame.Cube.CubeHolder",
                      "ReturnType": "CubeHolder",
                      "HasBody": true,
                      "HasExpressionBody": false,
                      "Name": "CubeHolder",
                      "IsEmpty": false,
                      "FullName": "CubeHolder",
                      "Modifiers": [
                        "public"
                      ],
                      "Attributes": [],
                      "Parameters": [
                        {
                          "Name": "c",
                          "Type": "int",
                          "Assignment": null,
                          "Attributes": []
                        }
                      ],
                      "Invocations": [],
                      "Variables": [
                        {
                          "Variable": {
                            "Name": "num",
                            "Type": "int",
                            "Assignment": "c",
                            "Kind": "Assignment",
                            "AssignmentLine": 16,
                            "VariableKind": "Field",
                            "FullName": "MyGame.Cube.CubeHolder.num",
                            "AssignmentKind": "SimpleAssignmentExpression"
                          }
                        },
                        {
                          "Variable": {
                            "Name": "c",
                            "Type": "int",
                            "Kind": "Use",
                            "UseLine": 16,
                            "UseKind": "ParameterReference",
                            "AssignedTo": "num",
                            "Value": null,
                            "Operation": "SimpleAssignmentExpression",
                            "VariablesList": []
                          }
                        }
                      ],
                      "Statements": [],
                      "WhileBlocks": [],
                      "ForEachBlocks": [],
                      "ForBlocks": [],
                      "IfBlocks": [],
                      "SwitchBlocks": [],
                      "Returns": [],
                      "TryBlocks": [],
                      "ExpressionBody": null,
                      "Line": 17
                    }
                  ],
                  "Attributes": [],
                  "Line": 11
                },
                {
                  "Name": "CuboPiccolo",
                  "FullName": "MyGame.Cube.CuboPiccolo",
                  "FullInheritanceName": "object",
                  "InnerClasses": [],
                  "ClassConstraints": [],
                  "Modifiers": [
                    "public",
                    "sealed"
                  ],
                  "Inheritance": "object",
                  "Interfaces": [
                    "InterfacesTest"
                  ],
                  "Properties": [
                    {
                      "Name": "Anim",
                      "Type": "Animation",
                      "Modifiers": [
                        "public"
                      ],
                      "Attributes": [],
                      "IsAutoProperty": false,
                      "Initializer": false,
                      "InitializerValue": null,
                      "Accessor": [
                        {
                          "AccessorType": "get",
                          "HasBody": true,
                          "HasExpressionBody": false,
                          "IsEmpty": false,
                          "Modifiers": [],
                          "Attributes": [],
                          "ReturnType": null,
                          "Parameters": [],
                          "Invocations": [],
                          "Variables": [],
                          "Statements": [],
                          "WhileBlocks": [],
                          "ForEachBlocks": [],
                          "ForBlocks": [],
                          "IfBlocks": [],
                          "SwitchBlocks": [],
                          "Returns": [
                            {
                              "ReturnStatement": {
                                "Tokens": [],
                                "Properties": [],
                                "Fields": [
                                  "MyGame.Cube.CuboPiccolo.anim"
                                ],
                                "Invocations": [],
                                "Type": "UnityEngine.Animation",
                                "Statement": "anim",
                                "ExpressionType": "IdentifierName",
                                "Kind": "Field"
                              },
                              "ReturnType": "UnityEngine.Animation",
                              "Line": 25
                            }
                          ],
                          "TryBlocks": [],
                          "ExpressionBody": null,
                          "Line": 25
                        },
                        {
                          "AccessorType": "set",
                          "HasBody": true,
                          "HasExpressionBody": false,
                          "IsEmpty": false,
                          "Modifiers": [],
                          "Attributes": [],
                          "ReturnType": null,
                          "Parameters": [],
                          "Invocations": [],
                          "Variables": [
                            {
                              "Variable": {
                                "Name": "anim",
                                "Type": "UnityEngine.Animation",
                                "Assignment": "value",
                                "Kind": "Assignment",
                                "AssignmentLine": 24,
                                "VariableKind": "Field",
                                "FullName": "MyGame.Cube.CuboPiccolo.anim",
                                "AssignmentKind": "SimpleAssignmentExpression"
                              }
                            },
                            {
                              "Variable": {
                                "Name": "value",
                                "Type": "UnityEngine.Animation",
                                "Kind": "Use",
                                "UseLine": 24,
                                "UseKind": "ParameterReference",
                                "AssignedTo": "anim",
                                "Value": null,
                                "Operation": "SimpleAssignmentExpression",
                                "VariablesList": []
                              }
                            }
                          ],
                          "Statements": [],
                          "WhileBlocks": [],
                          "ForEachBlocks": [],
                          "ForBlocks": [],
                          "IfBlocks": [],
                          "SwitchBlocks": [],
                          "Returns": [],
                          "TryBlocks": [],
                          "ExpressionBody": null,
                          "Line": 25
                        }
                      ],
                      "HasExpressionBody": false,
                      "ExpressionBody": null,
                      "Line": 25
                    },
                    {
                      "Name": "Number",
                      "Type": "int",
                      "Modifiers": [
                        "public"
                      ],
                      "Attributes": [],
                      "IsAutoProperty": false,
                      "Initializer": false,
                      "InitializerValue": null,
                      "Accessor": [
                        {
                          "AccessorType": "get",
                          "HasBody": false,
                          "HasExpressionBody": true,
                          "IsEmpty": false,
                          "Modifiers": [],
                          "Attributes": [],
                          "ReturnType": null,
                          "Parameters": [],
                          "Invocations": [],
                          "Variables": [],
                          "Statements": [],
                          "WhileBlocks": [],
                          "ForEachBlocks": [],
                          "ForBlocks": [],
                          "IfBlocks": [],
                          "SwitchBlocks": [],
                          "Returns": [],
                          "TryBlocks": [],
                          "ExpressionBody": {
                            "Tokens": [
                              "throw",
                              "new",
                              "System.NotImplementedException"
                            ],
                            "Properties": [],
                            "Fields": [],
                            "Invocations": [],
                            "Type": null,
                            "Statement": "throw new System.NotImplementedException()",
                            "ExpressionType": "ThrowExpression",
                            "Kind": "Literal"
                          },
                          "Line": 26
                        },
                        {
                          "AccessorType": "set",
                          "HasBody": false,
                          "HasExpressionBody": true,
                          "IsEmpty": false,
                          "Modifiers": [],
                          "Attributes": [],
                          "ReturnType": null,
                          "Parameters": [],
                          "Invocations": [],
                          "Variables": [],
                          "Statements": [],
                          "WhileBlocks": [],
                          "ForEachBlocks": [],
                          "ForBlocks": [],
                          "IfBlocks": [],
                          "SwitchBlocks": [],
                          "Returns": [],
                          "TryBlocks": [],
                          "ExpressionBody": {
                            "Tokens": [
                              "throw",
                              "new",
                              "System.NotImplementedException"
                            ],
                            "Properties": [],
                            "Fields": [],
                            "Invocations": [],
                            "Type": null,
                            "Statement": "throw new System.NotImplementedException()",
                            "ExpressionType": "ThrowExpression",
                            "Kind": "Literal"
                          },
                          "Line": 26
                        }
                      ],
                      "HasExpressionBody": false,
                      "ExpressionBody": null,
                      "Line": 26
                    },
                    {
                      "Name": "Number1",
                      "Type": "int",
                      "Modifiers": [
                        "public"
                      ],
                      "Attributes": [],
                      "IsAutoProperty": false,
                      "Initializer": false,
                      "InitializerValue": null,
                      "Accessor": [
                        {
                          "AccessorType": "get",
                          "HasBody": false,
                          "HasExpressionBody": true,
                          "IsEmpty": false,
                          "Modifiers": [],
                          "Attributes": [],
                          "ReturnType": null,
                          "Parameters": [],
                          "Invocations": [],
                          "Variables": [],
                          "Statements": [],
                          "WhileBlocks": [],
                          "ForEachBlocks": [],
                          "ForBlocks": [],
                          "IfBlocks": [],
                          "SwitchBlocks": [],
                          "Returns": [],
                          "TryBlocks": [],
                          "ExpressionBody": {
                            "Tokens": [
                              "throw",
                              "new",
                              "System.NotImplementedException"
                            ],
                            "Properties": [],
                            "Fields": [],
                            "Invocations": [],
                            "Type": null,
                            "Statement": "throw new System.NotImplementedException()",
                            "ExpressionType": "ThrowExpression",
                            "Kind": "Literal"
                          },
                          "Line": 27
                        },
                        {
                          "AccessorType": "set",
                          "HasBody": false,
                          "HasExpressionBody": true,
                          "IsEmpty": false,
                          "Modifiers": [],
                          "Attributes": [],
                          "ReturnType": null,
                          "Parameters": [],
                          "Invocations": [],
                          "Variables": [],
                          "Statements": [],
                          "WhileBlocks": [],
                          "ForEachBlocks": [],
                          "ForBlocks": [],
                          "IfBlocks": [],
                          "SwitchBlocks": [],
                          "Returns": [],
                          "TryBlocks": [],
                          "ExpressionBody": {
                            "Tokens": [
                              "throw",
                              "new",
                              "System.NotImplementedException"
                            ],
                            "Properties": [],
                            "Fields": [],
                            "Invocations": [],
                            "Type": null,
                            "Statement": "throw new System.NotImplementedException()",
                            "ExpressionType": "ThrowExpression",
                            "Kind": "Literal"
                          },
                          "Line": 27
                        }
                      ],
                      "HasExpressionBody": false,
                      "ExpressionBody": null,
                      "Line": 27
                    },
                    {
                      "Name": "Number2",
                      "Type": "int",
                      "Modifiers": [
                        "public"
                      ],
                      "Attributes": [],
                      "IsAutoProperty": false,
                      "Initializer": false,
                      "InitializerValue": null,
                      "Accessor": [
                        {
                          "AccessorType": "get",
                          "HasBody": false,
                          "HasExpressionBody": true,
                          "IsEmpty": false,
                          "Modifiers": [],
                          "Attributes": [],
                          "ReturnType": null,
                          "Parameters": [],
                          "Invocations": [],
                          "Variables": [],
                          "Statements": [],
                          "WhileBlocks": [],
                          "ForEachBlocks": [],
                          "ForBlocks": [],
                          "IfBlocks": [],
                          "SwitchBlocks": [],
                          "Returns": [],
                          "TryBlocks": [],
                          "ExpressionBody": {
                            "Tokens": [
                              "throw",
                              "new",
                              "System.NotImplementedException"
                            ],
                            "Properties": [],
                            "Fields": [],
                            "Invocations": [],
                            "Type": null,
                            "Statement": "throw new System.NotImplementedException()",
                            "ExpressionType": "ThrowExpression",
                            "Kind": "Literal"
                          },
                          "Line": 28
                        },
                        {
                          "AccessorType": "set",
                          "HasBody": false,
                          "HasExpressionBody": true,
                          "IsEmpty": false,
                          "Modifiers": [],
                          "Attributes": [],
                          "ReturnType": null,
                          "Parameters": [],
                          "Invocations": [],
                          "Variables": [],
                          "Statements": [],
                          "WhileBlocks": [],
                          "ForEachBlocks": [],
                          "ForBlocks": [],
                          "IfBlocks": [],
                          "SwitchBlocks": [],
                          "Returns": [],
                          "TryBlocks": [],
                          "ExpressionBody": {
                            "Tokens": [
                              "throw",
                              "new",
                              "System.NotImplementedException"
                            ],
                            "Properties": [],
                            "Fields": [],
                            "Invocations": [],
                            "Type": null,
                            "Statement": "throw new System.NotImplementedException()",
                            "ExpressionType": "ThrowExpression",
                            "Kind": "Literal"
                          },
                          "Line": 28
                        }
                      ],
                      "HasExpressionBody": false,
                      "ExpressionBody": null,
                      "Line": 28
                    }
                  ],
                  "Methods": [
                    {
                      "HasBody": true,
                      "HasExpressionBody": false,
                      "Name": "Print",
                      "IsEmpty": false,
                      "FullName": "MyGame.Cube.CuboPiccolo.Print()",
                      "Modifiers": [
                        "public"
                      ],
                      "Attributes": [],
                      "ReturnType": "void",
                      "Parameters": [],
                      "Invocations": [],
                      "Variables": [],
                      "Statements": [],
                      "WhileBlocks": [],
                      "ForEachBlocks": [],
                      "ForBlocks": [],
                      "IfBlocks": [],
                      "SwitchBlocks": [],
                      "Returns": [],
                      "TryBlocks": [],
                      "ExpressionBody": null,
                      "Line": 30
                    },
                    {
                      "HasBody": true,
                      "HasExpressionBody": false,
                      "Name": "PrintError",
                      "IsEmpty": false,
                      "FullName": "MyGame.Cube.CuboPiccolo.PrintError()",
                      "Modifiers": [
                        "public"
                      ],
                      "Attributes": [],
                      "ReturnType": "void",
                      "Parameters": [],
                      "Invocations": [],
                      "Variables": [],
                      "Statements": [],
                      "WhileBlocks": [],
                      "ForEachBlocks": [],
                      "ForBlocks": [],
                      "IfBlocks": [],
                      "SwitchBlocks": [],
                      "Returns": [],
                      "TryBlocks": [],
                      "ExpressionBody": null,
                      "Line": 35
                    }
                  ],
                  "Fields": [
                    {
                      "Name": "anim",
                      "Type": "Animation",
                      "Modifiers": [
                        "private"
                      ],
                      "Assignment": null,
                      "Attributes": [
                        "SerializeField",
                        "HideInInspector"
                      ],
                      "FullName": "MyGame.Cube.CuboPiccolo.anim",
                      "Line": 23
                    }
                  ],
                  "Constructors": [],
                  "Attributes": [],
                  "Line": 21
                }
              ],
              "Usings": [],
              "Line": 9
            }
          ],
          "Classes": [
            {
              "Name": "CubeManager",
              "FullName": "MyGame.CubeManager",
              "FullInheritanceName": "UnityEngine.MonoBehaviour",
              "InnerClasses": [],
              "ClassConstraints": [],
              "Modifiers": [
                "public"
              ],
              "Inheritance": "UnityEngine.MonoBehaviour",
              "Interfaces": [],
              "Properties": [],
              "Methods": [
                {
                  "HasBody": true,
                  "HasExpressionBody": false,
                  "Name": "Start",
                  "IsEmpty": false,
                  "FullName": "MyGame.CubeManager.Start()",
                  "Modifiers": [],
                  "Attributes": [],
                  "ReturnType": "void",
                  "Parameters": [],
                  "Invocations": [],
                  "Variables": [
                    {
                      "Variable": {
                        "Name": "x",
                        "Type": "int",
                        "Assignment": "0",
                        "Kind": "Definition",
                        "DefinitionLine": 46
                      }
                    },
                    {
                      "Variable": {
                        "Name": "cube",
                        "Type": "MyGame.Cube.CubeHolder",
                        "Assignment": "new CubeHolder(x)",
                        "Kind": "Assignment",
                        "AssignmentLine": 47,
                        "VariableKind": "Field",
                        "FullName": "MyGame.CubeManager.cube",
                        "AssignmentKind": "SimpleAssignmentExpression"
                      }
                    },
                    {
                      "Variable": {
                        "Name": "new CubeHolder(x)",
                        "Type": "MyGame.Cube.CubeHolder",
                        "Kind": "Use",
                        "UseLine": 47,
                        "UseKind": "ObjectCreation",
                        "AssignedTo": "cube",
                        "Value": null,
                        "Operation": "SimpleAssignmentExpression",
                        "VariablesList": []
                      }
                    }
                  ],
                  "Statements": [],
                  "WhileBlocks": [],
                  "ForEachBlocks": [],
                  "ForBlocks": [],
                  "IfBlocks": [],
                  "SwitchBlocks": [],
                  "Returns": [],
                  "TryBlocks": [],
                  "ExpressionBody": null,
                  "Line": 45
                },
                {
                  "HasBody": true,
                  "HasExpressionBody": false,
                  "Name": "Update",
                  "IsEmpty": false,
                  "FullName": "MyGame.CubeManager.Update()",
                  "Modifiers": [],
                  "Attributes": [],
                  "ReturnType": "void",
                  "Parameters": [],
                  "Invocations": [
                    {
                      "Name": "Instantiate",
                      "FullName": "UnityEngine.Object.Instantiate<UnityEngine.GameObject>(UnityEngine.GameObject)",
                      "ReturnType": "GameObject",
                      "FileName": null,
                      "DefinitionLine": 1,
                      "Kind": "MetadataFile",
                      "Module": "UnityEngine.CoreModule.dll",
                      "ReferenceFound": true,
                      "Arguments": [
                        {
                          "Argument": "cube.Cube",
                          "IsInvocation": false,
                          "IsLiteral": false
                        }
                      ],
                      "Line": 54
                    },
                    {
                      "Name": "SetActive",
                      "FullName": "UnityEngine.GameObject.SetActive(bool)",
                      "ReturnType": "Void",
                      "FileName": null,
                      "DefinitionLine": 1,
                      "Kind": "MetadataFile",
                      "Module": "UnityEngine.CoreModule.dll",
                      "ReferenceFound": true,
                      "Arguments": [
                        {
                          "Argument": "true",
                          "IsInvocation": false,
                          "IsLiteral": false
                        }
                      ],
                      "Line": 55
                    },
                    {
                      "Name": "Smellami",
                      "FullName": "MyGame.CubeManager.Smellami()",
                      "ReturnType": "Void",
                      "FileName": "D:\\progetti\\UnityCodeSmellAnalyzer\\example\\UnityProjectExample\\Assets\\Script\\CubeManager.cs",
                      "DefinitionLine": 67,
                      "Kind": "SourceFile",
                      "Module": null,
                      "ReferenceFound": true,
                      "Arguments": [],
                      "Line": 56
                    },
                    {
                      "Name": "Test2",
                      "FullName": "Test.Input.TestInput.StateManager.Test2()",
                      "ReturnType": "Void",
                      "FileName": "D:\\progetti\\UnityCodeSmellAnalyzer\\example\\UnityProjectExample\\Assets\\Script\\StateManager.cs",
                      "DefinitionLine": 116,
                      "Kind": "SourceFile",
                      "Module": null,
                      "ReferenceFound": true,
                      "Arguments": [],
                      "Line": 58
                    }
                  ],
                  "Variables": [
                    {
                      "Variable": {
                        "Name": "o",
                        "Type": "GameObject",
                        "Assignment": "Instantiate(cube.Cube)",
                        "Kind": "Definition",
                        "DefinitionLine": 53
                      }
                    },
                    {
                      "Variable": {
                        "Name": "s",
                        "Type": "StateManager",
                        "Assignment": "new StateManager()",
                        "Kind": "Definition",
                        "DefinitionLine": 56
                      }
                    }
                  ],
                  "Statements": [],
                  "WhileBlocks": [],
                  "ForEachBlocks": [],
                  "ForBlocks": [],
                  "IfBlocks": [],
                  "SwitchBlocks": [],
                  "Returns": [],
                  "TryBlocks": [],
                  "ExpressionBody": null,
                  "Line": 52
                },
                {
                  "HasBody": true,
                  "HasExpressionBody": false,
                  "Name": "GenerateCube",
                  "IsEmpty": false,
                  "FullName": "MyGame.CubeManager.GenerateCube()",
                  "Modifiers": [
                    "public"
                  ],
                  "Attributes": [],
                  "ReturnType": "void",
                  "Parameters": [],
                  "Invocations": [
                    {
                      "Name": "Instantiate",
                      "FullName": "UnityEngine.Object.Instantiate<UnityEngine.GameObject>(UnityEngine.GameObject)",
                      "ReturnType": "GameObject",
                      "FileName": null,
                      "DefinitionLine": 1,
                      "Kind": "MetadataFile",
                      "Module": "UnityEngine.CoreModule.dll",
                      "ReferenceFound": true,
                      "Arguments": [
                        {
                          "Argument": "cube.Cube",
                          "IsInvocation": false,
                          "IsLiteral": false
                        }
                      ],
                      "Line": 63
                    },
                    {
                      "Name": "FindObjectOfType",
                      "FullName": "UnityEngine.Object.FindObjectOfType<UnityEngine.GameObject>()",
                      "ReturnType": "GameObject",
                      "FileName": null,
                      "DefinitionLine": 1,
                      "Kind": "MetadataFile",
                      "Module": "UnityEngine.CoreModule.dll",
                      "ReferenceFound": true,
                      "Arguments": [],
                      "Line": 64
                    }
                  ],
                  "Variables": [
                    {
                      "Variable": {
                        "Name": "o",
                        "Type": "GameObject",
                        "Assignment": "Instantiate(cube.Cube)",
                        "Kind": "Definition",
                        "DefinitionLine": 62
                      }
                    },
                    {
                      "Variable": {
                        "Name": "z",
                        "Type": "GameObject",
                        "Assignment": "FindObjectOfType<GameObject>()",
                        "Kind": "Definition",
                        "DefinitionLine": 63
                      }
                    },
                    {
                      "Variable": {
                        "Name": "x",
                        "Type": "float",
                        "Assignment": "Time.time",
                        "Kind": "Definition",
                        "DefinitionLine": 64
                      }
                    }
                  ],
                  "Statements": [],
                  "WhileBlocks": [],
                  "ForEachBlocks": [],
                  "ForBlocks": [],
                  "IfBlocks": [],
                  "SwitchBlocks": [],
                  "Returns": [],
                  "TryBlocks": [],
                  "ExpressionBody": null,
                  "Line": 61
                },
                {
                  "HasBody": true,
                  "HasExpressionBody": false,
                  "Name": "Smellami",
                  "IsEmpty": false,
                  "FullName": "MyGame.CubeManager.Smellami()",
                  "Modifiers": [
                    "public"
                  ],
                  "Attributes": [],
                  "ReturnType": "void",
                  "Parameters": [],
                  "Invocations": [
                    {
                      "Name": "Test2",
                      "FullName": "Test.Input.TestInput.StateManager.Test2()",
                      "ReturnType": "Void",
                      "FileName": "D:\\progetti\\UnityCodeSmellAnalyzer\\example\\UnityProjectExample\\Assets\\Script\\StateManager.cs",
                      "DefinitionLine": 116,
                      "Kind": "SourceFile",
                      "Module": null,
                      "ReferenceFound": true,
                      "Arguments": [],
                      "Line": 70
                    }
                  ],
                  "Variables": [
                    {
                      "Variable": {
                        "Name": "s",
                        "Type": "StateManager",
                        "Assignment": "new StateManager()",
                        "Kind": "Definition",
                        "DefinitionLine": 68
                      }
                    }
                  ],
                  "Statements": [],
                  "WhileBlocks": [],
                  "ForEachBlocks": [],
                  "ForBlocks": [],
                  "IfBlocks": [],
                  "SwitchBlocks": [],
                  "Returns": [],
                  "TryBlocks": [],
                  "ExpressionBody": null,
                  "Line": 67
                }
              ],
              "Fields": [
                {
                  "Name": "cube",
                  "Type": "CubeHolder",
                  "Modifiers": [
                    "protected"
                  ],
                  "Assignment": null,
                  "Attributes": [],
                  "FullName": "MyGame.CubeManager.cube",
                  "Line": 43
                }
              ],
              "Constructors": [],
              "Attributes": [],
              "Line": 41
            }
          ],
          "Usings": [],
          "Line": 7
        }
      ],
      "Classes": [],
      "Usings": [
        {
          "Name": "MyGame.Cube",
          "Line": 1
        },
        {
          "Name": "System.Collections",
          "Line": 2
        },
        {
          "Name": "System.Collections.Generic",
          "Line": 3
        },
        {
          "Name": "Test.Input.TestInput",
          "Line": 4
        },
        {
          "Name": "UnityEngine",
          "Line": 5
        }
      ],
      "Line": 1
    },
    {
      "Name": "Inputs",
      "FileName": "D:\\progetti\\UnityCodeSmellAnalyzer\\example\\UnityProjectExample\\Assets\\Script\\Inputs.cs",
      "Language": "C#",
      "Interfaces": [],
      "Namespaces": [
        {
          "Attributes": [],
          "Name": "a",
          "Interfaces": [],
          "Namespaces": [],
          "Classes": [
            {
              "Name": "Inputs",
              "FullName": "a.Inputs",
              "FullInheritanceName": "UnityEngine.MeshCollider",
              "InnerClasses": [],
              "ClassConstraints": [],
              "Modifiers": [
                "public"
              ],
              "Inheritance": "UnityEngine.MeshCollider",
              "Interfaces": [
                "InterfacesTest"
              ],
              "Properties": [
                {
                  "Name": "Number",
                  "Type": "int",
                  "Modifiers": [
                    "public"
                  ],
                  "Attributes": [],
                  "IsAutoProperty": false,
                  "Initializer": false,
                  "InitializerValue": null,
                  "Accessor": [
                    {
                      "AccessorType": "get",
                      "HasBody": false,
                      "HasExpressionBody": true,
                      "IsEmpty": false,
                      "Modifiers": [],
                      "Attributes": [],
                      "ReturnType": null,
                      "Parameters": [],
                      "Invocations": [],
                      "Variables": [],
                      "Statements": [],
                      "WhileBlocks": [],
                      "ForEachBlocks": [],
                      "ForBlocks": [],
                      "IfBlocks": [],
                      "SwitchBlocks": [],
                      "Returns": [],
                      "TryBlocks": [],
                      "ExpressionBody": {
                        "Tokens": [
                          "throw",
                          "new",
                          "NotImplementedException"
                        ],
                        "Properties": [],
                        "Fields": [],
                        "Invocations": [],
                        "Type": null,
                        "Statement": "throw new NotImplementedException()",
                        "ExpressionType": "ThrowExpression",
                        "Kind": "Literal"
                      },
                      "Line": 21
                    },
                    {
                      "AccessorType": "set",
                      "HasBody": false,
                      "HasExpressionBody": true,
                      "IsEmpty": false,
                      "Modifiers": [],
                      "Attributes": [],
                      "ReturnType": null,
                      "Parameters": [],
                      "Invocations": [],
                      "Variables": [],
                      "Statements": [],
                      "WhileBlocks": [],
                      "ForEachBlocks": [],
                      "ForBlocks": [],
                      "IfBlocks": [],
                      "SwitchBlocks": [],
                      "Returns": [],
                      "TryBlocks": [],
                      "ExpressionBody": {
                        "Tokens": [
                          "throw",
                          "new",
                          "NotImplementedException"
                        ],
                        "Properties": [],
                        "Fields": [],
                        "Invocations": [],
                        "Type": null,
                        "Statement": "throw new NotImplementedException()",
                        "ExpressionType": "ThrowExpression",
                        "Kind": "Literal"
                      },
                      "Line": 21
                    }
                  ],
                  "HasExpressionBody": false,
                  "ExpressionBody": null,
                  "Line": 21
                },
                {
                  "Name": "Number1",
                  "Type": "int",
                  "Modifiers": [
                    "public"
                  ],
                  "Attributes": [],
                  "IsAutoProperty": false,
                  "Initializer": false,
                  "InitializerValue": null,
                  "Accessor": [
                    {
                      "AccessorType": "get",
                      "HasBody": false,
                      "HasExpressionBody": true,
                      "IsEmpty": false,
                      "Modifiers": [],
                      "Attributes": [],
                      "ReturnType": null,
                      "Parameters": [],
                      "Invocations": [],
                      "Variables": [],
                      "Statements": [],
                      "WhileBlocks": [],
                      "ForEachBlocks": [],
                      "ForBlocks": [],
                      "IfBlocks": [],
                      "SwitchBlocks": [],
                      "Returns": [],
                      "TryBlocks": [],
                      "ExpressionBody": {
                        "Tokens": [
                          "throw",
                          "new",
                          "NotImplementedException"
                        ],
                        "Properties": [],
                        "Fields": [],
                        "Invocations": [],
                        "Type": null,
                        "Statement": "throw new NotImplementedException()",
                        "ExpressionType": "ThrowExpression",
                        "Kind": "Literal"
                      },
                      "Line": 22
                    },
                    {
                      "AccessorType": "set",
                      "HasBody": false,
                      "HasExpressionBody": true,
                      "IsEmpty": false,
                      "Modifiers": [],
                      "Attributes": [],
                      "ReturnType": null,
                      "Parameters": [],
                      "Invocations": [],
                      "Variables": [],
                      "Statements": [],
                      "WhileBlocks": [],
                      "ForEachBlocks": [],
                      "ForBlocks": [],
                      "IfBlocks": [],
                      "SwitchBlocks": [],
                      "Returns": [],
                      "TryBlocks": [],
                      "ExpressionBody": {
                        "Tokens": [
                          "throw",
                          "new",
                          "NotImplementedException"
                        ],
                        "Properties": [],
                        "Fields": [],
                        "Invocations": [],
                        "Type": null,
                        "Statement": "throw new NotImplementedException()",
                        "ExpressionType": "ThrowExpression",
                        "Kind": "Literal"
                      },
                      "Line": 22
                    }
                  ],
                  "HasExpressionBody": false,
                  "ExpressionBody": null,
                  "Line": 22
                },
                {
                  "Name": "Number2",
                  "Type": "int",
                  "Modifiers": [
                    "public"
                  ],
                  "Attributes": [],
                  "IsAutoProperty": false,
                  "Initializer": false,
                  "InitializerValue": null,
                  "Accessor": [
                    {
                      "AccessorType": "get",
                      "HasBody": false,
                      "HasExpressionBody": true,
                      "IsEmpty": false,
                      "Modifiers": [],
                      "Attributes": [],
                      "ReturnType": null,
                      "Parameters": [],
                      "Invocations": [],
                      "Variables": [],
                      "Statements": [],
                      "WhileBlocks": [],
                      "ForEachBlocks": [],
                      "ForBlocks": [],
                      "IfBlocks": [],
                      "SwitchBlocks": [],
                      "Returns": [],
                      "TryBlocks": [],
                      "ExpressionBody": {
                        "Tokens": [
                          "throw",
                          "new",
                          "NotImplementedException"
                        ],
                        "Properties": [],
                        "Fields": [],
                        "Invocations": [],
                        "Type": null,
                        "Statement": "throw new NotImplementedException()",
                        "ExpressionType": "ThrowExpression",
                        "Kind": "Literal"
                      },
                      "Line": 23
                    },
                    {
                      "AccessorType": "set",
                      "HasBody": false,
                      "HasExpressionBody": true,
                      "IsEmpty": false,
                      "Modifiers": [],
                      "Attributes": [],
                      "ReturnType": null,
                      "Parameters": [],
                      "Invocations": [],
                      "Variables": [],
                      "Statements": [],
                      "WhileBlocks": [],
                      "ForEachBlocks": [],
                      "ForBlocks": [],
                      "IfBlocks": [],
                      "SwitchBlocks": [],
                      "Returns": [],
                      "TryBlocks": [],
                      "ExpressionBody": {
                        "Tokens": [
                          "throw",
                          "new",
                          "NotImplementedException"
                        ],
                        "Properties": [],
                        "Fields": [],
                        "Invocations": [],
                        "Type": null,
                        "Statement": "throw new NotImplementedException()",
                        "ExpressionType": "ThrowExpression",
                        "Kind": "Literal"
                      },
                      "Line": 23
                    }
                  ],
                  "HasExpressionBody": false,
                  "ExpressionBody": null,
                  "Line": 23
                }
              ],
              "Methods": [
                {
                  "HasBody": false,
                  "HasExpressionBody": false,
                  "Name": "Print",
                  "IsEmpty": true,
                  "FullName": "a.Inputs.Print()",
                  "Modifiers": [
                    "public"
                  ],
                  "Attributes": [],
                  "ReturnType": "void",
                  "Parameters": [],
                  "Invocations": [],
                  "Variables": [],
                  "Statements": [],
                  "WhileBlocks": [],
                  "ForEachBlocks": [],
                  "ForBlocks": [],
                  "IfBlocks": [],
                  "SwitchBlocks": [],
                  "Returns": [],
                  "TryBlocks": [],
                  "ExpressionBody": null,
                  "Line": 25
                },
                {
                  "HasBody": true,
                  "HasExpressionBody": false,
                  "Name": "Print",
                  "IsEmpty": false,
                  "FullName": "a.Inputs.Print(Sphere.SpehereManager)",
                  "Modifiers": [
                    "public"
                  ],
                  "Attributes": [],
                  "ReturnType": "void",
                  "Parameters": [
                    {
                      "Name": "s",
                      "Type": "SpehereManager",
                      "Assignment": null,
                      "Attributes": []
                    }
                  ],
                  "Invocations": [
                    {
                      "Name": "GetComponent",
                      "FullName": "UnityEngine.Component.GetComponent<UnityEngine.MeshCollider>()",
                      "ReturnType": "MeshCollider",
                      "FileName": null,
                      "DefinitionLine": 1,
                      "Kind": "MetadataFile",
                      "Module": "UnityEngine.CoreModule.dll",
                      "ReferenceFound": true,
                      "Arguments": [],
                      "Line": 37
                    }
                  ],
                  "Variables": [
                    {
                      "Variable": {
                        "Name": "list",
                        "Type": "List<string>",
                        "Assignment": "new List<string> { \"hello\", \"smell\", \"computer\" }",
                        "Kind": "Definition",
                        "DefinitionLine": 28
                      }
                    },
                    {
                      "Variable": {
                        "Name": "m",
                        "Type": "MeshCollider",
                        "Assignment": "new MeshCollider()",
                        "Kind": "Definition",
                        "DefinitionLine": 35
                      }
                    },
                    {
                      "Variable": {
                        "Name": "m",
                        "Type": "UnityEngine.MeshCollider",
                        "Assignment": "GetComponent<MeshCollider>()",
                        "Kind": "Assignment",
                        "AssignmentLine": 36,
                        "VariableKind": "Local",
                        "FullName": "m",
                        "AssignmentKind": "SimpleAssignmentExpression"
                      }
                    },
                    {
                      "Variable": {
                        "Name": "r.velocity",
                        "Type": "UnityEngine.Vector3",
                        "Assignment": "new Vector3(0, 0, 0)",
                        "Kind": "Assignment",
                        "AssignmentLine": 37,
                        "VariableKind": "Property",
                        "FullName": "UnityEngine.Rigidbody.velocity",
                        "AssignmentKind": "SimpleAssignmentExpression"
                      }
                    },
                    {
                      "Variable": {
                        "Name": "r.angularVelocity",
                        "Type": "UnityEngine.Vector3",
                        "Assignment": "new Vector3(0, 0, 0)",
                        "Kind": "Assignment",
                        "AssignmentLine": 38,
                        "VariableKind": "Property",
                        "FullName": "UnityEngine.Rigidbody.angularVelocity",
                        "AssignmentKind": "SimpleAssignmentExpression"
                      }
                    },
                    {
                      "Variable": {
                        "Name": "GetComponent<MeshCollider>()",
                        "Type": "UnityEngine.MeshCollider",
                        "Kind": "Use",
                        "UseLine": 36,
                        "UseKind": "Invocation",
                        "AssignedTo": "m",
                        "Value": null,
                        "Operation": "SimpleAssignmentExpression",
                        "VariablesList": []
                      }
                    },
                    {
                      "Variable": {
                        "Name": "new Vector3(0, 0, 0)",
                        "Type": "UnityEngine.Vector3",
                        "Kind": "Use",
                        "UseLine": 37,
                        "UseKind": "ObjectCreation",
                        "AssignedTo": "r.velocity",
                        "Value": null,
                        "Operation": "SimpleAssignmentExpression",
                        "VariablesList": []
                      }
                    },
                    {
                      "Variable": {
                        "Name": "new Vector3(0, 0, 0)",
                        "Type": "UnityEngine.Vector3",
                        "Kind": "Use",
                        "UseLine": 38,
                        "UseKind": "ObjectCreation",
                        "AssignedTo": "r.angularVelocity",
                        "Value": null,
                        "Operation": "SimpleAssignmentExpression",
                        "VariablesList": []
                      }
                    }
                  ],
                  "Statements": [],
                  "WhileBlocks": [],
                  "ForEachBlocks": [
                    {
                      "Iterator": "s1",
                      "IteratorType": "string",
                      "Iterable": "list",
                      "IterableType": "System.Collections.Generic.List<string>",
                      "Invocation": null,
                      "Property": null,
                      "ExpressionIsInvocation": false,
                      "ExpressionIsProperty": false,
                      "Depth": 1,
                      "EndLine": 30,
                      "StartLine": 30,
                      "Invocations": [
                        {
                          "Name": "WriteLine",
                          "FullName": "System.Console.WriteLine(bool)",
                          "ReturnType": "Void",
                          "FileName": null,
                          "DefinitionLine": 1,
                          "Kind": "MetadataFile",
                          "Module": "CommonLanguageRuntimeLibrary",
                          "ReferenceFound": true,
                          "Arguments": [
                            {
                              "Argument": "s",
                              "IsInvocation": false,
                              "IsLiteral": false
                            }
                          ],
                          "Line": 30
                        }
                      ],
                      "Variables": [],
                      "WhileBlocks": [],
                      "ForBlocks": [],
                      "IfBlocks": [],
                      "SwitchBlocks": [],
                      "ForEachBlocks": [],
                      "ElseBlocks": [],
                      "TryBlocks": [],
                      "Returns": []
                    }
                  ],
                  "ForBlocks": [
                    {
                      "Condition": {
                        "Tokens": [
                          "i",
                          "list.Count"
                        ],
                        "Properties": [
                          "System.Collections.Generic.List<string>.Count"
                        ],
                        "Fields": [],
                        "Invocations": [],
                        "Type": "bool",
                        "Statement": "i < list.Count",
                        "ExpressionType": "LessThanExpression",
                        "Kind": "Method"
                      },
                      "Declarations": [
                        "i"
                      ],
                      "Initializers": [],
                      "Incrementors": [
                        "i++"
                      ],
                      "Depth": 1,
                      "EndLine": 35,
                      "StartLine": 31,
                      "Invocations": [
                        {
                          "Name": "Split",
                          "FullName": "string.Split(params char[])",
                          "ReturnType": "",
                          "FileName": null,
                          "DefinitionLine": 1,
                          "Kind": "MetadataFile",
                          "Module": "CommonLanguageRuntimeLibrary",
                          "ReferenceFound": true,
                          "Arguments": [
                            {
                              "Argument": "'i'",
                              "IsInvocation": false,
                              "IsLiteral": false
                            }
                          ],
                          "Line": 34
                        }
                      ],
                      "Variables": [
                        {
                          "Variable": {
                            "Name": "i",
                            "Type": "int",
                            "Assignment": "0",
                            "Kind": "Definition",
                            "DefinitionLine": 30
                          }
                        },
                        {
                          "Variable": {
                            "Name": "list[i]",
                            "Type": "string",
                            "Assignment": "\"we\"",
                            "Kind": "Assignment",
                            "AssignmentLine": 32,
                            "VariableKind": "Property",
                            "FullName": "System.Collections.Generic.List<string>.this[int]",
                            "AssignmentKind": "AddAssignmentExpression"
                          }
                        },
                        {
                          "Variable": {
                            "Name": null,
                            "Type": "string",
                            "Kind": "Use",
                            "UseLine": 32,
                            "UseKind": "Literal",
                            "AssignedTo": "list[i]",
                            "Value": "\"we\"",
                            "Operation": "AddAssignmentExpression",
                            "VariablesList": []
                          }
                        }
                      ],
                      "WhileBlocks": [],
                      "ForBlocks": [],
                      "IfBlocks": [],
                      "SwitchBlocks": [],
                      "ForEachBlocks": [],
                      "ElseBlocks": [],
                      "TryBlocks": [],
                      "Returns": []
                    }
                  ],
                  "IfBlocks": [],
                  "SwitchBlocks": [],
                  "Returns": [],
                  "TryBlocks": [],
                  "ExpressionBody": null,
                  "Line": 27
                },
                {
                  "HasBody": true,
                  "HasExpressionBody": false,
                  "Name": "PrintError",
                  "IsEmpty": false,
                  "FullName": "a.Inputs.PrintError()",
                  "Modifiers": [
                    "public"
                  ],
                  "Attributes": [],
                  "ReturnType": "void",
                  "Parameters": [],
                  "Invocations": [],
                  "Variables": [],
                  "Statements": [],
                  "WhileBlocks": [],
                  "ForEachBlocks": [],
                  "ForBlocks": [],
                  "IfBlocks": [],
                  "SwitchBlocks": [],
                  "Returns": [],
                  "TryBlocks": [],
                  "ExpressionBody": null,
                  "Line": 42
                },
                {
                  "HasBody": true,
                  "HasExpressionBody": false,
                  "Name": "Start",
                  "IsEmpty": false,
                  "FullName": "a.Inputs.Start()",
                  "Modifiers": [],
                  "Attributes": [],
                  "ReturnType": "void",
                  "Parameters": [],
                  "Invocations": [
                    {
                      "Name": "PlayQueued",
                      "FullName": "UnityEngine.Animation.PlayQueued(string)",
                      "ReturnType": "AnimationState",
                      "FileName": null,
                      "DefinitionLine": 1,
                      "Kind": "MetadataFile",
                      "Module": "UnityEngine.AnimationModule.dll",
                      "ReferenceFound": true,
                      "Arguments": [
                        {
                          "Argument": "\"Jump\"",
                          "IsInvocation": false,
                          "IsLiteral": false
                        }
                      ],
                      "Line": 50
                    }
                  ],
                  "Variables": [],
                  "Statements": [],
                  "WhileBlocks": [],
                  "ForEachBlocks": [],
                  "ForBlocks": [],
                  "IfBlocks": [],
                  "SwitchBlocks": [],
                  "Returns": [],
                  "TryBlocks": [],
                  "ExpressionBody": null,
                  "Line": 48
                },
                {
                  "HasBody": true,
                  "HasExpressionBody": false,
                  "Name": "Update",
                  "IsEmpty": false,
                  "FullName": "a.Inputs.Update()",
                  "Modifiers": [],
                  "Attributes": [],
                  "ReturnType": "void",
                  "Parameters": [],
                  "Invocations": [
                    {
                      "Name": "Instantiate",
                      "FullName": "UnityEngine.Object.Instantiate<UnityEngine.GameObject>(UnityEngine.GameObject)",
                      "ReturnType": "GameObject",
                      "FileName": null,
                      "DefinitionLine": 1,
                      "Kind": "MetadataFile",
                      "Module": "UnityEngine.CoreModule.dll",
                      "ReferenceFound": true,
                      "Arguments": [
                        {
                          "Argument": "o",
                          "IsInvocation": false,
                          "IsLiteral": false
                        }
                      ],
                      "Line": 56
                    },
                    {
                      "Name": "Destroy",
                      "FullName": "UnityEngine.Object.Destroy(UnityEngine.Object)",
                      "ReturnType": "Void",
                      "FileName": null,
                      "DefinitionLine": 1,
                      "Kind": "MetadataFile",
                      "Module": "UnityEngine.CoreModule.dll",
                      "ReferenceFound": true,
                      "Arguments": [
                        {
                          "Argument": "o",
                          "IsInvocation": false,
                          "IsLiteral": false
                        }
                      ],
                      "Line": 58
                    },
                    {
                      "Name": "Find",
                      "FullName": "UnityEngine.GameObject.Find(string)",
                      "ReturnType": "GameObject",
                      "FileName": null,
                      "DefinitionLine": 1,
                      "Kind": "MetadataFile",
                      "Module": "UnityEngine.CoreModule.dll",
                      "ReferenceFound": true,
                      "Arguments": [
                        {
                          "Argument": "\"Player\"",
                          "IsInvocation": false,
                          "IsLiteral": false
                        }
                      ],
                      "Line": 59
                    }
                  ],
                  "Variables": [
                    {
                      "Variable": {
                        "Name": "o",
                        "Type": "UnityEngine.GameObject",
                        "Assignment": "Instantiate(o)",
                        "Kind": "Assignment",
                        "AssignmentLine": 55,
                        "VariableKind": "Field",
                        "FullName": "a.Inputs.o",
                        "AssignmentKind": "SimpleAssignmentExpression"
                      }
                    },
                    {
                      "Variable": {
                        "Name": "o.transform.position",
                        "Type": "UnityEngine.Vector3",
                        "Assignment": "o.transform.position + new Vector3(10, 10, 10)",
                        "Kind": "Assignment",
                        "AssignmentLine": 56,
                        "VariableKind": "Property",
                        "FullName": "UnityEngine.Transform.position",
                        "AssignmentKind": "SimpleAssignmentExpression"
                      }
                    },
                    {
                      "Variable": {
                        "Name": "o",
                        "Type": "UnityEngine.GameObject",
                        "Assignment": "GameObject.Find(\"Player\")",
                        "Kind": "Assignment",
                        "AssignmentLine": 58,
                        "VariableKind": "Field",
                        "FullName": "a.Inputs.o",
                        "AssignmentKind": "SimpleAssignmentExpression"
                      }
                    },
                    {
                      "Variable": {
                        "Name": "Instantiate(o)",
                        "Type": "UnityEngine.GameObject",
                        "Kind": "Use",
                        "UseLine": 55,
                        "UseKind": "Invocation",
                        "AssignedTo": "o",
                        "Value": null,
                        "Operation": "SimpleAssignmentExpression",
                        "VariablesList": []
                      }
                    },
                    {
                      "Variable": {
                        "Name": "o.transform.position + new Vector3(10, 10, 10)",
                        "Type": "UnityEngine.Vector3",
                        "Kind": "Use",
                        "UseLine": 56,
                        "UseKind": "BinaryOperator",
                        "AssignedTo": "o.transform.position",
                        "Value": null,
                        "Operation": "SimpleAssignmentExpression",
                        "VariablesList": [
                          {
                            "Name": "o.transform.position",
                            "Type": "UnityEngine.Vector3",
                            "Kind": "Use",
                            "UseLine": 56,
                            "UseKind": "PropertyReference",
                            "AssignedTo": "o.transform.position",
                            "Value": null,
                            "Operation": "SimpleMemberAccessExpression",
                            "VariablesList": []
                          },
                          {
                            "Name": "new Vector3(10, 10, 10)",
                            "Type": "UnityEngine.Vector3",
                            "Kind": "Use",
                            "UseLine": 56,
                            "UseKind": "ObjectCreation",
                            "AssignedTo": "o.transform.position",
                            "Value": null,
                            "Operation": "ObjectCreationExpression",
                            "VariablesList": []
                          }
                        ]
                      }
                    },
                    {
                      "Variable": {
                        "Name": "GameObject.Find(\"Player\")",
                        "Type": "UnityEngine.GameObject",
                        "Kind": "Use",
                        "UseLine": 58,
                        "UseKind": "Invocation",
                        "AssignedTo": "o",
                        "Value": null,
                        "Operation": "SimpleAssignmentExpression",
                        "VariablesList": []
                      }
                    }
                  ],
                  "Statements": [],
                  "WhileBlocks": [],
                  "ForEachBlocks": [],
                  "ForBlocks": [],
                  "IfBlocks": [],
                  "SwitchBlocks": [],
                  "Returns": [],
                  "TryBlocks": [],
                  "ExpressionBody": null,
                  "Line": 54
                },
                {
                  "HasBody": true,
                  "HasExpressionBody": false,
                  "Name": "FixedUpdate",
                  "IsEmpty": false,
                  "FullName": "a.Inputs.FixedUpdate()",
                  "Modifiers": [
                    "private"
                  ],
                  "Attributes": [],
                  "ReturnType": "void",
                  "Parameters": [],
                  "Invocations": [
                    {
                      "Name": "Smellami",
                      "FullName": "MyGame.CubeManager.Smellami()",
                      "ReturnType": "Void",
                      "FileName": "D:\\progetti\\UnityCodeSmellAnalyzer\\example\\UnityProjectExample\\Assets\\Script\\CubeManager.cs",
                      "DefinitionLine": 67,
                      "Kind": "SourceFile",
                      "Module": null,
                      "ReferenceFound": true,
                      "Arguments": [],
                      "Line": 66
                    }
                  ],
                  "Variables": [
                    {
                      "Variable": {
                        "Name": "s",
                        "Type": "StateManager",
                        "Assignment": "new StateManager()",
                        "Kind": "Definition",
                        "DefinitionLine": 63
                      }
                    },
                    {
                      "Variable": {
                        "Name": "c",
                        "Type": "CubeManager",
                        "Assignment": "new CubeManager()",
                        "Kind": "Definition",
                        "DefinitionLine": 64
                      }
                    }
                  ],
                  "Statements": [],
                  "WhileBlocks": [],
                  "ForEachBlocks": [],
                  "ForBlocks": [],
                  "IfBlocks": [],
                  "SwitchBlocks": [],
                  "Returns": [],
                  "TryBlocks": [],
                  "ExpressionBody": null,
                  "Line": 62
                }
              ],
              "Fields": [
                {
                  "Name": "anim",
                  "Type": "Animation",
                  "Modifiers": [],
                  "Assignment": null,
                  "Attributes": [
                    "SerializeField"
                  ],
                  "FullName": "a.Inputs.anim",
                  "Line": 16
                },
                {
                  "Name": "o",
                  "Type": "GameObject",
                  "Modifiers": [],
                  "Assignment": null,
                  "Attributes": [
                    "SerializeField"
                  ],
                  "FullName": "a.Inputs.o",
                  "Line": 17
                },
                {
                  "Name": "mesh",
                  "Type": "MeshCollider",
                  "Modifiers": [],
                  "Assignment": null,
                  "Attributes": [],
                  "FullName": "a.Inputs.mesh",
                  "Line": 18
                },
                {
                  "Name": "r",
                  "Type": "Rigidbody",
                  "Modifiers": [],
                  "Assignment": "new Rigidbody()",
                  "Attributes": [],
                  "FullName": "a.Inputs.r",
                  "Line": 19
                }
              ],
              "Constructors": [],
              "Attributes": [],
              "Line": 14
            }
          ],
          "Usings": [],
          "Line": 12
        }
      ],
      "Classes": [],
      "Usings": [
        {
          "Name": "MyGame",
          "Line": 1
        },
        {
          "Name": "System",
          "Line": 2
        },
        {
          "Name": "System.Collections",
          "Line": 3
        },
        {
          "Name": "System.Collections.Generic",
          "Line": 4
        },
        {
          "Name": "Test.Input.TestInput",
          "Line": 5
        },
        {
          "Name": "Unity.VisualScripting",
          "Line": 6
        },
        {
          "Name": "UnityEngine",
          "Line": 7
        },
        {
          "Name": "UnityEngine.Animations",
          "Line": 8
        },
        {
          "Name": "a",
          "Line": 9
        },
        {
          "Name": "Sphere",
          "Line": 10
        }
      ],
      "Line": 1
    },
    {
      "Name": "InterfacesTest",
      "FileName": "D:\\progetti\\UnityCodeSmellAnalyzer\\example\\UnityProjectExample\\Assets\\Script\\InterfacesTest.cs",
      "Language": "C#",
      "Interfaces": [
        {
          "Name": "InterfacesTest",
          "FullName": "InterfacesTest",
          "Modifiers": [
            "public"
          ],
          "Methods": [
            {
              "HasBody": false,
              "HasExpressionBody": false,
              "Name": "Print",
              "IsEmpty": true,
              "FullName": "InterfacesTest.Print()",
              "Modifiers": [
                "public"
              ],
              "Attributes": [],
              "ReturnType": "void",
              "Parameters": [],
              "Invocations": [],
              "Variables": [],
              "Statements": [],
              "WhileBlocks": [],
              "ForEachBlocks": [],
              "ForBlocks": [],
              "IfBlocks": [],
              "SwitchBlocks": [],
              "Returns": [],
              "TryBlocks": [],
              "ExpressionBody": null,
              "Line": 11
            },
            {
              "HasBody": false,
              "HasExpressionBody": false,
              "Name": "PrintError",
              "IsEmpty": true,
              "FullName": "InterfacesTest.PrintError()",
              "Modifiers": [
                "public"
              ],
              "Attributes": [],
              "ReturnType": "void",
              "Parameters": [],
              "Invocations": [],
              "Variables": [],
              "Statements": [],
              "WhileBlocks": [],
              "ForEachBlocks": [],
              "ForBlocks": [],
              "IfBlocks": [],
              "SwitchBlocks": [],
              "Returns": [],
              "TryBlocks": [],
              "ExpressionBody": null,
              "Line": 12
            }
          ],
          "Properties": [
            {
              "Name": "Number",
              "Type": "int",
              "Modifiers": [
                "public"
              ],
              "Attributes": [],
              "IsAutoProperty": true,
              "Initializer": false,
              "InitializerValue": null,
              "Accessor": [
                {
                  "AccessorType": "get",
                  "HasBody": false,
                  "HasExpressionBody": false,
                  "IsEmpty": true,
                  "Modifiers": [],
                  "Attributes": [],
                  "ReturnType": null,
                  "Parameters": [],
                  "Invocations": [],
                  "Variables": [],
                  "Statements": [],
                  "WhileBlocks": [],
                  "ForEachBlocks": [],
                  "ForBlocks": [],
                  "IfBlocks": [],
                  "SwitchBlocks": [],
                  "Returns": [],
                  "TryBlocks": [],
                  "ExpressionBody": null,
                  "Line": 7
                },
                {
                  "AccessorType": "set",
                  "HasBody": false,
                  "HasExpressionBody": false,
                  "IsEmpty": true,
                  "Modifiers": [],
                  "Attributes": [],
                  "ReturnType": null,
                  "Parameters": [],
                  "Invocations": [],
                  "Variables": [],
                  "Statements": [],
                  "WhileBlocks": [],
                  "ForEachBlocks": [],
                  "ForBlocks": [],
                  "IfBlocks": [],
                  "SwitchBlocks": [],
                  "Returns": [],
                  "TryBlocks": [],
                  "ExpressionBody": null,
                  "Line": 7
                }
              ],
              "HasExpressionBody": false,
              "ExpressionBody": null,
              "Line": 7
            },
            {
              "Name": "Number1",
              "Type": "int",
              "Modifiers": [
                "public"
              ],
              "Attributes": [],
              "IsAutoProperty": true,
              "Initializer": false,
              "InitializerValue": null,
              "Accessor": [
                {
                  "AccessorType": "get",
                  "HasBody": false,
                  "HasExpressionBody": false,
                  "IsEmpty": true,
                  "Modifiers": [],
                  "Attributes": [],
                  "ReturnType": null,
                  "Parameters": [],
                  "Invocations": [],
                  "Variables": [],
                  "Statements": [],
                  "WhileBlocks": [],
                  "ForEachBlocks": [],
                  "ForBlocks": [],
                  "IfBlocks": [],
                  "SwitchBlocks": [],
                  "Returns": [],
                  "TryBlocks": [],
                  "ExpressionBody": null,
                  "Line": 8
                },
                {
                  "AccessorType": "set",
                  "HasBody": false,
                  "HasExpressionBody": false,
                  "IsEmpty": true,
                  "Modifiers": [],
                  "Attributes": [],
                  "ReturnType": null,
                  "Parameters": [],
                  "Invocations": [],
                  "Variables": [],
                  "Statements": [],
                  "WhileBlocks": [],
                  "ForEachBlocks": [],
                  "ForBlocks": [],
                  "IfBlocks": [],
                  "SwitchBlocks": [],
                  "Returns": [],
                  "TryBlocks": [],
                  "ExpressionBody": null,
                  "Line": 8
                }
              ],
              "HasExpressionBody": false,
              "ExpressionBody": null,
              "Line": 8
            },
            {
              "Name": "Number2",
              "Type": "int",
              "Modifiers": [
                "public"
              ],
              "Attributes": [],
              "IsAutoProperty": true,
              "Initializer": false,
              "InitializerValue": null,
              "Accessor": [
                {
                  "AccessorType": "get",
                  "HasBody": false,
                  "HasExpressionBody": false,
                  "IsEmpty": true,
                  "Modifiers": [],
                  "Attributes": [],
                  "ReturnType": null,
                  "Parameters": [],
                  "Invocations": [],
                  "Variables": [],
                  "Statements": [],
                  "WhileBlocks": [],
                  "ForEachBlocks": [],
                  "ForBlocks": [],
                  "IfBlocks": [],
                  "SwitchBlocks": [],
                  "Returns": [],
                  "TryBlocks": [],
                  "ExpressionBody": null,
                  "Line": 9
                },
                {
                  "AccessorType": "set",
                  "HasBody": false,
                  "HasExpressionBody": false,
                  "IsEmpty": true,
                  "Modifiers": [],
                  "Attributes": [],
                  "ReturnType": null,
                  "Parameters": [],
                  "Invocations": [],
                  "Variables": [],
                  "Statements": [],
                  "WhileBlocks": [],
                  "ForEachBlocks": [],
                  "ForBlocks": [],
                  "IfBlocks": [],
                  "SwitchBlocks": [],
                  "Returns": [],
                  "TryBlocks": [],
                  "ExpressionBody": null,
                  "Line": 9
                }
              ],
              "HasExpressionBody": false,
              "ExpressionBody": null,
              "Line": 9
            }
          ],
          "Attributes": [],
          "Line": 5
        }
      ],
      "Namespaces": [],
      "Classes": [],
      "Usings": [
        {
          "Name": "System.Collections",
          "Line": 1
        },
        {
          "Name": "System.Collections.Generic",
          "Line": 2
        },
        {
          "Name": "UnityEngine",
          "Line": 3
        }
      ],
      "Line": 1
    },
    {
      "Name": "SpehereManager",
      "FileName": "D:\\progetti\\UnityCodeSmellAnalyzer\\example\\UnityProjectExample\\Assets\\Script\\SpehereManager.cs",
      "Language": "C#",
      "Interfaces": [],
      "Namespaces": [
        {
          "Attributes": [],
          "Name": "Sphere",
          "Interfaces": [],
          "Namespaces": [],
          "Classes": [
            {
              "Name": "SpehereManager",
              "FullName": "Sphere.SpehereManager",
              "FullInheritanceName": "a.Inputs",
              "InnerClasses": [],
              "ClassConstraints": [],
              "Modifiers": [
                "public"
              ],
              "Inheritance": "a.Inputs",
              "Interfaces": [],
              "Properties": [],
              "Methods": [
                {
                  "HasBody": true,
                  "HasExpressionBody": false,
                  "Name": "Start",
                  "IsEmpty": false,
                  "FullName": "Sphere.SpehereManager.Start()",
                  "Modifiers": [],
                  "Attributes": [],
                  "ReturnType": "void",
                  "Parameters": [],
                  "Invocations": [
                    {
                      "Name": "FindObjectOfType",
                      "FullName": "UnityEngine.Object.FindObjectOfType<MyGame.CubeManager>()",
                      "ReturnType": "CubeManager",
                      "FileName": null,
                      "DefinitionLine": 1,
                      "Kind": "MetadataFile",
                      "Module": "UnityEngine.CoreModule.dll",
                      "ReferenceFound": true,
                      "Arguments": [],
                      "Line": 20
                    },
                    {
                      "Name": "GetComponent",
                      "FullName": "UnityEngine.Component.GetComponent<UnityEngine.Collider>()",
                      "ReturnType": "Collider",
                      "FileName": null,
                      "DefinitionLine": 1,
                      "Kind": "MetadataFile",
                      "Module": "UnityEngine.CoreModule.dll",
                      "ReferenceFound": true,
                      "Arguments": [],
                      "Line": 21
                    },
                    {
                      "Name": "GetComponent",
                      "FullName": "UnityEngine.Component.GetComponent<UnityEngine.Rigidbody>()",
                      "ReturnType": "Rigidbody",
                      "FileName": null,
                      "DefinitionLine": 1,
                      "Kind": "MetadataFile",
                      "Module": "UnityEngine.CoreModule.dll",
                      "ReferenceFound": true,
                      "Arguments": [],
                      "Line": 22
                    },
                    {
                      "Name": "GetComponent",
                      "FullName": "UnityEngine.Component.GetComponent<Sphere.SpehereManager>()",
                      "ReturnType": "SpehereManager",
                      "FileName": null,
                      "DefinitionLine": 1,
                      "Kind": "MetadataFile",
                      "Module": "UnityEngine.CoreModule.dll",
                      "ReferenceFound": true,
                      "Arguments": [],
                      "Line": 23
                    },
                    {
                      "Name": "GetComponent",
                      "FullName": "UnityEngine.Component.GetComponent<MyGame.CubeManager>()",
                      "ReturnType": "CubeManager",
                      "FileName": null,
                      "DefinitionLine": 1,
                      "Kind": "MetadataFile",
                      "Module": "UnityEngine.CoreModule.dll",
                      "ReferenceFound": true,
                      "Arguments": [],
                      "Line": 24
                    }
                  ],
                  "Variables": [
                    {
                      "Variable": {
                        "Name": "m",
                        "Type": "MeshCollider",
                        "Assignment": "new MeshCollider()",
                        "Kind": "Definition",
                        "DefinitionLine": 24
                      }
                    },
                    {
                      "Variable": {
                        "Name": "cubeManager",
                        "Type": "MyGame.CubeManager",
                        "Assignment": "FindObjectOfType<CubeManager>()",
                        "Kind": "Assignment",
                        "AssignmentLine": 19,
                        "VariableKind": "Field",
                        "FullName": "Sphere.SpehereManager.cubeManager",
                        "AssignmentKind": "SimpleAssignmentExpression"
                      }
                    },
                    {
                      "Variable": {
                        "Name": "FindObjectOfType<CubeManager>()",
                        "Type": "MyGame.CubeManager",
                        "Kind": "Use",
                        "UseLine": 19,
                        "UseKind": "Invocation",
                        "AssignedTo": "cubeManager",
                        "Value": null,
                        "Operation": "SimpleAssignmentExpression",
                        "VariablesList": []
                      }
                    }
                  ],
                  "Statements": [],
                  "WhileBlocks": [],
                  "ForEachBlocks": [],
                  "ForBlocks": [],
                  "IfBlocks": [],
                  "SwitchBlocks": [],
                  "Returns": [],
                  "TryBlocks": [],
                  "ExpressionBody": null,
                  "Line": 18
                },
                {
                  "HasBody": true,
                  "HasExpressionBody": false,
                  "Name": "GetInstance",
                  "IsEmpty": false,
                  "FullName": "Sphere.SpehereManager.GetInstance()",
                  "Modifiers": [
                    "public"
                  ],
                  "Attributes": [],
                  "ReturnType": "SpehereManager",
                  "Parameters": [],
                  "Invocations": [],
                  "Variables": [],
                  "Statements": [],
                  "WhileBlocks": [],
                  "ForEachBlocks": [],
                  "ForBlocks": [],
                  "IfBlocks": [],
                  "SwitchBlocks": [],
                  "Returns": [
                    {
                      "ReturnStatement": {
                        "Tokens": [],
                        "Properties": [],
                        "Fields": [
                          "Sphere.SpehereManager.sphere"
                        ],
                        "Invocations": [],
                        "Type": "Sphere.SpehereManager",
                        "Statement": "sphere",
                        "ExpressionType": "IdentifierName",
                        "Kind": "Field"
                      },
                      "ReturnType": "Sphere.SpehereManager",
                      "Line": 32
                    }
                  ],
                  "TryBlocks": [],
                  "ExpressionBody": null,
                  "Line": 30
                },
                {
                  "HasBody": true,
                  "HasExpressionBody": false,
                  "Name": "FixedUpdate",
                  "IsEmpty": false,
                  "FullName": "Sphere.SpehereManager.FixedUpdate()",
                  "Modifiers": [
                    "private"
                  ],
                  "Attributes": [],
                  "ReturnType": "void",
                  "Parameters": [],
                  "Invocations": [
                    {
                      "Name": "GiveMeCube",
                      "FullName": "Sphere.SpehereManager.GiveMeCube(string)",
                      "ReturnType": "GameObject",
                      "FileName": "D:\\progetti\\UnityCodeSmellAnalyzer\\example\\UnityProjectExample\\Assets\\Script\\SpehereManager.cs",
                      "DefinitionLine": 52,
                      "Kind": "SourceFile",
                      "Module": null,
                      "ReferenceFound": true,
                      "Arguments": [
                        {
                          "Argument": "\"hello\"",
                          "IsInvocation": false,
                          "IsLiteral": false
                        }
                      ],
                      "Line": 40
                    },
                    {
                      "Name": "Rotate",
                      "FullName": "UnityEngine.Transform.Rotate(float, float, float)",
                      "ReturnType": "Void",
                      "FileName": null,
                      "DefinitionLine": 1,
                      "Kind": "MetadataFile",
                      "Module": "UnityEngine.CoreModule.dll",
                      "ReferenceFound": true,
                      "Arguments": [
                        {
                          "Argument": "Time.time",
                          "IsInvocation": false,
                          "IsLiteral": false
                        },
                        {
                          "Argument": "0",
                          "IsInvocation": false,
                          "IsLiteral": false
                        },
                        {
                          "Argument": "0",
                          "IsInvocation": false,
                          "IsLiteral": false
                        }
                      ],
                      "Line": 41
                    }
                  ],
                  "Variables": [
                    {
                      "Variable": {
                        "Name": "x",
                        "Type": "float",
                        "Assignment": "Time.time",
                        "Kind": "Definition",
                        "DefinitionLine": 36
                      }
                    },
                    {
                      "Variable": {
                        "Name": "y",
                        "Type": "float",
                        "Assignment": "Time.deltaTime",
                        "Kind": "Definition",
                        "DefinitionLine": 37
                      }
                    },
                    {
                      "Variable": {
                        "Name": "y",
                        "Type": "float",
                        "Assignment": "Time.time",
                        "Kind": "Assignment",
                        "AssignmentLine": 38,
                        "VariableKind": "Local",
                        "FullName": "y",
                        "AssignmentKind": "SimpleAssignmentExpression"
                      }
                    },
                    {
                      "Variable": {
                        "Name": "Time.time",
                        "Type": "float",
                        "Kind": "Use",
                        "UseLine": 38,
                        "UseKind": "PropertyReference",
                        "AssignedTo": "y",
                        "Value": null,
                        "Operation": "SimpleAssignmentExpression",
                        "VariablesList": []
                      }
                    }
                  ],
                  "Statements": [],
                  "WhileBlocks": [],
                  "ForEachBlocks": [],
                  "ForBlocks": [],
                  "IfBlocks": [],
                  "SwitchBlocks": [],
                  "Returns": [],
                  "TryBlocks": [],
                  "ExpressionBody": null,
                  "Line": 35
                },
                {
                  "HasBody": true,
                  "HasExpressionBody": false,
                  "Name": "Update",
                  "IsEmpty": false,
                  "FullName": "Sphere.SpehereManager.Update()",
                  "Modifiers": [],
                  "Attributes": [],
                  "ReturnType": "void",
                  "Parameters": [],
                  "Invocations": [
                    {
                      "Name": "GenerateCube",
                      "FullName": "MyGame.CubeManager.GenerateCube()",
                      "ReturnType": "Void",
                      "FileName": "D:\\progetti\\UnityCodeSmellAnalyzer\\example\\UnityProjectExample\\Assets\\Script\\CubeManager.cs",
                      "DefinitionLine": 61,
                      "Kind": "SourceFile",
                      "Module": null,
                      "ReferenceFound": true,
                      "Arguments": [],
                      "Line": 47
                    },
                    {
                      "Name": "FindObjectOfType",
                      "FullName": "UnityEngine.Object.FindObjectOfType<MyGame.CubeManager>()",
                      "ReturnType": "CubeManager",
                      "FileName": null,
                      "DefinitionLine": 1,
                      "Kind": "MetadataFile",
                      "Module": "UnityEngine.CoreModule.dll",
                      "ReferenceFound": true,
                      "Arguments": [],
                      "Line": 48
                    }
                  ],
                  "Variables": [
                    {
                      "Variable": {
                        "Name": "cubeManager",
                        "Type": "MyGame.CubeManager",
                        "Assignment": "FindObjectOfType<CubeManager>()",
                        "Kind": "Assignment",
                        "AssignmentLine": 47,
                        "VariableKind": "Field",
                        "FullName": "Sphere.SpehereManager.cubeManager",
                        "AssignmentKind": "SimpleAssignmentExpression"
                      }
                    },
                    {
                      "Variable": {
                        "Name": "FindObjectOfType<CubeManager>()",
                        "Type": "MyGame.CubeManager",
                        "Kind": "Use",
                        "UseLine": 47,
                        "UseKind": "Invocation",
                        "AssignedTo": "cubeManager",
                        "Value": null,
                        "Operation": "SimpleAssignmentExpression",
                        "VariablesList": []
                      }
                    }
                  ],
                  "Statements": [],
                  "WhileBlocks": [],
                  "ForEachBlocks": [],
                  "ForBlocks": [],
                  "IfBlocks": [],
                  "SwitchBlocks": [],
                  "Returns": [],
                  "TryBlocks": [],
                  "ExpressionBody": null,
                  "Line": 45
                },
                {
                  "HasBody": true,
                  "HasExpressionBody": false,
                  "Name": "GiveMeCube",
                  "IsEmpty": false,
                  "FullName": "Sphere.SpehereManager.GiveMeCube(string)",
                  "Modifiers": [
                    "public"
                  ],
                  "Attributes": [],
                  "ReturnType": "GameObject",
                  "Parameters": [
                    {
                      "Name": "s",
                      "Type": "string",
                      "Assignment": null,
                      "Attributes": []
                    }
                  ],
                  "Invocations": [
                    {
                      "Name": "WriteLine",
                      "FullName": "System.Console.WriteLine(string)",
                      "ReturnType": "Void",
                      "FileName": null,
                      "DefinitionLine": 1,
                      "Kind": "MetadataFile",
                      "Module": "CommonLanguageRuntimeLibrary",
                      "ReferenceFound": true,
                      "Arguments": [
                        {
                          "Argument": "s",
                          "IsInvocation": false,
                          "IsLiteral": false
                        }
                      ],
                      "Line": 54
                    },
                    {
                      "Name": "GenerateCube",
                      "FullName": "MyGame.CubeManager.GenerateCube()",
                      "ReturnType": "Void",
                      "FileName": "D:\\progetti\\UnityCodeSmellAnalyzer\\example\\UnityProjectExample\\Assets\\Script\\CubeManager.cs",
                      "DefinitionLine": 61,
                      "Kind": "SourceFile",
                      "Module": null,
                      "ReferenceFound": true,
                      "Arguments": [],
                      "Line": 55
                    },
                    {
                      "Name": "Rotate",
                      "FullName": "UnityEngine.Transform.Rotate(float, float, float)",
                      "ReturnType": "Void",
                      "FileName": null,
                      "DefinitionLine": 1,
                      "Kind": "MetadataFile",
                      "Module": "UnityEngine.CoreModule.dll",
                      "ReferenceFound": true,
                      "Arguments": [
                        {
                          "Argument": "Time.time",
                          "IsInvocation": false,
                          "IsLiteral": false
                        },
                        {
                          "Argument": "0",
                          "IsInvocation": false,
                          "IsLiteral": false
                        },
                        {
                          "Argument": "0",
                          "IsInvocation": false,
                          "IsLiteral": false
                        }
                      ],
                      "Line": 58
                    }
                  ],
                  "Variables": [
                    {
                      "Variable": {
                        "Name": "x",
                        "Type": "float",
                        "Assignment": "Time.time",
                        "Kind": "Definition",
                        "DefinitionLine": 56
                      }
                    }
                  ],
                  "Statements": [],
                  "WhileBlocks": [],
                  "ForEachBlocks": [],
                  "ForBlocks": [],
                  "IfBlocks": [],
                  "SwitchBlocks": [],
                  "Returns": [
                    {
                      "ReturnStatement": {
                        "Tokens": [],
                        "Properties": [
                          "UnityEngine.Component.gameObject"
                        ],
                        "Fields": [
                          "Sphere.SpehereManager.cubeManager"
                        ],
                        "Invocations": [],
                        "Type": "UnityEngine.GameObject",
                        "Statement": "cubeManager.gameObject",
                        "ExpressionType": "SimpleMemberAccessExpression",
                        "Kind": "Property"
                      },
                      "ReturnType": "UnityEngine.GameObject",
                      "Line": 56
                    }
                  ],
                  "TryBlocks": [],
                  "ExpressionBody": null,
                  "Line": 52
                }
              ],
              "Fields": [
                {
                  "Name": "c",
                  "Type": "CubeManager",
                  "Modifiers": [],
                  "Assignment": null,
                  "Attributes": [
                    "SerializeField"
                  ],
                  "FullName": "Sphere.SpehereManager.c",
                  "Line": 11
                },
                {
                  "Name": "cubeManager",
                  "Type": "CubeManager",
                  "Modifiers": [],
                  "Assignment": null,
                  "Attributes": [],
                  "FullName": "Sphere.SpehereManager.cubeManager",
                  "Line": 12
                },
                {
                  "Name": "sphere",
                  "Type": "SpehereManager",
                  "Modifiers": [
                    "protected",
                    "static"
                  ],
                  "Assignment": null,
                  "Attributes": [],
                  "FullName": "Sphere.SpehereManager.sphere",
                  "Line": 13
                }
              ],
              "Constructors": [
                {
                  "ClassRef": "Sphere.SpehereManager",
                  "ReturnType": "SpehereManager",
                  "HasBody": false,
                  "HasExpressionBody": false,
                  "Name": "SpehereManager",
                  "IsEmpty": true,
                  "FullName": "SpehereManager",
                  "Modifiers": [],
                  "Attributes": [],
                  "Parameters": [],
                  "Invocations": [],
                  "Variables": [],
                  "Statements": [],
                  "WhileBlocks": [],
                  "ForEachBlocks": [],
                  "ForBlocks": [],
                  "IfBlocks": [],
                  "SwitchBlocks": [],
                  "Returns": [],
                  "TryBlocks": [],
                  "ExpressionBody": null,
                  "Line": 16
                }
              ],
              "Attributes": [],
              "Line": 9
            }
          ],
          "Usings": [],
          "Line": 7
        }
      ],
      "Classes": [],
      "Usings": [
        {
          "Name": "MyGame",
          "Line": 1
        },
        {
          "Name": "System",
          "Line": 2
        },
        {
          "Name": "System.Collections",
          "Line": 3
        },
        {
          "Name": "System.Collections.Generic",
          "Line": 4
        },
        {
          "Name": "UnityEngine",
          "Line": 5
        },
        {
          "Name": "a",
          "Line": 6
        }
      ],
      "Line": 1
    },
    {
      "Name": "StateManager",
      "FileName": "D:\\progetti\\UnityCodeSmellAnalyzer\\example\\UnityProjectExample\\Assets\\Script\\StateManager.cs",
      "Language": "C#",
      "Interfaces": [],
      "Namespaces": [
        {
          "Attributes": [],
          "Name": "Test",
          "Interfaces": [],
          "Namespaces": [
            {
              "Attributes": [],
              "Name": "Input",
              "Interfaces": [],
              "Namespaces": [
                {
                  "Attributes": [],
                  "Name": "TestInput",
                  "Interfaces": [],
                  "Namespaces": [],
                  "Classes": [
                    {
                      "Name": "StateManager",
                      "FullName": "Test.Input.TestInput.StateManager",
                      "FullInheritanceName": "SuperClass",
                      "InnerClasses": [],
                      "ClassConstraints": [],
                      "Modifiers": [
                        "public"
                      ],
                      "Inheritance": "SuperClass",
                      "Interfaces": [],
                      "Properties": [
                        {
                          "Name": "NoDamage",
                          "Type": "bool",
                          "Modifiers": [
                            "public"
                          ],
                          "Attributes": [],
                          "IsAutoProperty": false,
                          "Initializer": false,
                          "InitializerValue": null,
                          "Accessor": [
                            {
                              "AccessorType": "get",
                              "HasBody": true,
                              "HasExpressionBody": false,
                              "IsEmpty": false,
                              "Modifiers": [],
                              "Attributes": [],
                              "ReturnType": null,
                              "Parameters": [],
                              "Invocations": [],
                              "Variables": [],
                              "Statements": [],
                              "WhileBlocks": [],
                              "ForEachBlocks": [],
                              "ForBlocks": [],
                              "IfBlocks": [],
                              "SwitchBlocks": [],
                              "Returns": [
                                {
                                  "ReturnStatement": {
                                    "Tokens": [],
                                    "Properties": [],
                                    "Fields": [
                                      "Test.Input.TestInput.StateManager.noDamage"
                                    ],
                                    "Invocations": [],
                                    "Type": "bool",
                                    "Statement": "noDamage",
                                    "ExpressionType": "IdentifierName",
                                    "Kind": "Field"
                                  },
                                  "ReturnType": "bool",
                                  "Line": 47
                                }
                              ],
                              "TryBlocks": [],
                              "ExpressionBody": null,
                              "Line": 47
                            }
                          ],
                          "HasExpressionBody": false,
                          "ExpressionBody": null,
                          "Line": 47
                        }
                      ],
                      "Methods": [
                        {
                          "HasBody": true,
                          "HasExpressionBody": false,
                          "Name": "Start",
                          "IsEmpty": false,
                          "FullName": "Test.Input.TestInput.StateManager.Start()",
                          "Modifiers": [],
                          "Attributes": [],
                          "ReturnType": "void",
                          "Parameters": [],
                          "Invocations": [
                            {
                              "Name": "GetComponent",
                              "FullName": "UnityEngine.Component.GetComponent<MyGame.CubeManager>()",
                              "ReturnType": "CubeManager",
                              "FileName": null,
                              "DefinitionLine": 1,
                              "Kind": "MetadataFile",
                              "Module": "UnityEngine.CoreModule.dll",
                              "ReferenceFound": true,
                              "Arguments": [],
                              "Line": 50
                            },
                            {
                              "Name": "GetComponent",
                              "FullName": "UnityEngine.Component.GetComponent<a.Inputs>()",
                              "ReturnType": "Inputs",
                              "FileName": null,
                              "DefinitionLine": 1,
                              "Kind": "MetadataFile",
                              "Module": "UnityEngine.CoreModule.dll",
                              "ReferenceFound": true,
                              "Arguments": [],
                              "Line": 51
                            },
                            {
                              "Name": "WriteLine",
                              "FullName": "System.Console.WriteLine(string)",
                              "ReturnType": "Void",
                              "FileName": null,
                              "DefinitionLine": 1,
                              "Kind": "MetadataFile",
                              "Module": "CommonLanguageRuntimeLibrary",
                              "ReferenceFound": true,
                              "Arguments": [
                                {
                                  "Argument": "\"Hello\"",
                                  "IsInvocation": false,
                                  "IsLiteral": false
                                }
                              ],
                              "Line": 54
                            }
                          ],
                          "Variables": [],
                          "Statements": [],
                          "WhileBlocks": [],
                          "ForEachBlocks": [],
                          "ForBlocks": [],
                          "IfBlocks": [],
                          "SwitchBlocks": [],
                          "Returns": [],
                          "TryBlocks": [],
                          "ExpressionBody": null,
                          "Line": 48
                        },
                        {
                          "HasBody": true,
                          "HasExpressionBody": false,
                          "Name": "Update",
                          "IsEmpty": false,
                          "FullName": "Test.Input.TestInput.StateManager.Update()",
                          "Modifiers": [],
                          "Attributes": [],
                          "ReturnType": "void",
                          "Parameters": [],
                          "Invocations": [
                            {
                              "Name": "Prova",
                              "FullName": "Test.Input.TestInput.StateManager.Prova()",
                              "ReturnType": "Inputs",
                              "FileName": "D:\\progetti\\UnityCodeSmellAnalyzer\\example\\UnityProjectExample\\Assets\\Script\\StateManager.cs",
                              "DefinitionLine": 104,
                              "Kind": "SourceFile",
                              "Module": null,
                              "ReferenceFound": true,
                              "Arguments": [],
                              "Line": 63
                            }
                          ],
                          "Variables": [],
                          "Statements": [],
                          "WhileBlocks": [],
                          "ForEachBlocks": [],
                          "ForBlocks": [],
                          "IfBlocks": [
                            {
                              "Condition": {
                                "Tokens": [
                                  "isJumping"
                                ],
                                "Properties": [],
                                "Fields": [
                                  "Test.Input.TestInput.StateManager.isJumping"
                                ],
                                "Invocations": [],
                                "Type": "bool",
                                "Statement": "!isJumping",
                                "ExpressionType": "LogicalNotExpression",
                                "Kind": "Method"
                              },
                              "Else": {
                                "ElseStatement": "if(noDamage) noDamage = false;",
                                "EndLine": 62,
                                "StartLine": 62,
                                "Invocations": [],
                                "Variables": [],
                                "WhileBlocks": [],
                                "ForBlocks": [],
                                "IfBlocks": [
                                  {
                                    "Condition": {
                                      "Tokens": [
                                        "noDamage"
                                      ],
                                      "Properties": [],
                                      "Fields": [
                                        "Test.Input.TestInput.StateManager.noDamage"
                                      ],
                                      "Invocations": [],
                                      "Type": "bool",
                                      "Statement": "noDamage",
                                      "ExpressionType": "IdentifierName",
                                      "Kind": "Field"
                                    },
                                    "Else": null,
                                    "DanglingElse": true,
                                    "Depth": 2,
                                    "EndLine": 62,
                                    "StartLine": 62,
                                    "Invocations": [],
                                    "Variables": [
                                      {
                                        "Variable": {
                                          "Name": "noDamage",
                                          "Type": "bool",
                                          "Assignment": "false",
                                          "Kind": "Assignment",
                                          "AssignmentLine": 61,
                                          "VariableKind": "Field",
                                          "FullName": "Test.Input.TestInput.StateManager.noDamage",
                                          "AssignmentKind": "SimpleAssignmentExpression"
                                        }
                                      },
                                      {
                                        "Variable": {
                                          "Name": null,
                                          "Type": "bool",
                                          "Kind": "Use",
                                          "UseLine": 61,
                                          "UseKind": "Literal",
                                          "AssignedTo": "noDamage",
                                          "Value": "false",
                                          "Operation": "SimpleAssignmentExpression",
                                          "VariablesList": []
                                        }
                                      }
                                    ],
                                    "WhileBlocks": [],
                                    "ForBlocks": [],
                                    "IfBlocks": [],
                                    "SwitchBlocks": [],
                                    "ForEachBlocks": [],
                                    "ElseBlocks": [],
                                    "TryBlocks": [],
                                    "Returns": []
                                  }
                                ],
                                "SwitchBlocks": [],
                                "ForEachBlocks": [],
                                "ElseBlocks": [],
                                "TryBlocks": [],
                                "Returns": []
                              },
                              "DanglingElse": false,
                              "Depth": 1,
                              "EndLine": 62,
                              "StartLine": 61,
                              "Invocations": [],
                              "Variables": [
                                {
                                  "Variable": {
                                    "Name": "noDamage",
                                    "Type": "bool",
                                    "Assignment": "true",
                                    "Kind": "Assignment",
                                    "AssignmentLine": 60,
                                    "VariableKind": "Field",
                                    "FullName": "Test.Input.TestInput.StateManager.noDamage",
                                    "AssignmentKind": "SimpleAssignmentExpression"
                                  }
                                },
                                {
                                  "Variable": {
                                    "Name": null,
                                    "Type": "bool",
                                    "Kind": "Use",
                                    "UseLine": 60,
                                    "UseKind": "Literal",
                                    "AssignedTo": "noDamage",
                                    "Value": "true",
                                    "Operation": "SimpleAssignmentExpression",
                                    "VariablesList": []
                                  }
                                }
                              ],
                              "WhileBlocks": [],
                              "ForBlocks": [],
                              "IfBlocks": [],
                              "SwitchBlocks": [],
                              "ForEachBlocks": [],
                              "ElseBlocks": [],
                              "TryBlocks": [],
                              "Returns": []
                            }
                          ],
                          "SwitchBlocks": [
                            {
                              "Condition": {
                                "Tokens": [
                                  "dir"
                                ],
                                "Properties": [],
                                "Fields": [
                                  "Test.Input.TestInput.StateManager.dir"
                                ],
                                "Invocations": [],
                                "Type": "int",
                                "Statement": "dir",
                                "ExpressionType": "IdentifierName",
                                "Kind": "Field"
                              },
                              "CaseBranches": [
                                {
                                  "labels": [
                                    "case 0:"
                                  ],
                                  "EndLine": 73,
                                  "StartLine": 67,
                                  "Invocations": [],
                                  "Variables": [
                                    {
                                      "Variable": {
                                        "Name": "forward",
                                        "Type": "bool",
                                        "Assignment": "false",
                                        "Kind": "Assignment",
                                        "AssignmentLine": 67,
                                        "VariableKind": "Field",
                                        "FullName": "Test.Input.TestInput.StateManager.forward",
                                        "AssignmentKind": "SimpleAssignmentExpression"
                                      }
                                    },
                                    {
                                      "Variable": {
                                        "Name": "backward",
                                        "Type": "bool",
                                        "Assignment": "false",
                                        "Kind": "Assignment",
                                        "AssignmentLine": 68,
                                        "VariableKind": "Field",
                                        "FullName": "Test.Input.TestInput.StateManager.backward",
                                        "AssignmentKind": "SimpleAssignmentExpression"
                                      }
                                    },
                                    {
                                      "Variable": {
                                        "Name": "left",
                                        "Type": "bool",
                                        "Assignment": "false",
                                        "Kind": "Assignment",
                                        "AssignmentLine": 69,
                                        "VariableKind": "Field",
                                        "FullName": "Test.Input.TestInput.StateManager.left",
                                        "AssignmentKind": "SimpleAssignmentExpression"
                                      }
                                    },
                                    {
                                      "Variable": {
                                        "Name": "right",
                                        "Type": "bool",
                                        "Assignment": "false",
                                        "Kind": "Assignment",
                                        "AssignmentLine": 70,
                                        "VariableKind": "Field",
                                        "FullName": "Test.Input.TestInput.StateManager.right",
                                        "AssignmentKind": "SimpleAssignmentExpression"
                                      }
                                    },
                                    {
                                      "Variable": {
                                        "Name": null,
                                        "Type": "bool",
                                        "Kind": "Use",
                                        "UseLine": 67,
                                        "UseKind": "Literal",
                                        "AssignedTo": "forward",
                                        "Value": "false",
                                        "Operation": "SimpleAssignmentExpression",
                                        "VariablesList": []
                                      }
                                    },
                                    {
                                      "Variable": {
                                        "Name": null,
                                        "Type": "bool",
                                        "Kind": "Use",
                                        "UseLine": 68,
                                        "UseKind": "Literal",
                                        "AssignedTo": "backward",
                                        "Value": "false",
                                        "Operation": "SimpleAssignmentExpression",
                                        "VariablesList": []
                                      }
                                    },
                                    {
                                      "Variable": {
                                        "Name": null,
                                        "Type": "bool",
                                        "Kind": "Use",
                                        "UseLine": 69,
                                        "UseKind": "Literal",
                                        "AssignedTo": "left",
                                        "Value": "false",
                                        "Operation": "SimpleAssignmentExpression",
                                        "VariablesList": []
                                      }
                                    },
                                    {
                                      "Variable": {
                                        "Name": null,
                                        "Type": "bool",
                                        "Kind": "Use",
                                        "UseLine": 70,
                                        "UseKind": "Literal",
                                        "AssignedTo": "right",
                                        "Value": "false",
                                        "Operation": "SimpleAssignmentExpression",
                                        "VariablesList": []
                                      }
                                    }
                                  ],
                                  "WhileBlocks": [],
                                  "ForBlocks": [],
                                  "IfBlocks": [
                                    {
                                      "Condition": {
                                        "Tokens": [
                                          "NoDamage"
                                        ],
                                        "Properties": [
                                          "Test.Input.TestInput.StateManager.NoDamage"
                                        ],
                                        "Fields": [],
                                        "Invocations": [],
                                        "Type": "bool",
                                        "Statement": "NoDamage",
                                        "ExpressionType": "IdentifierName",
                                        "Kind": "Property"
                                      },
                                      "Else": null,
                                      "DanglingElse": true,
                                      "Depth": 2,
                                      "EndLine": 72,
                                      "StartLine": 72,
                                      "Invocations": [
                                        {
                                          "Name": "WriteLine",
                                          "FullName": "System.Console.WriteLine(string)",
                                          "ReturnType": "Void",
                                          "FileName": null,
                                          "DefinitionLine": 1,
                                          "Kind": "MetadataFile",
                                          "Module": "CommonLanguageRuntimeLibrary",
                                          "ReferenceFound": true,
                                          "Arguments": [
                                            {
                                              "Argument": "\"\"",
                                              "IsInvocation": false,
                                              "IsLiteral": false
                                            }
                                          ],
                                          "Line": 72
                                        }
                                      ],
                                      "Variables": [],
                                      "WhileBlocks": [],
                                      "ForBlocks": [],
                                      "IfBlocks": [],
                                      "SwitchBlocks": [],
                                      "ForEachBlocks": [],
                                      "ElseBlocks": [],
                                      "TryBlocks": [],
                                      "Returns": []
                                    }
                                  ],
                                  "SwitchBlocks": [],
                                  "ForEachBlocks": [],
                                  "ElseBlocks": [],
                                  "TryBlocks": [],
                                  "Returns": []
                                },
                                {
                                  "labels": [
                                    "case 1:"
                                  ],
                                  "EndLine": 79,
                                  "StartLine": 74,
                                  "Invocations": [],
                                  "Variables": [
                                    {
                                      "Variable": {
                                        "Name": "forward",
                                        "Type": "bool",
                                        "Assignment": "true",
                                        "Kind": "Assignment",
                                        "AssignmentLine": 74,
                                        "VariableKind": "Field",
                                        "FullName": "Test.Input.TestInput.StateManager.forward",
                                        "AssignmentKind": "SimpleAssignmentExpression"
                                      }
                                    },
                                    {
                                      "Variable": {
                                        "Name": "backward",
                                        "Type": "bool",
                                        "Assignment": "false",
                                        "Kind": "Assignment",
                                        "AssignmentLine": 75,
                                        "VariableKind": "Field",
                                        "FullName": "Test.Input.TestInput.StateManager.backward",
                                        "AssignmentKind": "SimpleAssignmentExpression"
                                      }
                                    },
                                    {
                                      "Variable": {
                                        "Name": "left",
                                        "Type": "bool",
                                        "Assignment": "false",
                                        "Kind": "Assignment",
                                        "AssignmentLine": 76,
                                        "VariableKind": "Field",
                                        "FullName": "Test.Input.TestInput.StateManager.left",
                                        "AssignmentKind": "SimpleAssignmentExpression"
                                      }
                                    },
                                    {
                                      "Variable": {
                                        "Name": "right",
                                        "Type": "bool",
                                        "Assignment": "false",
                                        "Kind": "Assignment",
                                        "AssignmentLine": 77,
                                        "VariableKind": "Field",
                                        "FullName": "Test.Input.TestInput.StateManager.right",
                                        "AssignmentKind": "SimpleAssignmentExpression"
                                      }
                                    },
                                    {
                                      "Variable": {
                                        "Name": null,
                                        "Type": "bool",
                                        "Kind": "Use",
                                        "UseLine": 74,
                                        "UseKind": "Literal",
                                        "AssignedTo": "forward",
                                        "Value": "true",
                                        "Operation": "SimpleAssignmentExpression",
                                        "VariablesList": []
                                      }
                                    },
                                    {
                                      "Variable": {
                                        "Name": null,
                                        "Type": "bool",
                                        "Kind": "Use",
                                        "UseLine": 75,
                                        "UseKind": "Literal",
                                        "AssignedTo": "backward",
                                        "Value": "false",
                                        "Operation": "SimpleAssignmentExpression",
                                        "VariablesList": []
                                      }
                                    },
                                    {
                                      "Variable": {
                                        "Name": null,
                                        "Type": "bool",
                                        "Kind": "Use",
                                        "UseLine": 76,
                                        "UseKind": "Literal",
                                        "AssignedTo": "left",
                                        "Value": "false",
                                        "Operation": "SimpleAssignmentExpression",
                                        "VariablesList": []
                                      }
                                    },
                                    {
                                      "Variable": {
                                        "Name": null,
                                        "Type": "bool",
                                        "Kind": "Use",
                                        "UseLine": 77,
                                        "UseKind": "Literal",
                                        "AssignedTo": "right",
                                        "Value": "false",
                                        "Operation": "SimpleAssignmentExpression",
                                        "VariablesList": []
                                      }
                                    }
                                  ],
                                  "WhileBlocks": [],
                                  "ForBlocks": [],
                                  "IfBlocks": [],
                                  "SwitchBlocks": [],
                                  "ForEachBlocks": [],
                                  "ElseBlocks": [],
                                  "TryBlocks": [],
                                  "Returns": []
                                },
                                {
                                  "labels": [
                                    "case 2:"
                                  ],
                                  "EndLine": 85,
                                  "StartLine": 80,
                                  "Invocations": [],
                                  "Variables": [
                                    {
                                      "Variable": {
                                        "Name": "forward",
                                        "Type": "bool",
                                        "Assignment": "false",
                                        "Kind": "Assignment",
                                        "AssignmentLine": 80,
                                        "VariableKind": "Field",
                                        "FullName": "Test.Input.TestInput.StateManager.forward",
                                        "AssignmentKind": "SimpleAssignmentExpression"
                                      }
                                    },
                                    {
                                      "Variable": {
                                        "Name": "backward",
                                        "Type": "bool",
                                        "Assignment": "false",
                                        "Kind": "Assignment",
                                        "AssignmentLine": 81,
                                        "VariableKind": "Field",
                                        "FullName": "Test.Input.TestInput.StateManager.backward",
                                        "AssignmentKind": "SimpleAssignmentExpression"
                                      }
                                    },
                                    {
                                      "Variable": {
                                        "Name": "left",
                                        "Type": "bool",
                                        "Assignment": "true",
                                        "Kind": "Assignment",
                                        "AssignmentLine": 82,
                                        "VariableKind": "Field",
                                        "FullName": "Test.Input.TestInput.StateManager.left",
                                        "AssignmentKind": "SimpleAssignmentExpression"
                                      }
                                    },
                                    {
                                      "Variable": {
                                        "Name": "right",
                                        "Type": "bool",
                                        "Assignment": "false",
                                        "Kind": "Assignment",
                                        "AssignmentLine": 83,
                                        "VariableKind": "Field",
                                        "FullName": "Test.Input.TestInput.StateManager.right",
                                        "AssignmentKind": "SimpleAssignmentExpression"
                                      }
                                    },
                                    {
                                      "Variable": {
                                        "Name": null,
                                        "Type": "bool",
                                        "Kind": "Use",
                                        "UseLine": 80,
                                        "UseKind": "Literal",
                                        "AssignedTo": "forward",
                                        "Value": "false",
                                        "Operation": "SimpleAssignmentExpression",
                                        "VariablesList": []
                                      }
                                    },
                                    {
                                      "Variable": {
                                        "Name": null,
                                        "Type": "bool",
                                        "Kind": "Use",
                                        "UseLine": 81,
                                        "UseKind": "Literal",
                                        "AssignedTo": "backward",
                                        "Value": "false",
                                        "Operation": "SimpleAssignmentExpression",
                                        "VariablesList": []
                                      }
                                    },
                                    {
                                      "Variable": {
                                        "Name": null,
                                        "Type": "bool",
                                        "Kind": "Use",
                                        "UseLine": 82,
                                        "UseKind": "Literal",
                                        "AssignedTo": "left",
                                        "Value": "true",
                                        "Operation": "SimpleAssignmentExpression",
                                        "VariablesList": []
                                      }
                                    },
                                    {
                                      "Variable": {
                                        "Name": null,
                                        "Type": "bool",
                                        "Kind": "Use",
                                        "UseLine": 83,
                                        "UseKind": "Literal",
                                        "AssignedTo": "right",
                                        "Value": "false",
                                        "Operation": "SimpleAssignmentExpression",
                                        "VariablesList": []
                                      }
                                    }
                                  ],
                                  "WhileBlocks": [],
                                  "ForBlocks": [],
                                  "IfBlocks": [],
                                  "SwitchBlocks": [],
                                  "ForEachBlocks": [],
                                  "ElseBlocks": [],
                                  "TryBlocks": [],
                                  "Returns": []
                                }
                              ],
                              "Depth": 1,
                              "EndLine": 86,
                              "StartLine": 65,
                              "Invocations": [],
                              "Variables": [],
                              "WhileBlocks": [],
                              "ForBlocks": [],
                              "IfBlocks": [],
                              "SwitchBlocks": [],
                              "ForEachBlocks": [],
                              "ElseBlocks": [],
                              "TryBlocks": [],
                              "Returns": []
                            }
                          ],
                          "Returns": [],
                          "TryBlocks": [],
                          "ExpressionBody": null,
                          "Line": 59
                        },
                        {
                          "HasBody": true,
                          "HasExpressionBody": false,
                          "Name": "Test",
                          "IsEmpty": false,
                          "FullName": "Test.Input.TestInput.StateManager.Test()",
                          "Modifiers": [
                            "public",
                            "override"
                          ],
                          "Attributes": [],
                          "ReturnType": "void",
                          "Parameters": [],
                          "Invocations": [
                            {
                              "Name": "Test",
                              "FullName": "SuperClass.Test()",
                              "ReturnType": "Void",
                              "FileName": "D:\\progetti\\UnityCodeSmellAnalyzer\\example\\UnityProjectExample\\Assets\\Script\\SuperClass.cs",
                              "DefinitionLine": 7,
                              "Kind": "SourceFile",
                              "Module": null,
                              "ReferenceFound": true,
                              "Arguments": [],
                              "Line": 91
                            },
                            {
                              "Name": "Instantiate",
                              "FullName": "UnityEngine.Object.Instantiate<UnityEngine.GameObject>(UnityEngine.GameObject)",
                              "ReturnType": "GameObject",
                              "FileName": null,
                              "DefinitionLine": 1,
                              "Kind": "MetadataFile",
                              "Module": "UnityEngine.CoreModule.dll",
                              "ReferenceFound": true,
                              "Arguments": [
                                {
                                  "Argument": "o.Cube",
                                  "IsInvocation": false,
                                  "IsLiteral": false
                                }
                              ],
                              "Line": 100
                            },
                            {
                              "Name": "FindGameObjectWithTag",
                              "FullName": "UnityEngine.GameObject.FindGameObjectWithTag(string)",
                              "ReturnType": "GameObject",
                              "FileName": null,
                              "DefinitionLine": 1,
                              "Kind": "MetadataFile",
                              "Module": "UnityEngine.CoreModule.dll",
                              "ReferenceFound": true,
                              "Arguments": [
                                {
                                  "Argument": "\"Player\"",
                                  "IsInvocation": false,
                                  "IsLiteral": false
                                }
                              ],
                              "Line": 101
                            },
                            {
                              "Name": "SetActive",
                              "FullName": "UnityEngine.GameObject.SetActive(bool)",
                              "ReturnType": "Void",
                              "FileName": null,
                              "DefinitionLine": 1,
                              "Kind": "MetadataFile",
                              "Module": "UnityEngine.CoreModule.dll",
                              "ReferenceFound": true,
                              "Arguments": [
                                {
                                  "Argument": "false",
                                  "IsInvocation": false,
                                  "IsLiteral": false
                                }
                              ],
                              "Line": 102
                            }
                          ],
                          "Variables": [
                            {
                              "Variable": {
                                "Name": "i",
                                "Type": "int",
                                "Assignment": "10",
                                "Kind": "Definition",
                                "DefinitionLine": 91
                              }
                            },
                            {
                              "Variable": {
                                "Name": "j",
                                "Type": "int",
                                "Assignment": "25",
                                "Kind": "Definition",
                                "DefinitionLine": 92
                              }
                            },
                            {
                              "Variable": {
                                "Name": "result",
                                "Type": "int",
                                "Assignment": "1",
                                "Kind": "Definition",
                                "DefinitionLine": 93
                              }
                            },
                            {
                              "Variable": {
                                "Name": "o",
                                "Type": "MyGame.Cube.CubeHolder",
                                "Assignment": "new MyGame.Cube.CubeHolder(result)",
                                "Kind": "Definition",
                                "DefinitionLine": 98
                              }
                            },
                            {
                              "Variable": {
                                "Name": "z",
                                "Type": "GameObject",
                                "Assignment": "GameObject.FindGameObjectWithTag(\"Player\")",
                                "Kind": "Definition",
                                "DefinitionLine": 100
                              }
                            }
                          ],
                          "Statements": [],
                          "WhileBlocks": [],
                          "ForEachBlocks": [],
                          "ForBlocks": [
                            {
                              "Condition": {
                                "Tokens": [
                                  "k",
                                  "j"
                                ],
                                "Properties": [],
                                "Fields": [],
                                "Invocations": [],
                                "Type": "bool",
                                "Statement": "k < j",
                                "ExpressionType": "LessThanExpression",
                                "Kind": "Method"
                              },
                              "Declarations": [
                                "k"
                              ],
                              "Initializers": [],
                              "Incrementors": [
                                "k++"
                              ],
                              "Depth": 1,
                              "EndLine": 98,
                              "StartLine": 95,
                              "Invocations": [],
                              "Variables": [
                                {
                                  "Variable": {
                                    "Name": "k",
                                    "Type": "int",
                                    "Assignment": "0",
                                    "Kind": "Definition",
                                    "DefinitionLine": 94
                                  }
                                },
                                {
                                  "Variable": {
                                    "Name": "result",
                                    "Type": "int",
                                    "Assignment": "i * i",
                                    "Kind": "Assignment",
                                    "AssignmentLine": 96,
                                    "VariableKind": "Local",
                                    "FullName": "result",
                                    "AssignmentKind": "SimpleAssignmentExpression"
                                  }
                                },
                                {
                                  "Variable": {
                                    "Name": "i * i",
                                    "Type": "int",
                                    "Kind": "Use",
                                    "UseLine": 96,
                                    "UseKind": "BinaryOperator",
                                    "AssignedTo": "result",
                                    "Value": null,
                                    "Operation": "SimpleAssignmentExpression",
                                    "VariablesList": [
                                      {
                                        "Name": "i",
                                        "Type": "int",
                                        "Kind": "Use",
                                        "UseLine": 96,
                                        "UseKind": "LocalReference",
                                        "AssignedTo": "result",
                                        "Value": null,
                                        "Operation": "IdentifierName",
                                        "VariablesList": []
                                      },
                                      {
                                        "Name": "i",
                                        "Type": "int",
                                        "Kind": "Use",
                                        "UseLine": 96,
                                        "UseKind": "LocalReference",
                                        "AssignedTo": "result",
                                        "Value": null,
                                        "Operation": "IdentifierName",
                                        "VariablesList": []
                                      }
                                    ]
                                  }
                                }
                              ],
                              "WhileBlocks": [],
                              "ForBlocks": [],
                              "IfBlocks": [],
                              "SwitchBlocks": [],
                              "ForEachBlocks": [],
                              "ElseBlocks": [],
                              "TryBlocks": [],
                              "Returns": []
                            }
                          ],
                          "IfBlocks": [],
                          "SwitchBlocks": [],
                          "Returns": [],
                          "TryBlocks": [],
                          "ExpressionBody": null,
                          "Line": 89
                        },
                        {
                          "HasBody": true,
                          "HasExpressionBody": false,
                          "Name": "Prova",
                          "IsEmpty": false,
                          "FullName": "Test.Input.TestInput.StateManager.Prova()",
                          "Modifiers": [
                            "public"
                          ],
                          "Attributes": [],
                          "ReturnType": "Inputs",
                          "Parameters": [],
                          "Invocations": [],
                          "Variables": [],
                          "Statements": [],
                          "WhileBlocks": [],
                          "ForEachBlocks": [],
                          "ForBlocks": [],
                          "IfBlocks": [
                            {
                              "Condition": {
                                "Tokens": [
                                  "NoDamage"
                                ],
                                "Properties": [
                                  "Test.Input.TestInput.StateManager.NoDamage"
                                ],
                                "Fields": [],
                                "Invocations": [],
                                "Type": "bool",
                                "Statement": "NoDamage",
                                "ExpressionType": "IdentifierName",
                                "Kind": "Property"
                              },
                              "Else": null,
                              "DanglingElse": true,
                              "Depth": 1,
                              "EndLine": 106,
                              "StartLine": 106,
                              "Invocations": [],
                              "Variables": [],
                              "WhileBlocks": [],
                              "ForBlocks": [],
                              "IfBlocks": [],
                              "SwitchBlocks": [],
                              "ForEachBlocks": [],
                              "ElseBlocks": [],
                              "TryBlocks": [],
                              "Returns": [
                                {
                                  "ReturnStatement": {
                                    "Tokens": [],
                                    "Properties": [],
                                    "Fields": [],
                                    "Invocations": [],
                                    "Type": null,
                                    "Statement": "null",
                                    "ExpressionType": "NullLiteralExpression",
                                    "Kind": "Literal"
                                  },
                                  "ReturnType": null,
                                  "Line": 106
                                }
                              ]
                            }
                          ],
                          "SwitchBlocks": [
                            {
                              "Condition": {
                                "Tokens": [
                                  "dir"
                                ],
                                "Properties": [],
                                "Fields": [
                                  "Test.Input.TestInput.StateManager.dir"
                                ],
                                "Invocations": [],
                                "Type": "int",
                                "Statement": "dir",
                                "ExpressionType": "IdentifierName",
                                "Kind": "Field"
                              },
                              "CaseBranches": [
                                {
                                  "labels": [
                                    "case 0:"
                                  ],
                                  "EndLine": 110,
                                  "StartLine": 109,
                                  "Invocations": [],
                                  "Variables": [],
                                  "WhileBlocks": [],
                                  "ForBlocks": [],
                                  "IfBlocks": [],
                                  "SwitchBlocks": [],
                                  "ForEachBlocks": [],
                                  "ElseBlocks": [],
                                  "TryBlocks": [],
                                  "Returns": []
                                }
                              ],
                              "Depth": 1,
                              "EndLine": 112,
                              "StartLine": 107,
                              "Invocations": [],
                              "Variables": [],
                              "WhileBlocks": [],
                              "ForBlocks": [],
                              "IfBlocks": [],
                              "SwitchBlocks": [],
                              "ForEachBlocks": [],
                              "ElseBlocks": [],
                              "TryBlocks": [],
                              "Returns": []
                            }
                          ],
                          "Returns": [
                            {
                              "ReturnStatement": {
                                "Tokens": [],
                                "Properties": [],
                                "Fields": [],
                                "Invocations": [],
                                "Type": "a.Inputs",
                                "Statement": "new Inputs()",
                                "ExpressionType": "ObjectCreationExpression",
                                "Kind": "Method"
                              },
                              "ReturnType": "a.Inputs",
                              "Line": 113
                            }
                          ],
                          "TryBlocks": [],
                          "ExpressionBody": null,
                          "Line": 104
                        },
                        {
                          "HasBody": true,
                          "HasExpressionBody": false,
                          "Name": "Test2",
                          "IsEmpty": false,
                          "FullName": "Test.Input.TestInput.StateManager.Test2()",
                          "Modifiers": [
                            "public",
                            "override"
                          ],
                          "Attributes": [],
                          "ReturnType": "void",
                          "Parameters": [],
                          "Invocations": [
                            {
                              "Name": "Test2",
                              "FullName": "SuperClass.Test2()",
                              "ReturnType": "Void",
                              "FileName": "D:\\progetti\\UnityCodeSmellAnalyzer\\example\\UnityProjectExample\\Assets\\Script\\SuperClass.cs",
                              "DefinitionLine": 8,
                              "Kind": "SourceFile",
                              "Module": null,
                              "ReferenceFound": true,
                              "Arguments": [],
                              "Line": 118
                            },
                            {
                              "Name": "Test",
                              "FullName": "Test.Input.TestInput.StateManager.Test()",
                              "ReturnType": "Void",
                              "FileName": "D:\\progetti\\UnityCodeSmellAnalyzer\\example\\UnityProjectExample\\Assets\\Script\\StateManager.cs",
                              "DefinitionLine": 89,
                              "Kind": "SourceFile",
                              "Module": null,
                              "ReferenceFound": true,
                              "Arguments": [],
                              "Line": 119
                            }
                          ],
                          "Variables": [],
                          "Statements": [],
                          "WhileBlocks": [
                            {
                              "Condition": {
                                "Tokens": [
                                  "isJumping"
                                ],
                                "Properties": [],
                                "Fields": [
                                  "Test.Input.TestInput.StateManager.isJumping"
                                ],
                                "Invocations": [],
                                "Type": "bool",
                                "Statement": "isJumping",
                                "ExpressionType": "IdentifierName",
                                "Kind": "Field"
                              },
                              "Depth": 1,
                              "EndLine": 131,
                              "StartLine": 120,
                              "Invocations": [
                                {
                                  "Name": "ToString",
                                  "FullName": "int.ToString()",
                                  "ReturnType": "String",
                                  "FileName": null,
                                  "DefinitionLine": 1,
                                  "Kind": "MetadataFile",
                                  "Module": "CommonLanguageRuntimeLibrary",
                                  "ReferenceFound": true,
                                  "Arguments": [],
                                  "Line": 129
                                },
                                {
                                  "Name": "WriteLine",
                                  "FullName": "System.Console.WriteLine(int)",
                                  "ReturnType": "Void",
                                  "FileName": null,
                                  "DefinitionLine": 1,
                                  "Kind": "MetadataFile",
                                  "Module": "CommonLanguageRuntimeLibrary",
                                  "ReferenceFound": true,
                                  "Arguments": [
                                    {
                                      "Argument": "i * k",
                                      "IsInvocation": true,
                                      "IsLiteral": false
                                    }
                                  ],
                                  "Line": 130
                                }
                              ],
                              "Variables": [
                                {
                                  "Variable": {
                                    "Name": "i",
                                    "Type": "int",
                                    "Assignment": "0",
                                    "Kind": "Definition",
                                    "DefinitionLine": 121
                                  }
                                },
                                {
                                  "Variable": {
                                    "Name": "k",
                                    "Type": "int",
                                    "Assignment": "30",
                                    "Kind": "Definition",
                                    "DefinitionLine": 123
                                  }
                                },
                                {
                                  "Variable": {
                                    "Name": "i",
                                    "Type": "int",
                                    "Assignment": "10",
                                    "Kind": "Assignment",
                                    "AssignmentLine": 122,
                                    "VariableKind": "Local",
                                    "FullName": "i",
                                    "AssignmentKind": "SimpleAssignmentExpression"
                                  }
                                },
                                {
                                  "Variable": {
                                    "Name": "i",
                                    "Type": "int",
                                    "Assignment": "k",
                                    "Kind": "Assignment",
                                    "AssignmentLine": 124,
                                    "VariableKind": "Local",
                                    "FullName": "i",
                                    "AssignmentKind": "MultiplyAssignmentExpression"
                                  }
                                },
                                {
                                  "Variable": {
                                    "Name": "k",
                                    "Type": "int",
                                    "Assignment": "i * i * k",
                                    "Kind": "Assignment",
                                    "AssignmentLine": 126,
                                    "VariableKind": "Local",
                                    "FullName": "k",
                                    "AssignmentKind": "SimpleAssignmentExpression"
                                  }
                                },
                                {
                                  "Variable": {
                                    "Name": null,
                                    "Type": "int",
                                    "Kind": "Use",
                                    "UseLine": 122,
                                    "UseKind": "Literal",
                                    "AssignedTo": "i",
                                    "Value": "10",
                                    "Operation": "SimpleAssignmentExpression",
                                    "VariablesList": []
                                  }
                                },
                                {
                                  "Variable": {
                                    "Name": "k",
                                    "Type": "int",
                                    "Kind": "Use",
                                    "UseLine": 124,
                                    "UseKind": "LocalReference",
                                    "AssignedTo": "i",
                                    "Value": null,
                                    "Operation": "MultiplyAssignmentExpression",
                                    "VariablesList": []
                                  }
                                },
                                {
                                  "Variable": {
                                    "Name": "i * i * k",
                                    "Type": "int",
                                    "Kind": "Use",
                                    "UseLine": 126,
                                    "UseKind": "BinaryOperator",
                                    "AssignedTo": "k",
                                    "Value": null,
                                    "Operation": "SimpleAssignmentExpression",
                                    "VariablesList": [
                                      {
                                        "Name": "i * i",
                                        "Type": "int",
                                        "Kind": "Use",
                                        "UseLine": 126,
                                        "UseKind": "BinaryOperator",
                                        "AssignedTo": "k",
                                        "Value": null,
                                        "Operation": "MultiplyExpression",
                                        "VariablesList": [
                                          {
                                            "Name": "i",
                                            "Type": "int",
                                            "Kind": "Use",
                                            "UseLine": 126,
                                            "UseKind": "LocalReference",
                                            "AssignedTo": "k",
                                            "Value": null,
                                            "Operation": "IdentifierName",
                                            "VariablesList": []
                                          },
                                          {
                                            "Name": "i",
                                            "Type": "int",
                                            "Kind": "Use",
                                            "UseLine": 126,
                                            "UseKind": "LocalReference",
                                            "AssignedTo": "k",
                                            "Value": null,
                                            "Operation": "IdentifierName",
                                            "VariablesList": []
                                          }
                                        ]
                                      },
                                      {
                                        "Name": "k",
                                        "Type": "int",
                                        "Kind": "Use",
                                        "UseLine": 126,
                                        "UseKind": "LocalReference",
                                        "AssignedTo": "k",
                                        "Value": null,
                                        "Operation": "IdentifierName",
                                        "VariablesList": []
                                      }
                                    ]
                                  }
                                }
                              ],
                              "WhileBlocks": [],
                              "ForBlocks": [],
                              "IfBlocks": [],
                              "SwitchBlocks": [],
                              "ForEachBlocks": [],
                              "ElseBlocks": [],
                              "TryBlocks": [],
                              "Returns": []
                            }
                          ],
                          "ForEachBlocks": [],
                          "ForBlocks": [],
                          "IfBlocks": [],
                          "SwitchBlocks": [],
                          "Returns": [],
                          "TryBlocks": [],
                          "ExpressionBody": null,
                          "Line": 116
                        }
                      ],
                      "Fields": [
                        {
                          "Name": "isJumping",
                          "Type": "bool",
                          "Modifiers": [
                            "protected"
                          ],
                          "Assignment": "false",
                          "Attributes": [],
                          "FullName": "Test.Input.TestInput.StateManager.isJumping",
                          "Line": 36
                        },
                        {
                          "Name": "noDamage",
                          "Type": "bool",
                          "Modifiers": [
                            "protected"
                          ],
                          "Assignment": "false",
                          "Attributes": [],
                          "FullName": "Test.Input.TestInput.StateManager.noDamage",
                          "Line": 37
                        },
                        {
                          "Name": "dir",
                          "Type": "int",
                          "Modifiers": [
                            "protected"
                          ],
                          "Assignment": "0",
                          "Attributes": [],
                          "FullName": "Test.Input.TestInput.StateManager.dir",
                          "Line": 38
                        },
                        {
                          "Name": "forward",
                          "Type": "bool",
                          "Modifiers": [
                            "protected"
                          ],
                          "Assignment": "false",
                          "Attributes": [],
                          "FullName": "Test.Input.TestInput.StateManager.forward",
                          "Line": 39
                        },
                        {
                          "Name": "backward",
                          "Type": "bool",
                          "Modifiers": [
                            "protected"
                          ],
                          "Assignment": "false",
                          "Attributes": [],
                          "FullName": "Test.Input.TestInput.StateManager.backward",
                          "Line": 40
                        },
                        {
                          "Name": "left",
                          "Type": "bool",
                          "Modifiers": [
                            "protected"
                          ],
                          "Assignment": "false",
                          "Attributes": [],
                          "FullName": "Test.Input.TestInput.StateManager.left",
                          "Line": 41
                        },
                        {
                          "Name": "right",
                          "Type": "bool",
                          "Modifiers": [
                            "protected"
                          ],
                          "Assignment": "false",
                          "Attributes": [],
                          "FullName": "Test.Input.TestInput.StateManager.right",
                          "Line": 42
                        },
                        {
                          "Name": "s",
                          "Type": "SphereCollider",
                          "Modifiers": [],
                          "Assignment": null,
                          "Attributes": [
                            "SerializeField"
                          ],
                          "FullName": "Test.Input.TestInput.StateManager.s",
                          "Line": 43
                        },
                        {
                          "Name": "spe",
                          "Type": "SpehereManager",
                          "Modifiers": [],
                          "Assignment": null,
                          "Attributes": [
                            "SerializeField"
                          ],
                          "FullName": "Test.Input.TestInput.StateManager.spe",
                          "Line": 44
                        },
                        {
                          "Name": "mesh",
                          "Type": "Inputs",
                          "Modifiers": [],
                          "Assignment": null,
                          "Attributes": [],
                          "FullName": "Test.Input.TestInput.StateManager.mesh",
                          "Line": 45
                        }
                      ],
                      "Constructors": [],
                      "Attributes": [],
                      "Line": 34
                    }
                  ],
                  "Usings": [
                    {
                      "Name": "UnityEngine.Rendering",
                      "Line": 29
                    },
                    {
                      "Name": "System.Linq",
                      "Line": 30
                    },
                    {
                      "Name": "System",
                      "Line": 31
                    },
                    {
                      "Name": "Sphere",
                      "Line": 32
                    }
                  ],
                  "Line": 27
                }
              ],
              "Classes": [
                {
                  "Name": "Prova",
                  "FullName": "Test.Input.Prova",
                  "FullInheritanceName": "a.Inputs",
                  "InnerClasses": [],
                  "ClassConstraints": [],
                  "Modifiers": [
                    "public",
                    "abstract"
                  ],
                  "Inheritance": "a.Inputs",
                  "Interfaces": [],
                  "Properties": [
                    {
                      "Name": "O",
                      "Type": "GameObject",
                      "Modifiers": [
                        "public",
                        "abstract"
                      ],
                      "Attributes": [],
                      "IsAutoProperty": true,
                      "Initializer": false,
                      "InitializerValue": null,
                      "Accessor": [
                        {
                          "AccessorType": "get",
                          "HasBody": false,
                          "HasExpressionBody": false,
                          "IsEmpty": true,
                          "Modifiers": [],
                          "Attributes": [],
                          "ReturnType": null,
                          "Parameters": [],
                          "Invocations": [],
                          "Variables": [],
                          "Statements": [],
                          "WhileBlocks": [],
                          "ForEachBlocks": [],
                          "ForBlocks": [],
                          "IfBlocks": [],
                          "SwitchBlocks": [],
                          "Returns": [],
                          "TryBlocks": [],
                          "ExpressionBody": null,
                          "Line": 19
                        },
                        {
                          "AccessorType": "set",
                          "HasBody": false,
                          "HasExpressionBody": false,
                          "IsEmpty": true,
                          "Modifiers": [],
                          "Attributes": [],
                          "ReturnType": null,
                          "Parameters": [],
                          "Invocations": [],
                          "Variables": [],
                          "Statements": [],
                          "WhileBlocks": [],
                          "ForEachBlocks": [],
                          "ForBlocks": [],
                          "IfBlocks": [],
                          "SwitchBlocks": [],
                          "Returns": [],
                          "TryBlocks": [],
                          "ExpressionBody": null,
                          "Line": 19
                        }
                      ],
                      "HasExpressionBody": false,
                      "ExpressionBody": null,
                      "Line": 19
                    },
                    {
                      "Name": "Name",
                      "Type": "string",
                      "Modifiers": [
                        "public",
                        "abstract"
                      ],
                      "Attributes": [],
                      "IsAutoProperty": true,
                      "Initializer": false,
                      "InitializerValue": null,
                      "Accessor": [
                        {
                          "AccessorType": "get",
                          "HasBody": false,
                          "HasExpressionBody": false,
                          "IsEmpty": true,
                          "Modifiers": [],
                          "Attributes": [],
                          "ReturnType": null,
                          "Parameters": [],
                          "Invocations": [],
                          "Variables": [],
                          "Statements": [],
                          "WhileBlocks": [],
                          "ForEachBlocks": [],
                          "ForBlocks": [],
                          "IfBlocks": [],
                          "SwitchBlocks": [],
                          "Returns": [],
                          "TryBlocks": [],
                          "ExpressionBody": null,
                          "Line": 20
                        }
                      ],
                      "HasExpressionBody": false,
                      "ExpressionBody": null,
                      "Line": 20
                    },
                    {
                      "Name": "Description",
                      "Type": "string",
                      "Modifiers": [
                        "public",
                        "abstract"
                      ],
                      "Attributes": [],
                      "IsAutoProperty": true,
                      "Initializer": false,
                      "InitializerValue": null,
                      "Accessor": [
                        {
                          "AccessorType": "get",
                          "HasBody": false,
                          "HasExpressionBody": false,
                          "IsEmpty": true,
                          "Modifiers": [],
                          "Attributes": [],
                          "ReturnType": null,
                          "Parameters": [],
                          "Invocations": [],
                          "Variables": [],
                          "Statements": [],
                          "WhileBlocks": [],
                          "ForEachBlocks": [],
                          "ForBlocks": [],
                          "IfBlocks": [],
                          "SwitchBlocks": [],
                          "Returns": [],
                          "TryBlocks": [],
                          "ExpressionBody": null,
                          "Line": 21
                        }
                      ],
                      "HasExpressionBody": false,
                      "ExpressionBody": null,
                      "Line": 21
                    }
                  ],
                  "Methods": [
                    {
                      "HasBody": false,
                      "HasExpressionBody": false,
                      "Name": "Print",
                      "IsEmpty": true,
                      "FullName": "Test.Input.Prova.Print(int, string)",
                      "Modifiers": [
                        "public",
                        "abstract"
                      ],
                      "Attributes": [],
                      "ReturnType": "void",
                      "Parameters": [
                        {
                          "Name": "x",
                          "Type": "int",
                          "Assignment": null,
                          "Attributes": []
                        },
                        {
                          "Name": "j",
                          "Type": "string",
                          "Assignment": null,
                          "Attributes": []
                        }
                      ],
                      "Invocations": [],
                      "Variables": [],
                      "Statements": [],
                      "WhileBlocks": [],
                      "ForEachBlocks": [],
                      "ForBlocks": [],
                      "IfBlocks": [],
                      "SwitchBlocks": [],
                      "Returns": [],
                      "TryBlocks": [],
                      "ExpressionBody": null,
                      "Line": 23
                    },
                    {
                      "HasBody": false,
                      "HasExpressionBody": false,
                      "Name": "Update",
                      "IsEmpty": true,
                      "FullName": "Test.Input.Prova.Update(UnityEngine.GameObject)",
                      "Modifiers": [
                        "public",
                        "abstract"
                      ],
                      "Attributes": [],
                      "ReturnType": "void",
                      "Parameters": [
                        {
                          "Name": "o",
                          "Type": "GameObject",
                          "Assignment": null,
                          "Attributes": []
                        }
                      ],
                      "Invocations": [],
                      "Variables": [],
                      "Statements": [],
                      "WhileBlocks": [],
                      "ForEachBlocks": [],
                      "ForBlocks": [],
                      "IfBlocks": [],
                      "SwitchBlocks": [],
                      "Returns": [],
                      "TryBlocks": [],
                      "ExpressionBody": null,
                      "Line": 24
                    }
                  ],
                  "Fields": [
                    {
                      "Name": "o",
                      "Type": "GameObject",
                      "Modifiers": [
                        "protected"
                      ],
                      "Assignment": null,
                      "Attributes": [],
                      "FullName": "Test.Input.Prova.o",
                      "Line": 17
                    }
                  ],
                  "Constructors": [],
                  "Attributes": [],
                  "Line": 15
                }
              ],
              "Usings": [],
              "Line": 13
            }
          ],
          "Classes": [],
          "Usings": [
            {
              "Name": "UnityEngine.Animations",
              "Line": 8
            },
            {
              "Name": "System.IO",
              "Line": 9
            }
          ],
          "Line": 6
        }
      ],
      "Classes": [],
      "Usings": [
        {
          "Name": "MyGame",
          "Line": 1
        },
        {
          "Name": "System.Collections",
          "Line": 2
        },
        {
          "Name": "System.Collections.Generic",
          "Line": 3
        },
        {
          "Name": "UnityEngine",
          "Line": 4
        },
        {
          "Name": "a",
          "Line": 5
        }
      ],
      "Line": 1
    },
    {
      "Name": "SuperClass",
      "FileName": "D:\\progetti\\UnityCodeSmellAnalyzer\\example\\UnityProjectExample\\Assets\\Script\\SuperClass.cs",
      "Language": "C#",
      "Interfaces": [],
      "Namespaces": [],
      "Classes": [
        {
          "Name": "SuperClass",
          "FullName": "SuperClass",
          "FullInheritanceName": "UnityEngine.MonoBehaviour",
          "InnerClasses": [],
          "ClassConstraints": [],
          "Modifiers": [
            "public"
          ],
          "Inheritance": "UnityEngine.MonoBehaviour",
          "Interfaces": [],
          "Properties": [],
          "Methods": [
            {
              "HasBody": false,
              "HasExpressionBody": false,
              "Name": "Test",
              "IsEmpty": true,
              "FullName": "SuperClass.Test()",
              "Modifiers": [
                "virtual",
                "public"
              ],
              "Attributes": [],
              "ReturnType": "void",
              "Parameters": [],
              "Invocations": [],
              "Variables": [],
              "Statements": [],
              "WhileBlocks": [],
              "ForEachBlocks": [],
              "ForBlocks": [],
              "IfBlocks": [],
              "SwitchBlocks": [],
              "Returns": [],
              "TryBlocks": [],
              "ExpressionBody": null,
              "Line": 7
            },
            {
              "HasBody": false,
              "HasExpressionBody": false,
              "Name": "Test2",
              "IsEmpty": true,
              "FullName": "SuperClass.Test2()",
              "Modifiers": [
                "virtual",
                "public"
              ],
              "Attributes": [],
              "ReturnType": "void",
              "Parameters": [],
              "Invocations": [],
              "Variables": [],
              "Statements": [],
              "WhileBlocks": [],
              "ForEachBlocks": [],
              "ForBlocks": [],
              "IfBlocks": [],
              "SwitchBlocks": [],
              "Returns": [],
              "TryBlocks": [],
              "ExpressionBody": null,
              "Line": 8
            }
          ],
          "Fields": [],
          "Constructors": [],
          "Attributes": [],
          "Line": 5
        }
      ],
      "Usings": [
        {
          "Name": "System.Collections",
          "Line": 1
        },
        {
          "Name": "System.Collections.Generic",
          "Line": 2
        },
        {
          "Name": "UnityEngine",
          "Line": 3
        }
      ],
      "Line": 1
    }
  ]
}