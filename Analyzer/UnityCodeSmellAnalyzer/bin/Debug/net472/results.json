[
  {
    "Name": "Activable",
    "Interfaces": [],
    "Namespaces": [
      {
        "Line": 4,
        "Name": "Character",
        "Interfaces": [],
        "Namespaces": [],
        "Classes": [
          {
            "Name": "Activable",
            "Modifier": "public",
            "Inheritance": "UAComponent",
            "Line": 6,
            "Interfaces": [],
            "Properties": [],
            "Methods": [
              {
                "Name": "LoadMe",
                "Modifiers": [],
                "Line": 21,
                "Parameters": [
                  {
                    "Name": "path",
                    "Type": "string",
                    "Assignment": null
                  }
                ],
                "Invocations": [],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            //base.LoadMe(path);\r\n        }",
                    "Line": 22
                  }
                ]
              },
              {
                "Name": "Activate",
                "Modifiers": [],
                "Line": 26,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 29,
                    "Name": "p",
                    "FullName": "Character.ComponentManager.AddComponent(Character.UAComponent)",
                    "Parameters": []
                  },
                  {
                    "Line": 30,
                    "Name": "componentId",
                    "FullName": "Character.ComponentManager.RemoveComponent(string)",
                    "Parameters": []
                  }
                ],
                "Variables": [
                  {
                    "Name": "p",
                    "Type": "Powerup",
                    "Assignment": "new Powerup(powerupName, componentPath, cm)",
                    "Line": 28
                  }
                ],
                "Statements": [
                  {
                    "Statement": "{\r\n            Powerup p = new Powerup(powerupName, componentPath, cm);\r\n            cm.AddComponent(p);\r\n            cm.RemoveComponent(componentId);\r\n        }",
                    "Line": 27
                  },
                  {
                    "Statement": "Powerup p = new Powerup(powerupName, componentPath, cm);",
                    "Line": 28
                  },
                  {
                    "Statement": "cm.AddComponent(p);",
                    "Line": 29
                  },
                  {
                    "Statement": "cm.RemoveComponent(componentId);",
                    "Line": 30
                  }
                ]
              }
            ],
            "Fields": []
          }
        ],
        "Usings": []
      }
    ],
    "Classes": [],
    "Usings": [
      {
        "Name": "System.Collections",
        "Line": 0
      },
      {
        "Name": "System.Collections.Generic",
        "Line": 1
      },
      {
        "Name": "UnityEngine",
        "Line": 2
      }
    ]
  },
  {
    "Name": "ActivableManager",
    "Interfaces": [],
    "Namespaces": [
      {
        "Line": 6,
        "Name": "Character",
        "Interfaces": [],
        "Namespaces": [],
        "Classes": [
          {
            "Name": "ActivableManager",
            "Modifier": "public",
            "Inheritance": "MonoBehaviour",
            "Line": 8,
            "Interfaces": [],
            "Properties": [],
            "Methods": [
              {
                "Name": "Awake",
                "Modifiers": [],
                "Line": 18,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 20,
                    "Name": "",
                    "FullName": "UnityEngine.Component.GetComponent<Character.ComponentManager>()",
                    "Parameters": []
                  },
                  {
                    "Line": 21,
                    "Name": "",
                    "FullName": "UnityEngine.Component.GetComponent<CharacterStatus>()",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            cm = GetComponent<ComponentManager>();\r\n            cs = GetComponent<CharacterStatus>();\r\n        }",
                    "Line": 19
                  },
                  {
                    "Statement": "cm = GetComponent<ComponentManager>();",
                    "Line": 20
                  },
                  {
                    "Statement": "cs = GetComponent<CharacterStatus>();",
                    "Line": 21
                  }
                ]
              },
              {
                "Name": "FixedUpdate",
                "Modifiers": [],
                "Line": 24,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 26,
                    "Name": "",
                    "FullName": "Character.ComponentManager.FilterByType<Character.Activable>()",
                    "Parameters": []
                  },
                  {
                    "Line": 28,
                    "Name": "",
                    "FullName": "Character.ActivableManager.CheckTimer()",
                    "Parameters": []
                  },
                  {
                    "Line": 29,
                    "Name": "",
                    "FullName": "Character.ActivableManager.CheckActivablesBound()",
                    "Parameters": []
                  },
                  {
                    "Line": 30,
                    "Name": "",
                    "FullName": "Character.ActivableManager.Activate()",
                    "Parameters": []
                  },
                  {
                    "Line": 31,
                    "Name": "",
                    "FullName": "Character.ActivableManager.NextActivable()",
                    "Parameters": []
                  },
                  {
                    "Line": 32,
                    "Name": "",
                    "FullName": "Character.ActivableManager.PreviousActivable()",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            activables = cm.FilterByType<Activable>();\r\n            if (activables.Count <= 0) return;\r\n            CheckTimer();\r\n            CheckActivablesBound();\r\n            if (cs.Activate) Activate();\r\n            else if (cs.ActivateNext) NextActivable();\r\n            else if (cs.ActivatePre) PreviousActivable();\r\n        }",
                    "Line": 25
                  },
                  {
                    "Statement": "activables = cm.FilterByType<Activable>();",
                    "Line": 26
                  },
                  {
                    "Statement": "if (activables.Count <= 0) return;",
                    "Line": 27
                  },
                  {
                    "Statement": "return;",
                    "Line": 27
                  },
                  {
                    "Statement": "CheckTimer();",
                    "Line": 28
                  },
                  {
                    "Statement": "CheckActivablesBound();",
                    "Line": 29
                  },
                  {
                    "Statement": "if (cs.Activate) Activate();\r\n            else if (cs.ActivateNext) NextActivable();\r\n            else if (cs.ActivatePre) PreviousActivable();",
                    "Line": 30
                  },
                  {
                    "Statement": "Activate();",
                    "Line": 30
                  },
                  {
                    "Statement": "if (cs.ActivateNext) NextActivable();\r\n            else if (cs.ActivatePre) PreviousActivable();",
                    "Line": 31
                  },
                  {
                    "Statement": "NextActivable();",
                    "Line": 31
                  },
                  {
                    "Statement": "if (cs.ActivatePre) PreviousActivable();",
                    "Line": 32
                  },
                  {
                    "Statement": "PreviousActivable();",
                    "Line": 32
                  }
                ]
              },
              {
                "Name": "CheckTimer",
                "Modifiers": [],
                "Line": 35,
                "Parameters": [],
                "Invocations": [],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            timer -= Time.deltaTime;    \r\n            if (timer <= 0)\r\n            {\r\n                timer = 0;\r\n                action = true;\r\n            }\r\n            else  action = false;\r\n        }",
                    "Line": 36
                  },
                  {
                    "Statement": "timer -= Time.deltaTime;",
                    "Line": 37
                  },
                  {
                    "Statement": "if (timer <= 0)\r\n            {\r\n                timer = 0;\r\n                action = true;\r\n            }\r\n            else  action = false;",
                    "Line": 38
                  },
                  {
                    "Statement": "{\r\n                timer = 0;\r\n                action = true;\r\n            }",
                    "Line": 39
                  },
                  {
                    "Statement": "timer = 0;",
                    "Line": 40
                  },
                  {
                    "Statement": "action = true;",
                    "Line": 41
                  },
                  {
                    "Statement": "action = false;",
                    "Line": 43
                  }
                ]
              },
              {
                "Name": "NextActivable",
                "Modifiers": [],
                "Line": 46,
                "Parameters": [],
                "Invocations": [],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            if (action)\r\n            {\r\n                current += 1;\r\n                if (current >= activables.Count) current = 0;\r\n                timer = interval;\r\n            }\r\n            \r\n        }",
                    "Line": 47
                  },
                  {
                    "Statement": "if (action)\r\n            {\r\n                current += 1;\r\n                if (current >= activables.Count) current = 0;\r\n                timer = interval;\r\n            }",
                    "Line": 48
                  },
                  {
                    "Statement": "{\r\n                current += 1;\r\n                if (current >= activables.Count) current = 0;\r\n                timer = interval;\r\n            }",
                    "Line": 49
                  },
                  {
                    "Statement": "current += 1;",
                    "Line": 50
                  },
                  {
                    "Statement": "if (current >= activables.Count) current = 0;",
                    "Line": 51
                  },
                  {
                    "Statement": "current = 0;",
                    "Line": 51
                  },
                  {
                    "Statement": "timer = interval;",
                    "Line": 52
                  }
                ]
              },
              {
                "Name": "PreviousActivable",
                "Modifiers": [],
                "Line": 57,
                "Parameters": [],
                "Invocations": [],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            if (action)\r\n            {\r\n                current -= 1;\r\n                if (current < 0) current = activables.Count - 1;\r\n                timer = interval;\r\n            }\r\n        }",
                    "Line": 58
                  },
                  {
                    "Statement": "if (action)\r\n            {\r\n                current -= 1;\r\n                if (current < 0) current = activables.Count - 1;\r\n                timer = interval;\r\n            }",
                    "Line": 59
                  },
                  {
                    "Statement": "{\r\n                current -= 1;\r\n                if (current < 0) current = activables.Count - 1;\r\n                timer = interval;\r\n            }",
                    "Line": 60
                  },
                  {
                    "Statement": "current -= 1;",
                    "Line": 61
                  },
                  {
                    "Statement": "if (current < 0) current = activables.Count - 1;",
                    "Line": 62
                  },
                  {
                    "Statement": "current = activables.Count - 1;",
                    "Line": 62
                  },
                  {
                    "Statement": "timer = interval;",
                    "Line": 63
                  }
                ]
              },
              {
                "Name": "Activate",
                "Modifiers": [],
                "Line": 67,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 71,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  },
                  {
                    "Line": 71,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            if (action)\r\n            {\r\n                activables.ElementAt(current).Value.Activate();\r\n                timer = interval;\r\n            }\r\n        }",
                    "Line": 68
                  },
                  {
                    "Statement": "if (action)\r\n            {\r\n                activables.ElementAt(current).Value.Activate();\r\n                timer = interval;\r\n            }",
                    "Line": 69
                  },
                  {
                    "Statement": "{\r\n                activables.ElementAt(current).Value.Activate();\r\n                timer = interval;\r\n            }",
                    "Line": 70
                  },
                  {
                    "Statement": "activables.ElementAt(current).Value.Activate();",
                    "Line": 71
                  },
                  {
                    "Statement": "timer = interval;",
                    "Line": 72
                  }
                ]
              },
              {
                "Name": "CheckActivablesBound",
                "Modifiers": [],
                "Line": 76,
                "Parameters": [],
                "Invocations": [],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            if (current >= activables.Count) current = activables.Count - 1;\r\n        }",
                    "Line": 77
                  },
                  {
                    "Statement": "if (current >= activables.Count) current = activables.Count - 1;",
                    "Line": 78
                  },
                  {
                    "Statement": "current = activables.Count - 1;",
                    "Line": 78
                  }
                ]
              },
              {
                "Name": "GetCurrent",
                "Modifiers": [],
                "Line": 81,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 85,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            try\r\n            {\r\n                return activables.ElementAt(current).Key;\r\n            }\r\n            catch (Exception) { return \"\"; }\r\n        }",
                    "Line": 82
                  },
                  {
                    "Statement": "try\r\n            {\r\n                return activables.ElementAt(current).Key;\r\n            }\r\n            catch (Exception) { return \"\"; }",
                    "Line": 83
                  },
                  {
                    "Statement": "{\r\n                return activables.ElementAt(current).Key;\r\n            }",
                    "Line": 84
                  },
                  {
                    "Statement": "return activables.ElementAt(current).Key;",
                    "Line": 85
                  },
                  {
                    "Statement": "{ return \"\"; }",
                    "Line": 87
                  },
                  {
                    "Statement": "return \"\";",
                    "Line": 87
                  }
                ]
              },
              {
                "Name": "GetActivablesNames",
                "Modifiers": [],
                "Line": 90,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 96,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  },
                  {
                    "Line": 97,
                    "Name": "c",
                    "FullName": "System.Collections.Generic.List<string>.Add(string)",
                    "Parameters": []
                  },
                  {
                    "Line": 101,
                    "Name": "\"\"",
                    "FullName": "System.Collections.Generic.List<string>.Add(string)",
                    "Parameters": []
                  },
                  {
                    "Line": 105,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  },
                  {
                    "Line": 105,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  },
                  {
                    "Line": 109,
                    "Name": "\"\"",
                    "FullName": "System.Collections.Generic.List<string>.Add(string)",
                    "Parameters": []
                  },
                  {
                    "Line": 113,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  },
                  {
                    "Line": 113,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  }
                ],
                "Variables": [
                  {
                    "Name": "names",
                    "Type": "List<string>",
                    "Assignment": "new List<string>()",
                    "Line": 92
                  },
                  {
                    "Name": "count",
                    "Type": "int",
                    "Assignment": "activables.Count",
                    "Line": 93
                  },
                  {
                    "Name": "c",
                    "Type": "string",
                    "Assignment": "activables.Keys.ElementAt(current)",
                    "Line": 96
                  }
                ],
                "Statements": [
                  {
                    "Statement": "{\r\n            List<string> names = new List<string>();\r\n            int count = activables.Count;\r\n            if (count > 0)\r\n            {\r\n                string c = activables.Keys.ElementAt(current);\r\n                names.Add(c);\r\n                //next\r\n                if (current >= count - 1)\r\n                {\r\n                    names.Add(\"\");\r\n                }\r\n                else\r\n                {\r\n                    names.Add(activables.Keys.ElementAt(current + 1));\r\n                }\r\n                if (current <= 0)\r\n                {\r\n                    names.Add(\"\");\r\n                }\r\n                else\r\n                {\r\n                    names.Add(activables.Keys.ElementAt(current - 1));\r\n                }\r\n\r\n            }\r\n            return names;\r\n        }",
                    "Line": 91
                  },
                  {
                    "Statement": "List<string> names = new List<string>();",
                    "Line": 92
                  },
                  {
                    "Statement": "int count = activables.Count;",
                    "Line": 93
                  },
                  {
                    "Statement": "if (count > 0)\r\n            {\r\n                string c = activables.Keys.ElementAt(current);\r\n                names.Add(c);\r\n                //next\r\n                if (current >= count - 1)\r\n                {\r\n                    names.Add(\"\");\r\n                }\r\n                else\r\n                {\r\n                    names.Add(activables.Keys.ElementAt(current + 1));\r\n                }\r\n                if (current <= 0)\r\n                {\r\n                    names.Add(\"\");\r\n                }\r\n                else\r\n                {\r\n                    names.Add(activables.Keys.ElementAt(current - 1));\r\n                }\r\n\r\n            }",
                    "Line": 94
                  },
                  {
                    "Statement": "{\r\n                string c = activables.Keys.ElementAt(current);\r\n                names.Add(c);\r\n                //next\r\n                if (current >= count - 1)\r\n                {\r\n                    names.Add(\"\");\r\n                }\r\n                else\r\n                {\r\n                    names.Add(activables.Keys.ElementAt(current + 1));\r\n                }\r\n                if (current <= 0)\r\n                {\r\n                    names.Add(\"\");\r\n                }\r\n                else\r\n                {\r\n                    names.Add(activables.Keys.ElementAt(current - 1));\r\n                }\r\n\r\n            }",
                    "Line": 95
                  },
                  {
                    "Statement": "string c = activables.Keys.ElementAt(current);",
                    "Line": 96
                  },
                  {
                    "Statement": "names.Add(c);",
                    "Line": 97
                  },
                  {
                    "Statement": "if (current >= count - 1)\r\n                {\r\n                    names.Add(\"\");\r\n                }\r\n                else\r\n                {\r\n                    names.Add(activables.Keys.ElementAt(current + 1));\r\n                }",
                    "Line": 99
                  },
                  {
                    "Statement": "{\r\n                    names.Add(\"\");\r\n                }",
                    "Line": 100
                  },
                  {
                    "Statement": "names.Add(\"\");",
                    "Line": 101
                  },
                  {
                    "Statement": "{\r\n                    names.Add(activables.Keys.ElementAt(current + 1));\r\n                }",
                    "Line": 104
                  },
                  {
                    "Statement": "names.Add(activables.Keys.ElementAt(current + 1));",
                    "Line": 105
                  },
                  {
                    "Statement": "if (current <= 0)\r\n                {\r\n                    names.Add(\"\");\r\n                }\r\n                else\r\n                {\r\n                    names.Add(activables.Keys.ElementAt(current - 1));\r\n                }",
                    "Line": 107
                  },
                  {
                    "Statement": "{\r\n                    names.Add(\"\");\r\n                }",
                    "Line": 108
                  },
                  {
                    "Statement": "names.Add(\"\");",
                    "Line": 109
                  },
                  {
                    "Statement": "{\r\n                    names.Add(activables.Keys.ElementAt(current - 1));\r\n                }",
                    "Line": 112
                  },
                  {
                    "Statement": "names.Add(activables.Keys.ElementAt(current - 1));",
                    "Line": 113
                  },
                  {
                    "Statement": "return names;",
                    "Line": 117
                  }
                ]
              }
            ],
            "Fields": []
          }
        ],
        "Usings": []
      }
    ],
    "Classes": [],
    "Usings": [
      {
        "Name": "System.Collections",
        "Line": 0
      },
      {
        "Name": "System.Collections.Generic",
        "Line": 1
      },
      {
        "Name": "UnityEngine",
        "Line": 2
      },
      {
        "Name": "System.Linq",
        "Line": 3
      },
      {
        "Name": "System",
        "Line": 4
      }
    ]
  },
  {
    "Name": "ActivableUiManager",
    "Interfaces": [],
    "Namespaces": [
      {
        "Line": 6,
        "Name": "Character",
        "Interfaces": [],
        "Namespaces": [],
        "Classes": [
          {
            "Name": "ActivableUiManager",
            "Modifier": "public",
            "Inheritance": "MonoBehaviour",
            "Line": 8,
            "Interfaces": [],
            "Properties": [],
            "Methods": [
              {
                "Name": "Start",
                "Modifiers": [],
                "Line": 23,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 25,
                    "Name": "",
                    "FullName": "Character.ActivableUiManager.LoadActivables()",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            LoadActivables(); //istanza i modelli degli attivabili raccolti \r\n            \r\n        }",
                    "Line": 24
                  },
                  {
                    "Statement": "LoadActivables();",
                    "Line": 25
                  }
                ]
              },
              {
                "Name": "FixedUpdate",
                "Modifiers": [],
                "Line": 29,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 31,
                    "Name": "",
                    "FullName": "Character.ActivableUiManager.SetCurrentModelsName()",
                    "Parameters": []
                  },
                  {
                    "Line": 32,
                    "Name": "",
                    "FullName": "Character.ActivableUiManager.ShowInGui()",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            SetCurrentModelsName();\r\n            ShowInGui();\r\n        }",
                    "Line": 30
                  },
                  {
                    "Statement": "SetCurrentModelsName();",
                    "Line": 31
                  },
                  {
                    "Statement": "ShowInGui();",
                    "Line": 32
                  }
                ]
              },
              {
                "Name": "LoadActivables",
                "Modifiers": [],
                "Line": 35,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 37,
                    "Name": "Application.streamingAssetsPath, activableImagesPath",
                    "FullName": "System.IO.Path.Combine(string, string)",
                    "Parameters": []
                  },
                  {
                    "Line": 38,
                    "Name": "folderPath",
                    "FullName": "Character.ActivableUiManager.CheckDirectory(string)",
                    "Parameters": []
                  },
                  {
                    "Line": 39,
                    "Name": "folderPath, \"*.png\"",
                    "FullName": "System.IO.Directory.GetFiles(string, string)",
                    "Parameters": []
                  },
                  {
                    "Line": 43,
                    "Name": "t, File.ReadAllBytes(filePaths[i])",
                    "FullName": "UnityEngine.ImageConversion.LoadImage(UnityEngine.Texture2D, byte[])",
                    "Parameters": []
                  },
                  {
                    "Line": 43,
                    "Name": "filePaths[i]",
                    "FullName": "System.IO.File.ReadAllBytes(string)",
                    "Parameters": []
                  },
                  {
                    "Line": 44,
                    "Name": "\".png\", \"\"",
                    "FullName": "string.Replace(string, string)",
                    "Parameters": []
                  },
                  {
                    "Line": 44,
                    "Name": "filePaths[i]",
                    "FullName": "System.IO.Path.GetFileName(string)",
                    "Parameters": []
                  },
                  {
                    "Line": 45,
                    "Name": "t, new Rect(0, 0, t.width, t.height), Vector2.zero, 100f",
                    "FullName": "UnityEngine.Sprite.Create(UnityEngine.Texture2D, UnityEngine.Rect, UnityEngine.Vector2, float)",
                    "Parameters": []
                  }
                ],
                "Variables": [
                  {
                    "Name": "folderPath",
                    "Type": "string",
                    "Assignment": "Path.Combine(Application.streamingAssetsPath, activableImagesPath)",
                    "Line": 37
                  },
                  {
                    "Name": "filePaths",
                    "Type": "string[]",
                    "Assignment": "Directory.GetFiles(folderPath, \"*.png\")",
                    "Line": 39
                  },
                  {
                    "Name": "i",
                    "Type": "int",
                    "Assignment": "0",
                    "Line": 40
                  },
                  {
                    "Name": "t",
                    "Type": "Texture2D",
                    "Assignment": "new Texture2D(2,2)",
                    "Line": 42
                  },
                  {
                    "Name": "name",
                    "Type": "string",
                    "Assignment": "Path.GetFileName(filePaths[i]).Replace(\".png\", \"\")",
                    "Line": 44
                  },
                  {
                    "Name": "sprite",
                    "Type": "Sprite",
                    "Assignment": "Sprite.Create(t, new Rect(0, 0, t.width, t.height), Vector2.zero, 100f)",
                    "Line": 45
                  }
                ],
                "Statements": [
                  {
                    "Statement": "{\r\n            string folderPath = Path.Combine(Application.streamingAssetsPath, activableImagesPath);\r\n            if (!CheckDirectory(folderPath))return;  //Get path of folder\r\n            string[] filePaths = Directory.GetFiles(folderPath, \"*.png\");\r\n            for(int i = 0; i < filePaths.Length; i++) \r\n            {\r\n                Texture2D t = new Texture2D(2,2);\r\n                ImageConversion.LoadImage(t, File.ReadAllBytes(filePaths[i]));\r\n                string name = Path.GetFileName(filePaths[i]).Replace(\".png\", \"\");\r\n                Sprite sprite = Sprite.Create(t, new Rect(0, 0, t.width, t.height), Vector2.zero, 100f);\r\n                images[name] = sprite;\r\n            } \r\n        }",
                    "Line": 36
                  },
                  {
                    "Statement": "string folderPath = Path.Combine(Application.streamingAssetsPath, activableImagesPath);",
                    "Line": 37
                  },
                  {
                    "Statement": "if (!CheckDirectory(folderPath))return;",
                    "Line": 38
                  },
                  {
                    "Statement": "return;",
                    "Line": 38
                  },
                  {
                    "Statement": "string[] filePaths = Directory.GetFiles(folderPath, \"*.png\");",
                    "Line": 39
                  },
                  {
                    "Statement": "for(int i = 0; i < filePaths.Length; i++) \r\n            {\r\n                Texture2D t = new Texture2D(2,2);\r\n                ImageConversion.LoadImage(t, File.ReadAllBytes(filePaths[i]));\r\n                string name = Path.GetFileName(filePaths[i]).Replace(\".png\", \"\");\r\n                Sprite sprite = Sprite.Create(t, new Rect(0, 0, t.width, t.height), Vector2.zero, 100f);\r\n                images[name] = sprite;\r\n            }",
                    "Line": 40
                  },
                  {
                    "Statement": "{\r\n                Texture2D t = new Texture2D(2,2);\r\n                ImageConversion.LoadImage(t, File.ReadAllBytes(filePaths[i]));\r\n                string name = Path.GetFileName(filePaths[i]).Replace(\".png\", \"\");\r\n                Sprite sprite = Sprite.Create(t, new Rect(0, 0, t.width, t.height), Vector2.zero, 100f);\r\n                images[name] = sprite;\r\n            }",
                    "Line": 41
                  },
                  {
                    "Statement": "Texture2D t = new Texture2D(2,2);",
                    "Line": 42
                  },
                  {
                    "Statement": "ImageConversion.LoadImage(t, File.ReadAllBytes(filePaths[i]));",
                    "Line": 43
                  },
                  {
                    "Statement": "string name = Path.GetFileName(filePaths[i]).Replace(\".png\", \"\");",
                    "Line": 44
                  },
                  {
                    "Statement": "Sprite sprite = Sprite.Create(t, new Rect(0, 0, t.width, t.height), Vector2.zero, 100f);",
                    "Line": 45
                  },
                  {
                    "Statement": "images[name] = sprite;",
                    "Line": 46
                  }
                ]
              },
              {
                "Name": "SetCurrentModelsName",
                "Modifiers": [],
                "Line": 50,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 52,
                    "Name": "",
                    "FullName": "Character.ActivableManager.GetActivablesNames()",
                    "Parameters": []
                  }
                ],
                "Variables": [
                  {
                    "Name": "names",
                    "Type": "List<string>",
                    "Assignment": "manager.GetActivablesNames()",
                    "Line": 52
                  }
                ],
                "Statements": [
                  {
                    "Statement": "{\r\n            List<string> names = manager.GetActivablesNames();\r\n            if(names.Count <= 0)\r\n            {\r\n                //Debug.Log(\"No activable\");\r\n                curr = \"\";\r\n                pre = \"\";\r\n                next = \"\";\r\n            }\r\n            else\r\n            {\r\n                curr = names[0];\r\n                next = names[1];\r\n                pre = names[2];\r\n            }\r\n\r\n        }",
                    "Line": 51
                  },
                  {
                    "Statement": "List<string> names = manager.GetActivablesNames();",
                    "Line": 52
                  },
                  {
                    "Statement": "if(names.Count <= 0)\r\n            {\r\n                //Debug.Log(\"No activable\");\r\n                curr = \"\";\r\n                pre = \"\";\r\n                next = \"\";\r\n            }\r\n            else\r\n            {\r\n                curr = names[0];\r\n                next = names[1];\r\n                pre = names[2];\r\n            }",
                    "Line": 53
                  },
                  {
                    "Statement": "{\r\n                //Debug.Log(\"No activable\");\r\n                curr = \"\";\r\n                pre = \"\";\r\n                next = \"\";\r\n            }",
                    "Line": 54
                  },
                  {
                    "Statement": "curr = \"\";",
                    "Line": 56
                  },
                  {
                    "Statement": "pre = \"\";",
                    "Line": 57
                  },
                  {
                    "Statement": "next = \"\";",
                    "Line": 58
                  },
                  {
                    "Statement": "{\r\n                curr = names[0];\r\n                next = names[1];\r\n                pre = names[2];\r\n            }",
                    "Line": 61
                  },
                  {
                    "Statement": "curr = names[0];",
                    "Line": 62
                  },
                  {
                    "Statement": "next = names[1];",
                    "Line": 63
                  },
                  {
                    "Statement": "pre = names[2];",
                    "Line": 64
                  }
                ]
              },
              {
                "Name": "ShowInGui",
                "Modifiers": [],
                "Line": 69,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 71,
                    "Name": "curr, currContainer",
                    "FullName": "Character.ActivableUiManager.ShowImage(string, UnityEngine.GameObject)",
                    "Parameters": []
                  },
                  {
                    "Line": 72,
                    "Name": "pre, preContainer",
                    "FullName": "Character.ActivableUiManager.ShowImage(string, UnityEngine.GameObject)",
                    "Parameters": []
                  },
                  {
                    "Line": 73,
                    "Name": "next, nextContainer",
                    "FullName": "Character.ActivableUiManager.ShowImage(string, UnityEngine.GameObject)",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            ShowImage(curr, currContainer);\r\n            ShowImage(pre, preContainer);\r\n            ShowImage(next, nextContainer);\r\n        }",
                    "Line": 70
                  },
                  {
                    "Statement": "ShowImage(curr, currContainer);",
                    "Line": 71
                  },
                  {
                    "Statement": "ShowImage(pre, preContainer);",
                    "Line": 72
                  },
                  {
                    "Statement": "ShowImage(next, nextContainer);",
                    "Line": 73
                  }
                ]
              },
              {
                "Name": "ShowImage",
                "Modifiers": [],
                "Line": 76,
                "Parameters": [
                  {
                    "Name": "newImg",
                    "Type": "string",
                    "Assignment": null
                  },
                  {
                    "Name": "container",
                    "Type": "GameObject",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 80,
                    "Name": "newImg",
                    "FullName": "System.Collections.Generic.Dictionary<string, UnityEngine.Sprite>.ContainsKey(string)",
                    "Parameters": []
                  },
                  {
                    "Line": 83,
                    "Name": "true",
                    "FullName": "UnityEngine.GameObject.SetActive(bool)",
                    "Parameters": []
                  },
                  {
                    "Line": 84,
                    "Name": "",
                    "FullName": "UnityEngine.GameObject.GetComponent<Image>()",
                    "Parameters": []
                  },
                  {
                    "Line": 89,
                    "Name": "false",
                    "FullName": "UnityEngine.GameObject.SetActive(bool)",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            //if (images.Count<=0) return;\r\n           \r\n            if (newImg != \"\" && images.ContainsKey(newImg)) \r\n            {\r\n                //Debug.Log(newImg + \"sprite\");\r\n                container.SetActive(true);\r\n                container.GetComponent<Image>().sprite = images[newImg];\r\n            }\r\n            else\r\n            {\r\n                //Debug.Log(\"No sprite\");\r\n                container.SetActive(false);\r\n            }\r\n        }",
                    "Line": 77
                  },
                  {
                    "Statement": "if (newImg != \"\" && images.ContainsKey(newImg)) \r\n            {\r\n                //Debug.Log(newImg + \"sprite\");\r\n                container.SetActive(true);\r\n                container.GetComponent<Image>().sprite = images[newImg];\r\n            }\r\n            else\r\n            {\r\n                //Debug.Log(\"No sprite\");\r\n                container.SetActive(false);\r\n            }",
                    "Line": 80
                  },
                  {
                    "Statement": "{\r\n                //Debug.Log(newImg + \"sprite\");\r\n                container.SetActive(true);\r\n                container.GetComponent<Image>().sprite = images[newImg];\r\n            }",
                    "Line": 81
                  },
                  {
                    "Statement": "container.SetActive(true);",
                    "Line": 83
                  },
                  {
                    "Statement": "container.GetComponent<Image>().sprite = images[newImg];",
                    "Line": 84
                  },
                  {
                    "Statement": "{\r\n                //Debug.Log(\"No sprite\");\r\n                container.SetActive(false);\r\n            }",
                    "Line": 87
                  },
                  {
                    "Statement": "container.SetActive(false);",
                    "Line": 89
                  }
                ]
              },
              {
                "Name": "CheckDirectory",
                "Modifiers": [],
                "Line": 93,
                "Parameters": [
                  {
                    "Name": "path",
                    "Type": "string",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 95,
                    "Name": "path",
                    "FullName": "System.IO.Directory.Exists(string)",
                    "Parameters": []
                  },
                  {
                    "Line": 97,
                    "Name": "\"Directory Not Found\"",
                    "FullName": "UnityEngine.Debug.LogError(object)",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            if (!Directory.Exists(path))\r\n            {\r\n                Debug.LogError(\"Directory Not Found\");\r\n                return false;\r\n            }\r\n            return true;\r\n        }",
                    "Line": 94
                  },
                  {
                    "Statement": "if (!Directory.Exists(path))\r\n            {\r\n                Debug.LogError(\"Directory Not Found\");\r\n                return false;\r\n            }",
                    "Line": 95
                  },
                  {
                    "Statement": "{\r\n                Debug.LogError(\"Directory Not Found\");\r\n                return false;\r\n            }",
                    "Line": 96
                  },
                  {
                    "Statement": "Debug.LogError(\"Directory Not Found\");",
                    "Line": 97
                  },
                  {
                    "Statement": "return false;",
                    "Line": 98
                  },
                  {
                    "Statement": "return true;",
                    "Line": 100
                  }
                ]
              }
            ],
            "Fields": []
          }
        ],
        "Usings": []
      }
    ],
    "Classes": [],
    "Usings": [
      {
        "Name": "System.Collections",
        "Line": 0
      },
      {
        "Name": "System.Collections.Generic",
        "Line": 1
      },
      {
        "Name": "UnityEngine",
        "Line": 2
      },
      {
        "Name": "System.IO",
        "Line": 3
      },
      {
        "Name": "UnityEngine.UI",
        "Line": 4
      }
    ]
  },
  {
    "Name": "AmmoBox",
    "Interfaces": [],
    "Namespaces": [
      {
        "Line": 3,
        "Name": "Weapon",
        "Interfaces": [],
        "Namespaces": [],
        "Classes": [
          {
            "Name": "AmmoBox",
            "Modifier": "public",
            "Inheritance": "MonoBehaviour",
            "Line": 5,
            "Interfaces": [],
            "Properties": [],
            "Methods": [],
            "Fields": []
          }
        ],
        "Usings": []
      }
    ],
    "Classes": [],
    "Usings": [
      {
        "Name": "System.Collections",
        "Line": 0
      },
      {
        "Name": "System.Collections.Generic",
        "Line": 1
      },
      {
        "Name": "UnityEngine",
        "Line": 2
      }
    ]
  },
  {
    "Name": "AnimatorManager",
    "Interfaces": [],
    "Namespaces": [
      {
        "Line": 4,
        "Name": "Character",
        "Interfaces": [],
        "Namespaces": [],
        "Classes": [
          {
            "Name": "AnimatorManager",
            "Modifier": "public",
            "Inheritance": "MonoBehaviour",
            "Line": 6,
            "Interfaces": [],
            "Properties": [],
            "Methods": [
              {
                "Name": "Awake",
                "Modifiers": [],
                "Line": 13,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 17,
                    "Name": "",
                    "FullName": "Character.AnimatorManager.LoadDeathAnimations()",
                    "Parameters": []
                  },
                  {
                    "Line": 18,
                    "Name": "",
                    "FullName": "Character.AnimatorManager.LoadCombatAnimators()",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            playerCombatAnimators = new SortedList<string, RuntimeAnimatorController>();\r\n            playerDeathAnimators = new SortedList<string, RuntimeAnimatorController>();\r\n            LoadDeathAnimations();\r\n            LoadCombatAnimators();\r\n        }",
                    "Line": 14
                  },
                  {
                    "Statement": "playerCombatAnimators = new SortedList<string, RuntimeAnimatorController>();",
                    "Line": 15
                  },
                  {
                    "Statement": "playerDeathAnimators = new SortedList<string, RuntimeAnimatorController>();",
                    "Line": 16
                  },
                  {
                    "Statement": "LoadDeathAnimations();",
                    "Line": 17
                  },
                  {
                    "Statement": "LoadCombatAnimators();",
                    "Line": 18
                  }
                ]
              },
              {
                "Name": "LoadDeathAnimations",
                "Modifiers": [],
                "Line": 21,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 25,
                    "Name": "",
                    "FullName": "string.ToString()",
                    "Parameters": []
                  }
                ],
                "Variables": [
                  {
                    "Name": "name",
                    "Type": "string",
                    "Assignment": "a.name.ToString()",
                    "Line": 25
                  }
                ],
                "Statements": [
                  {
                    "Statement": "{\r\n            foreach (RuntimeAnimatorController a in deathAnimations)\r\n            {\r\n                string name = a.name.ToString();\r\n                playerDeathAnimators[name] = a;\r\n            }\r\n        }",
                    "Line": 22
                  },
                  {
                    "Statement": "foreach (RuntimeAnimatorController a in deathAnimations)\r\n            {\r\n                string name = a.name.ToString();\r\n                playerDeathAnimators[name] = a;\r\n            }",
                    "Line": 23
                  },
                  {
                    "Statement": "{\r\n                string name = a.name.ToString();\r\n                playerDeathAnimators[name] = a;\r\n            }",
                    "Line": 24
                  },
                  {
                    "Statement": "string name = a.name.ToString();",
                    "Line": 25
                  },
                  {
                    "Statement": "playerDeathAnimators[name] = a;",
                    "Line": 26
                  }
                ]
              },
              {
                "Name": "LoadCombatAnimators",
                "Modifiers": [],
                "Line": 30,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 34,
                    "Name": "",
                    "FullName": "string.ToString()",
                    "Parameters": []
                  }
                ],
                "Variables": [
                  {
                    "Name": "name",
                    "Type": "string",
                    "Assignment": "a.name.ToString()",
                    "Line": 34
                  }
                ],
                "Statements": [
                  {
                    "Statement": "{\r\n            foreach (RuntimeAnimatorController a in combatAnimations)\r\n            {\r\n                string name = a.name.ToString();\r\n                playerCombatAnimators[name] = a;\r\n            }\r\n        }",
                    "Line": 31
                  },
                  {
                    "Statement": "foreach (RuntimeAnimatorController a in combatAnimations)\r\n            {\r\n                string name = a.name.ToString();\r\n                playerCombatAnimators[name] = a;\r\n            }",
                    "Line": 32
                  },
                  {
                    "Statement": "{\r\n                string name = a.name.ToString();\r\n                playerCombatAnimators[name] = a;\r\n            }",
                    "Line": 33
                  },
                  {
                    "Statement": "string name = a.name.ToString();",
                    "Line": 34
                  },
                  {
                    "Statement": "playerCombatAnimators[name] = a;",
                    "Line": 35
                  }
                ]
              },
              {
                "Name": "RandomDeathAnimator",
                "Modifiers": [],
                "Line": 39,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 41,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  }
                ],
                "Variables": [
                  {
                    "Name": "rng",
                    "Type": "int",
                    "Assignment": "Random.Range(0, playerDeathAnimators.Count)",
                    "Line": 41
                  }
                ],
                "Statements": [
                  {
                    "Statement": "{\r\n            int rng = Random.Range(0, playerDeathAnimators.Count);\r\n            return playerDeathAnimators.Values[rng];\r\n        }",
                    "Line": 40
                  },
                  {
                    "Statement": "int rng = Random.Range(0, playerDeathAnimators.Count);",
                    "Line": 41
                  },
                  {
                    "Statement": "return playerDeathAnimators.Values[rng];",
                    "Line": 42
                  }
                ]
              },
              {
                "Name": "GetDeathAnimator",
                "Modifiers": [],
                "Line": 45,
                "Parameters": [
                  {
                    "Name": "name",
                    "Type": "string",
                    "Assignment": null
                  }
                ],
                "Invocations": [],
                "Variables": [
                  {
                    "Name": "a",
                    "Type": "RuntimeAnimatorController",
                    "Assignment": "null",
                    "Line": 47
                  }
                ],
                "Statements": [
                  {
                    "Statement": "{\r\n            RuntimeAnimatorController a = null;\r\n            try { a = playerDeathAnimators[name]; }\r\n            catch (System.Exception) { }\r\n            return a;\r\n        }",
                    "Line": 46
                  },
                  {
                    "Statement": "RuntimeAnimatorController a = null;",
                    "Line": 47
                  },
                  {
                    "Statement": "try { a = playerDeathAnimators[name]; }\r\n            catch (System.Exception) { }",
                    "Line": 48
                  },
                  {
                    "Statement": "{ a = playerDeathAnimators[name]; }",
                    "Line": 48
                  },
                  {
                    "Statement": "a = playerDeathAnimators[name];",
                    "Line": 48
                  },
                  {
                    "Statement": "{ }",
                    "Line": 49
                  },
                  {
                    "Statement": "return a;",
                    "Line": 50
                  }
                ]
              },
              {
                "Name": "GetCombatAnimator",
                "Modifiers": [],
                "Line": 53,
                "Parameters": [
                  {
                    "Name": "name",
                    "Type": "string",
                    "Assignment": null
                  }
                ],
                "Invocations": [],
                "Variables": [
                  {
                    "Name": "a",
                    "Type": "RuntimeAnimatorController",
                    "Assignment": "null",
                    "Line": 55
                  }
                ],
                "Statements": [
                  {
                    "Statement": "{\r\n            RuntimeAnimatorController a = null;\r\n            try { a = playerCombatAnimators[name]; }\r\n            catch (System.Exception) { }\r\n            return a;\r\n        }",
                    "Line": 54
                  },
                  {
                    "Statement": "RuntimeAnimatorController a = null;",
                    "Line": 55
                  },
                  {
                    "Statement": "try { a = playerCombatAnimators[name]; }\r\n            catch (System.Exception) { }",
                    "Line": 56
                  },
                  {
                    "Statement": "{ a = playerCombatAnimators[name]; }",
                    "Line": 56
                  },
                  {
                    "Statement": "a = playerCombatAnimators[name];",
                    "Line": 56
                  },
                  {
                    "Statement": "{ }",
                    "Line": 57
                  },
                  {
                    "Statement": "return a;",
                    "Line": 58
                  }
                ]
              }
            ],
            "Fields": []
          }
        ],
        "Usings": []
      }
    ],
    "Classes": [],
    "Usings": [
      {
        "Name": "System.Collections",
        "Line": 0
      },
      {
        "Name": "System.Collections.Generic",
        "Line": 1
      },
      {
        "Name": "UnityEngine",
        "Line": 2
      }
    ]
  },
  {
    "Name": "AudioManager",
    "Interfaces": [],
    "Namespaces": [
      {
        "Line": 5,
        "Name": "AudioManagerPkg",
        "Interfaces": [],
        "Namespaces": [],
        "Classes": [
          {
            "Name": "AudioManager",
            "Modifier": "public",
            "Inheritance": "MonoBehaviour",
            "Line": 7,
            "Interfaces": [],
            "Properties": [],
            "Methods": [
              {
                "Name": "Awake",
                "Modifiers": [],
                "Line": 11,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 13,
                    "Name": "",
                    "FullName": "UnityEngine.Component.GetComponent<UnityEngine.AudioSource>()",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            _audioSource = GetComponent<AudioSource>();\r\n        }",
                    "Line": 12
                  },
                  {
                    "Statement": "_audioSource = GetComponent<AudioSource>();",
                    "Line": 13
                  }
                ]
              },
              {
                "Name": "PlaySound",
                "Modifiers": [],
                "Line": 17,
                "Parameters": [
                  {
                    "Name": "clip",
                    "Type": "AudioClip",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 20,
                    "Name": "",
                    "FullName": "UnityEngine.AudioSource.Play()",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            _audioSource.clip = clip;\r\n            _audioSource.Play();\r\n        }",
                    "Line": 18
                  },
                  {
                    "Statement": "_audioSource.clip = clip;",
                    "Line": 19
                  },
                  {
                    "Statement": "_audioSource.Play();",
                    "Line": 20
                  }
                ]
              }
            ],
            "Fields": []
          }
        ],
        "Usings": []
      }
    ],
    "Classes": [],
    "Usings": [
      {
        "Name": "System.Collections",
        "Line": 0
      },
      {
        "Name": "System.Collections.Generic",
        "Line": 1
      },
      {
        "Name": "UnityEngine",
        "Line": 2
      }
    ]
  },
  {
    "Name": "ComponentManager",
    "Interfaces": [],
    "Namespaces": [
      {
        "Line": 8,
        "Name": "Character",
        "Interfaces": [],
        "Namespaces": [],
        "Classes": [
          {
            "Name": "ComponentManager",
            "Modifier": "public",
            "Inheritance": "MonoBehaviour",
            "Line": 10,
            "Interfaces": [],
            "Properties": [],
            "Methods": [
              {
                "Name": "Awake",
                "Modifiers": [],
                "Line": 45,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 47,
                    "Name": "Application.streamingAssetsPath, componentDirectory",
                    "FullName": "System.IO.Path.Combine(string, string)",
                    "Parameters": []
                  },
                  {
                    "Line": 48,
                    "Name": "",
                    "FullName": "UnityEngine.Component.GetComponent<Character.CountDownManager>()",
                    "Parameters": []
                  },
                  {
                    "Line": 49,
                    "Name": "",
                    "FullName": "UnityEngine.Component.GetComponent<Character.TickManager>()",
                    "Parameters": []
                  },
                  {
                    "Line": 50,
                    "Name": "",
                    "FullName": "UnityEngine.Component.GetComponent<Character.FeatureManager>()",
                    "Parameters": []
                  },
                  {
                    "Line": 51,
                    "Name": "componentDirectory",
                    "FullName": "Character.ComponentManager.LoadComponentGroup(string)",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            componentDirectory = Path.Combine(Application.streamingAssetsPath, componentDirectory);\r\n            countDownManager = GetComponent<CountDownManager>();\r\n            tickManager = GetComponent<TickManager>();\r\n            featureManager = GetComponent<FeatureManager>();\r\n            LoadComponentGroup(componentDirectory);\r\n        }",
                    "Line": 46
                  },
                  {
                    "Statement": "componentDirectory = Path.Combine(Application.streamingAssetsPath, componentDirectory);",
                    "Line": 47
                  },
                  {
                    "Statement": "countDownManager = GetComponent<CountDownManager>();",
                    "Line": 48
                  },
                  {
                    "Statement": "tickManager = GetComponent<TickManager>();",
                    "Line": 49
                  },
                  {
                    "Statement": "featureManager = GetComponent<FeatureManager>();",
                    "Line": 50
                  },
                  {
                    "Statement": "LoadComponentGroup(componentDirectory);",
                    "Line": 51
                  }
                ]
              },
              {
                "Name": "ResetModifiers",
                "Modifiers": [],
                "Line": 54,
                "Parameters": [],
                "Invocations": [],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            foreach(Feature f in objectFeatures.Values)\r\n            {\r\n                featureMulMod[f.Type] = 1.0f;\r\n                featureAddMod[f.Type] = 0.0f;\r\n            }\r\n        }",
                    "Line": 55
                  },
                  {
                    "Statement": "foreach(Feature f in objectFeatures.Values)\r\n            {\r\n                featureMulMod[f.Type] = 1.0f;\r\n                featureAddMod[f.Type] = 0.0f;\r\n            }",
                    "Line": 56
                  },
                  {
                    "Statement": "{\r\n                featureMulMod[f.Type] = 1.0f;\r\n                featureAddMod[f.Type] = 0.0f;\r\n            }",
                    "Line": 57
                  },
                  {
                    "Statement": "featureMulMod[f.Type] = 1.0f;",
                    "Line": 58
                  },
                  {
                    "Statement": "featureAddMod[f.Type] = 0.0f;",
                    "Line": 59
                  }
                ]
              },
              {
                "Name": "ComputeModifiers",
                "Modifiers": [],
                "Line": 63,
                "Parameters": [],
                "Invocations": [],
                "Variables": [
                  {
                    "Name": "mod",
                    "Type": "Dictionary<string, Modifier>",
                    "Assignment": "components[keyValue.Key].MyModifiers",
                    "Line": 67
                  }
                ],
                "Statements": [
                  {
                    "Statement": "{\r\n            foreach (KeyValuePair<string, UAComponent> keyValue in components)\r\n            {\r\n                Dictionary<string, Modifier> mod = components[keyValue.Key].MyModifiers;\r\n                foreach (Modifier m in mod.Values)\r\n                {\r\n                    try\r\n                    {\r\n                        featureMulMod[m.Type] *= m.MultFactor;\r\n                        featureAddMod[m.Type] += m.AddFactor;\r\n                    }\r\n                    catch (Exception) { }                    \r\n                }\r\n            }\r\n        }",
                    "Line": 64
                  },
                  {
                    "Statement": "foreach (KeyValuePair<string, UAComponent> keyValue in components)\r\n            {\r\n                Dictionary<string, Modifier> mod = components[keyValue.Key].MyModifiers;\r\n                foreach (Modifier m in mod.Values)\r\n                {\r\n                    try\r\n                    {\r\n                        featureMulMod[m.Type] *= m.MultFactor;\r\n                        featureAddMod[m.Type] += m.AddFactor;\r\n                    }\r\n                    catch (Exception) { }                    \r\n                }\r\n            }",
                    "Line": 65
                  },
                  {
                    "Statement": "{\r\n                Dictionary<string, Modifier> mod = components[keyValue.Key].MyModifiers;\r\n                foreach (Modifier m in mod.Values)\r\n                {\r\n                    try\r\n                    {\r\n                        featureMulMod[m.Type] *= m.MultFactor;\r\n                        featureAddMod[m.Type] += m.AddFactor;\r\n                    }\r\n                    catch (Exception) { }                    \r\n                }\r\n            }",
                    "Line": 66
                  },
                  {
                    "Statement": "Dictionary<string, Modifier> mod = components[keyValue.Key].MyModifiers;",
                    "Line": 67
                  },
                  {
                    "Statement": "foreach (Modifier m in mod.Values)\r\n                {\r\n                    try\r\n                    {\r\n                        featureMulMod[m.Type] *= m.MultFactor;\r\n                        featureAddMod[m.Type] += m.AddFactor;\r\n                    }\r\n                    catch (Exception) { }                    \r\n                }",
                    "Line": 68
                  },
                  {
                    "Statement": "{\r\n                    try\r\n                    {\r\n                        featureMulMod[m.Type] *= m.MultFactor;\r\n                        featureAddMod[m.Type] += m.AddFactor;\r\n                    }\r\n                    catch (Exception) { }                    \r\n                }",
                    "Line": 69
                  },
                  {
                    "Statement": "try\r\n                    {\r\n                        featureMulMod[m.Type] *= m.MultFactor;\r\n                        featureAddMod[m.Type] += m.AddFactor;\r\n                    }\r\n                    catch (Exception) { }",
                    "Line": 70
                  },
                  {
                    "Statement": "{\r\n                        featureMulMod[m.Type] *= m.MultFactor;\r\n                        featureAddMod[m.Type] += m.AddFactor;\r\n                    }",
                    "Line": 71
                  },
                  {
                    "Statement": "featureMulMod[m.Type] *= m.MultFactor;",
                    "Line": 72
                  },
                  {
                    "Statement": "featureAddMod[m.Type] += m.AddFactor;",
                    "Line": 73
                  },
                  {
                    "Statement": "{ }",
                    "Line": 75
                  }
                ]
              },
              {
                "Name": "ComputeFeatures",
                "Modifiers": [],
                "Line": 80,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 84,
                    "Name": "f.Type",
                    "FullName": "System.Collections.Generic.List<string>.Contains(string)",
                    "Parameters": []
                  }
                ],
                "Variables": [
                  {
                    "Name": "midVal",
                    "Type": "float",
                    "Assignment": "f.BaseValue * featureMulMod[f.Type]",
                    "Line": 86
                  }
                ],
                "Statements": [
                  {
                    "Statement": "{\r\n            foreach(Feature f in objectFeatures.Values)\r\n            {\r\n                if (!tickable.Contains(f.Type))\r\n                {\r\n                    float midVal = f.BaseValue * featureMulMod[f.Type];\r\n                    f.CurrValue = midVal + featureAddMod[f.Type];\r\n                }\r\n            }\r\n        }",
                    "Line": 81
                  },
                  {
                    "Statement": "foreach(Feature f in objectFeatures.Values)\r\n            {\r\n                if (!tickable.Contains(f.Type))\r\n                {\r\n                    float midVal = f.BaseValue * featureMulMod[f.Type];\r\n                    f.CurrValue = midVal + featureAddMod[f.Type];\r\n                }\r\n            }",
                    "Line": 82
                  },
                  {
                    "Statement": "{\r\n                if (!tickable.Contains(f.Type))\r\n                {\r\n                    float midVal = f.BaseValue * featureMulMod[f.Type];\r\n                    f.CurrValue = midVal + featureAddMod[f.Type];\r\n                }\r\n            }",
                    "Line": 83
                  },
                  {
                    "Statement": "if (!tickable.Contains(f.Type))\r\n                {\r\n                    float midVal = f.BaseValue * featureMulMod[f.Type];\r\n                    f.CurrValue = midVal + featureAddMod[f.Type];\r\n                }",
                    "Line": 84
                  },
                  {
                    "Statement": "{\r\n                    float midVal = f.BaseValue * featureMulMod[f.Type];\r\n                    f.CurrValue = midVal + featureAddMod[f.Type];\r\n                }",
                    "Line": 85
                  },
                  {
                    "Statement": "float midVal = f.BaseValue * featureMulMod[f.Type];",
                    "Line": 86
                  },
                  {
                    "Statement": "f.CurrValue = midVal + featureAddMod[f.Type];",
                    "Line": 87
                  }
                ]
              },
              {
                "Name": "CheckIsActive",
                "Modifiers": [],
                "Line": 92,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 98,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  },
                  {
                    "Line": 99,
                    "Name": "",
                    "FullName": "Character.UAComponent.CheckIsActive()",
                    "Parameters": []
                  },
                  {
                    "Line": 99,
                    "Name": "s",
                    "FullName": "Character.ComponentManager.RemoveComponent(string)",
                    "Parameters": []
                  }
                ],
                "Variables": [
                  {
                    "Name": "i",
                    "Type": "int",
                    "Assignment": "0",
                    "Line": 94
                  },
                  {
                    "Name": "s",
                    "Type": "string",
                    "Assignment": "components.ElementAt(i).Key",
                    "Line": 98
                  }
                ],
                "Statements": [
                  {
                    "Statement": "{\r\n            for(int i = 0; i <= components.Count; i++)\r\n            {\r\n                try\r\n                {\r\n                    string s = components.ElementAt(i).Key;\r\n                    if (!components[s].CheckIsActive()) RemoveComponent(s);\r\n                }\r\n                catch (Exception) { }\r\n            }\r\n        }",
                    "Line": 93
                  },
                  {
                    "Statement": "for(int i = 0; i <= components.Count; i++)\r\n            {\r\n                try\r\n                {\r\n                    string s = components.ElementAt(i).Key;\r\n                    if (!components[s].CheckIsActive()) RemoveComponent(s);\r\n                }\r\n                catch (Exception) { }\r\n            }",
                    "Line": 94
                  },
                  {
                    "Statement": "{\r\n                try\r\n                {\r\n                    string s = components.ElementAt(i).Key;\r\n                    if (!components[s].CheckIsActive()) RemoveComponent(s);\r\n                }\r\n                catch (Exception) { }\r\n            }",
                    "Line": 95
                  },
                  {
                    "Statement": "try\r\n                {\r\n                    string s = components.ElementAt(i).Key;\r\n                    if (!components[s].CheckIsActive()) RemoveComponent(s);\r\n                }\r\n                catch (Exception) { }",
                    "Line": 96
                  },
                  {
                    "Statement": "{\r\n                    string s = components.ElementAt(i).Key;\r\n                    if (!components[s].CheckIsActive()) RemoveComponent(s);\r\n                }",
                    "Line": 97
                  },
                  {
                    "Statement": "string s = components.ElementAt(i).Key;",
                    "Line": 98
                  },
                  {
                    "Statement": "if (!components[s].CheckIsActive()) RemoveComponent(s);",
                    "Line": 99
                  },
                  {
                    "Statement": "RemoveComponent(s);",
                    "Line": 99
                  },
                  {
                    "Statement": "{ }",
                    "Line": 101
                  }
                ]
              },
              {
                "Name": "ComputeAllTicks",
                "Modifiers": [],
                "Line": 105,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 109,
                    "Name": "",
                    "FullName": "Character.UAComponent.CheckTick()",
                    "Parameters": []
                  },
                  {
                    "Line": 113,
                    "Name": "m.Name",
                    "FullName": "System.Collections.Generic.Dictionary<string, Character.Modifier>.ContainsKey(string)",
                    "Parameters": []
                  },
                  {
                    "Line": 113,
                    "Name": "m.Name",
                    "FullName": "System.Collections.Generic.Dictionary<string, Character.Modifier>.Remove(string)",
                    "Parameters": []
                  },
                  {
                    "Line": 114,
                    "Name": "m.Name, m",
                    "FullName": "System.Collections.Generic.Dictionary<string, Character.Modifier>.Add(string, Character.Modifier)",
                    "Parameters": []
                  },
                  {
                    "Line": 116,
                    "Name": "",
                    "FullName": "Character.UAComponent.ResetTick()",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            foreach (UAComponent c in components.Values)\r\n            {\r\n                if (c.CheckTick())\r\n                {\r\n                    foreach (Modifier m in c.MyModifiers.Values)\r\n                    {\r\n                        if (allTicks.ContainsKey(m.Name)) allTicks.Remove(m.Name);\r\n                        allTicks.Add(m.Name, m);\r\n                    }\r\n                    c.ResetTick();\r\n                }\r\n            }\r\n        }",
                    "Line": 106
                  },
                  {
                    "Statement": "foreach (UAComponent c in components.Values)\r\n            {\r\n                if (c.CheckTick())\r\n                {\r\n                    foreach (Modifier m in c.MyModifiers.Values)\r\n                    {\r\n                        if (allTicks.ContainsKey(m.Name)) allTicks.Remove(m.Name);\r\n                        allTicks.Add(m.Name, m);\r\n                    }\r\n                    c.ResetTick();\r\n                }\r\n            }",
                    "Line": 107
                  },
                  {
                    "Statement": "{\r\n                if (c.CheckTick())\r\n                {\r\n                    foreach (Modifier m in c.MyModifiers.Values)\r\n                    {\r\n                        if (allTicks.ContainsKey(m.Name)) allTicks.Remove(m.Name);\r\n                        allTicks.Add(m.Name, m);\r\n                    }\r\n                    c.ResetTick();\r\n                }\r\n            }",
                    "Line": 108
                  },
                  {
                    "Statement": "if (c.CheckTick())\r\n                {\r\n                    foreach (Modifier m in c.MyModifiers.Values)\r\n                    {\r\n                        if (allTicks.ContainsKey(m.Name)) allTicks.Remove(m.Name);\r\n                        allTicks.Add(m.Name, m);\r\n                    }\r\n                    c.ResetTick();\r\n                }",
                    "Line": 109
                  },
                  {
                    "Statement": "{\r\n                    foreach (Modifier m in c.MyModifiers.Values)\r\n                    {\r\n                        if (allTicks.ContainsKey(m.Name)) allTicks.Remove(m.Name);\r\n                        allTicks.Add(m.Name, m);\r\n                    }\r\n                    c.ResetTick();\r\n                }",
                    "Line": 110
                  },
                  {
                    "Statement": "foreach (Modifier m in c.MyModifiers.Values)\r\n                    {\r\n                        if (allTicks.ContainsKey(m.Name)) allTicks.Remove(m.Name);\r\n                        allTicks.Add(m.Name, m);\r\n                    }",
                    "Line": 111
                  },
                  {
                    "Statement": "{\r\n                        if (allTicks.ContainsKey(m.Name)) allTicks.Remove(m.Name);\r\n                        allTicks.Add(m.Name, m);\r\n                    }",
                    "Line": 112
                  },
                  {
                    "Statement": "if (allTicks.ContainsKey(m.Name)) allTicks.Remove(m.Name);",
                    "Line": 113
                  },
                  {
                    "Statement": "allTicks.Remove(m.Name);",
                    "Line": 113
                  },
                  {
                    "Statement": "allTicks.Add(m.Name, m);",
                    "Line": 114
                  },
                  {
                    "Statement": "c.ResetTick();",
                    "Line": 116
                  }
                ]
              },
              {
                "Name": "FixedUpdate",
                "Modifiers": [],
                "Line": 121,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 124,
                    "Name": "",
                    "FullName": "Character.ComponentManager.CheckIsActive()",
                    "Parameters": []
                  },
                  {
                    "Line": 125,
                    "Name": "",
                    "FullName": "Character.ComponentManager.ResetModifiers()",
                    "Parameters": []
                  },
                  {
                    "Line": 126,
                    "Name": "",
                    "FullName": "Character.ComponentManager.ComputeModifiers()",
                    "Parameters": []
                  },
                  {
                    "Line": 127,
                    "Name": "",
                    "FullName": "Character.ComponentManager.ComputeFeatures()",
                    "Parameters": []
                  },
                  {
                    "Line": 128,
                    "Name": "",
                    "FullName": "Character.ComponentManager.ComputeAllTicks()",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            if (objectFeatures == null) return;\r\n            CheckIsActive();\r\n            ResetModifiers();\r\n            ComputeModifiers();\r\n            ComputeFeatures();\r\n            ComputeAllTicks();\r\n        }",
                    "Line": 122
                  },
                  {
                    "Statement": "if (objectFeatures == null) return;",
                    "Line": 123
                  },
                  {
                    "Statement": "return;",
                    "Line": 123
                  },
                  {
                    "Statement": "CheckIsActive();",
                    "Line": 124
                  },
                  {
                    "Statement": "ResetModifiers();",
                    "Line": 125
                  },
                  {
                    "Statement": "ComputeModifiers();",
                    "Line": 126
                  },
                  {
                    "Statement": "ComputeFeatures();",
                    "Line": 127
                  },
                  {
                    "Statement": "ComputeAllTicks();",
                    "Line": 128
                  }
                ]
              },
              {
                "Name": "LoadSingleComponent",
                "Modifiers": [],
                "Line": 131,
                "Parameters": [
                  {
                    "Name": "path",
                    "Type": "string",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 133,
                    "Name": "path",
                    "FullName": "Character.ComponentManager.CheckFile(string)",
                    "Parameters": []
                  },
                  {
                    "Line": 134,
                    "Name": "'.'",
                    "FullName": "string.Split(params char[])",
                    "Parameters": []
                  },
                  {
                    "Line": 135,
                    "Name": "n[0].Trim()",
                    "FullName": "System.IO.Path.GetFileName(string)",
                    "Parameters": []
                  },
                  {
                    "Line": 135,
                    "Name": "",
                    "FullName": "string.Trim()",
                    "Parameters": []
                  },
                  {
                    "Line": 136,
                    "Name": "c",
                    "FullName": "Character.ComponentManager.AddBaseComponent(Character.UAComponent)",
                    "Parameters": []
                  },
                  {
                    "Line": 137,
                    "Name": "c",
                    "FullName": "Character.ComponentManager.AddComponent(Character.UAComponent)",
                    "Parameters": []
                  }
                ],
                "Variables": [
                  {
                    "Name": "n",
                    "Type": "string[]",
                    "Assignment": "path.Split('.')",
                    "Line": 134
                  },
                  {
                    "Name": "c",
                    "Type": "Gear",
                    "Assignment": "new Gear(Path.GetFileName(n[0].Trim()), path, this)",
                    "Line": 135
                  }
                ],
                "Statements": [
                  {
                    "Statement": "{\r\n            if (!CheckFile(path)) return;\r\n            string[] n = path.Split('.');\r\n            Gear c = new Gear(Path.GetFileName(n[0].Trim()), path, this);\r\n            AddBaseComponent(c);\r\n            AddComponent(c);\r\n        }",
                    "Line": 132
                  },
                  {
                    "Statement": "if (!CheckFile(path)) return;",
                    "Line": 133
                  },
                  {
                    "Statement": "return;",
                    "Line": 133
                  },
                  {
                    "Statement": "string[] n = path.Split('.');",
                    "Line": 134
                  },
                  {
                    "Statement": "Gear c = new Gear(Path.GetFileName(n[0].Trim()), path, this);",
                    "Line": 135
                  },
                  {
                    "Statement": "AddBaseComponent(c);",
                    "Line": 136
                  },
                  {
                    "Statement": "AddComponent(c);",
                    "Line": 137
                  }
                ]
              },
              {
                "Name": "LoadComponentGroup",
                "Modifiers": [],
                "Line": 140,
                "Parameters": [
                  {
                    "Name": "path",
                    "Type": "string",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 142,
                    "Name": "path",
                    "FullName": "Character.ComponentManager.CheckDirectory(string)",
                    "Parameters": []
                  },
                  {
                    "Line": 143,
                    "Name": "path, \"*.csv\"",
                    "FullName": "System.IO.Directory.GetFiles(string, string)",
                    "Parameters": []
                  },
                  {
                    "Line": 146,
                    "Name": "fileName",
                    "FullName": "Character.ComponentManager.LoadSingleComponent(string)",
                    "Parameters": []
                  }
                ],
                "Variables": [
                  {
                    "Name": "fileEntries",
                    "Type": "string[]",
                    "Assignment": "Directory.GetFiles(path, \"*.csv\")",
                    "Line": 143
                  }
                ],
                "Statements": [
                  {
                    "Statement": "{\r\n            if (!CheckDirectory(path)) return;\r\n            string[] fileEntries = Directory.GetFiles(path, \"*.csv\");\r\n            foreach (string fileName in fileEntries)\r\n            {\r\n                LoadSingleComponent(fileName);\r\n            }\r\n        }",
                    "Line": 141
                  },
                  {
                    "Statement": "if (!CheckDirectory(path)) return;",
                    "Line": 142
                  },
                  {
                    "Statement": "return;",
                    "Line": 142
                  },
                  {
                    "Statement": "string[] fileEntries = Directory.GetFiles(path, \"*.csv\");",
                    "Line": 143
                  },
                  {
                    "Statement": "foreach (string fileName in fileEntries)\r\n            {\r\n                LoadSingleComponent(fileName);\r\n            }",
                    "Line": 144
                  },
                  {
                    "Statement": "{\r\n                LoadSingleComponent(fileName);\r\n            }",
                    "Line": 145
                  },
                  {
                    "Statement": "LoadSingleComponent(fileName);",
                    "Line": 146
                  }
                ]
              },
              {
                "Name": "SingleComponent",
                "Modifiers": [],
                "Line": 150,
                "Parameters": [
                  {
                    "Name": "component",
                    "Type": "string",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 152,
                    "Name": "",
                    "FullName": "string.ToUpper()",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            component = component.ToUpper();\r\n            return components[component];\r\n        }",
                    "Line": 151
                  },
                  {
                    "Statement": "component = component.ToUpper();",
                    "Line": 152
                  },
                  {
                    "Statement": "return components[component];",
                    "Line": 153
                  }
                ]
              },
              {
                "Name": "AddBaseComponent",
                "Modifiers": [],
                "Line": 156,
                "Parameters": [
                  {
                    "Name": "c",
                    "Type": "UAComponent",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 158,
                    "Name": "c.ComponentId",
                    "FullName": "System.Collections.Generic.Dictionary<string, Character.UAComponent>.ContainsKey(string)",
                    "Parameters": []
                  },
                  {
                    "Line": 158,
                    "Name": "c.ComponentId",
                    "FullName": "Character.ComponentManager.RemoveComponent(string)",
                    "Parameters": []
                  },
                  {
                    "Line": 159,
                    "Name": "c.ComponentId, c",
                    "FullName": "System.Collections.Generic.Dictionary<string, Character.UAComponent>.Add(string, Character.UAComponent)",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            if (baseComponents.ContainsKey(c.ComponentId)) RemoveComponent(c.ComponentId);\r\n            baseComponents.Add(c.ComponentId, c);\r\n        }",
                    "Line": 157
                  },
                  {
                    "Statement": "if (baseComponents.ContainsKey(c.ComponentId)) RemoveComponent(c.ComponentId);",
                    "Line": 158
                  },
                  {
                    "Statement": "RemoveComponent(c.ComponentId);",
                    "Line": 158
                  },
                  {
                    "Statement": "baseComponents.Add(c.ComponentId, c);",
                    "Line": 159
                  }
                ]
              },
              {
                "Name": "AddComponent",
                "Modifiers": [],
                "Line": 162,
                "Parameters": [
                  {
                    "Name": "c",
                    "Type": "UAComponent",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 164,
                    "Name": "c.ComponentId",
                    "FullName": "System.Collections.Generic.Dictionary<string, Character.UAComponent>.ContainsKey(string)",
                    "Parameters": []
                  },
                  {
                    "Line": 164,
                    "Name": "c.ComponentId",
                    "FullName": "Character.ComponentManager.RemoveComponent(string)",
                    "Parameters": []
                  },
                  {
                    "Line": 165,
                    "Name": "c.ComponentId, c",
                    "FullName": "System.Collections.Generic.Dictionary<string, Character.UAComponent>.Add(string, Character.UAComponent)",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            if (components.ContainsKey(c.ComponentId)) RemoveComponent(c.ComponentId);\r\n            components.Add(c.ComponentId, c);\r\n        }",
                    "Line": 163
                  },
                  {
                    "Statement": "if (components.ContainsKey(c.ComponentId)) RemoveComponent(c.ComponentId);",
                    "Line": 164
                  },
                  {
                    "Statement": "RemoveComponent(c.ComponentId);",
                    "Line": 164
                  },
                  {
                    "Statement": "components.Add(c.ComponentId, c);",
                    "Line": 165
                  }
                ]
              },
              {
                "Name": "RemoveComponent",
                "Modifiers": [],
                "Line": 168,
                "Parameters": [
                  {
                    "Name": "c",
                    "Type": "UAComponent",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 170,
                    "Name": "c.ComponentId",
                    "FullName": "Character.ComponentManager.RemoveComponent(string)",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            RemoveComponent(c.ComponentId);\r\n        }",
                    "Line": 169
                  },
                  {
                    "Statement": "RemoveComponent(c.ComponentId);",
                    "Line": 170
                  }
                ]
              },
              {
                "Name": "RemoveComponent",
                "Modifiers": [],
                "Line": 173,
                "Parameters": [
                  {
                    "Name": "c",
                    "Type": "string",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 177,
                    "Name": "c",
                    "FullName": "System.Collections.Generic.Dictionary<string, Character.UAComponent>.Remove(string)",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            try\r\n            {\r\n                components.Remove(c);\r\n            }\r\n            catch (Exception) { }\r\n        }",
                    "Line": 174
                  },
                  {
                    "Statement": "try\r\n            {\r\n                components.Remove(c);\r\n            }\r\n            catch (Exception) { }",
                    "Line": 175
                  },
                  {
                    "Statement": "{\r\n                components.Remove(c);\r\n            }",
                    "Line": 176
                  },
                  {
                    "Statement": "components.Remove(c);",
                    "Line": 177
                  },
                  {
                    "Statement": "{ }",
                    "Line": 179
                  }
                ]
              },
              {
                "Name": "CheckDirectory",
                "Modifiers": [],
                "Line": 182,
                "Parameters": [
                  {
                    "Name": "path",
                    "Type": "string",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 184,
                    "Name": "path",
                    "FullName": "System.IO.Directory.Exists(string)",
                    "Parameters": []
                  },
                  {
                    "Line": 186,
                    "Name": "\"Directory Not Found\"",
                    "FullName": "UnityEngine.Debug.LogError(object)",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            if (!Directory.Exists(path))\r\n            {\r\n                Debug.LogError(\"Directory Not Found\");\r\n                return false;\r\n            }\r\n            return true;\r\n        }",
                    "Line": 183
                  },
                  {
                    "Statement": "if (!Directory.Exists(path))\r\n            {\r\n                Debug.LogError(\"Directory Not Found\");\r\n                return false;\r\n            }",
                    "Line": 184
                  },
                  {
                    "Statement": "{\r\n                Debug.LogError(\"Directory Not Found\");\r\n                return false;\r\n            }",
                    "Line": 185
                  },
                  {
                    "Statement": "Debug.LogError(\"Directory Not Found\");",
                    "Line": 186
                  },
                  {
                    "Statement": "return false;",
                    "Line": 187
                  },
                  {
                    "Statement": "return true;",
                    "Line": 189
                  }
                ]
              },
              {
                "Name": "CheckFile",
                "Modifiers": [],
                "Line": 192,
                "Parameters": [
                  {
                    "Name": "path",
                    "Type": "string",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 194,
                    "Name": "path",
                    "FullName": "System.IO.File.Exists(string)",
                    "Parameters": []
                  },
                  {
                    "Line": 196,
                    "Name": "\"File Not Found\"",
                    "FullName": "UnityEngine.Debug.LogError(object)",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            if (!File.Exists(path))\r\n            {\r\n                Debug.LogError(\"File Not Found\");\r\n                return false;\r\n            }\r\n            return true;\r\n        }",
                    "Line": 193
                  },
                  {
                    "Statement": "if (!File.Exists(path))\r\n            {\r\n                Debug.LogError(\"File Not Found\");\r\n                return false;\r\n            }",
                    "Line": 194
                  },
                  {
                    "Statement": "{\r\n                Debug.LogError(\"File Not Found\");\r\n                return false;\r\n            }",
                    "Line": 195
                  },
                  {
                    "Statement": "Debug.LogError(\"File Not Found\");",
                    "Line": 196
                  },
                  {
                    "Statement": "return false;",
                    "Line": 197
                  },
                  {
                    "Statement": "return true;",
                    "Line": 199
                  }
                ]
              },
              {
                "Name": "Print",
                "Modifiers": [],
                "Line": 203,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 208,
                    "Name": "c.ComponentId",
                    "FullName": "UnityEngine.Debug.LogError(object)",
                    "Parameters": []
                  },
                  {
                    "Line": 213,
                    "Name": "\"Features: \" + features",
                    "FullName": "UnityEngine.Debug.Log(object)",
                    "Parameters": []
                  }
                ],
                "Variables": [
                  {
                    "Name": "c",
                    "Type": "UAComponent",
                    "Assignment": "components[keyValuePair.Key]",
                    "Line": 207
                  },
                  {
                    "Name": "features",
                    "Type": "string",
                    "Assignment": "\"\"",
                    "Line": 209
                  }
                ],
                "Statements": [
                  {
                    "Statement": "{\r\n            foreach(KeyValuePair<string, UAComponent> keyValuePair in components)\r\n            {\r\n                UAComponent c = components[keyValuePair.Key];\r\n                Debug.LogError(c.ComponentId);\r\n                string features = \"\";\r\n                foreach (KeyValuePair<string, Feature> f in c.MyFeatures) features += c.MyFeatures[f.Key].Type + \" BV: \" + c.MyFeatures[f.Key].BaseValue + \" CV: \" + c.MyFeatures[f.Key].CurrValue;\r\n                //string modifiers = \"\";\r\n                //foreach (KeyValuePair<string, Modifier> m in c.MyModifiers) modifiers += c.MyModifiers[m.Key].Type + \" MF: \" + c.MyModifiers[m.Key].MultFactor + \" AF: \" + c.MyModifiers[m.Key].AddFactor;\r\n                Debug.Log(\"Features: \" + features);\r\n                //Debug.Log(\"Modifiers: \" + modifiers);\r\n            }\r\n        }",
                    "Line": 204
                  },
                  {
                    "Statement": "foreach(KeyValuePair<string, UAComponent> keyValuePair in components)\r\n            {\r\n                UAComponent c = components[keyValuePair.Key];\r\n                Debug.LogError(c.ComponentId);\r\n                string features = \"\";\r\n                foreach (KeyValuePair<string, Feature> f in c.MyFeatures) features += c.MyFeatures[f.Key].Type + \" BV: \" + c.MyFeatures[f.Key].BaseValue + \" CV: \" + c.MyFeatures[f.Key].CurrValue;\r\n                //string modifiers = \"\";\r\n                //foreach (KeyValuePair<string, Modifier> m in c.MyModifiers) modifiers += c.MyModifiers[m.Key].Type + \" MF: \" + c.MyModifiers[m.Key].MultFactor + \" AF: \" + c.MyModifiers[m.Key].AddFactor;\r\n                Debug.Log(\"Features: \" + features);\r\n                //Debug.Log(\"Modifiers: \" + modifiers);\r\n            }",
                    "Line": 205
                  },
                  {
                    "Statement": "{\r\n                UAComponent c = components[keyValuePair.Key];\r\n                Debug.LogError(c.ComponentId);\r\n                string features = \"\";\r\n                foreach (KeyValuePair<string, Feature> f in c.MyFeatures) features += c.MyFeatures[f.Key].Type + \" BV: \" + c.MyFeatures[f.Key].BaseValue + \" CV: \" + c.MyFeatures[f.Key].CurrValue;\r\n                //string modifiers = \"\";\r\n                //foreach (KeyValuePair<string, Modifier> m in c.MyModifiers) modifiers += c.MyModifiers[m.Key].Type + \" MF: \" + c.MyModifiers[m.Key].MultFactor + \" AF: \" + c.MyModifiers[m.Key].AddFactor;\r\n                Debug.Log(\"Features: \" + features);\r\n                //Debug.Log(\"Modifiers: \" + modifiers);\r\n            }",
                    "Line": 206
                  },
                  {
                    "Statement": "UAComponent c = components[keyValuePair.Key];",
                    "Line": 207
                  },
                  {
                    "Statement": "Debug.LogError(c.ComponentId);",
                    "Line": 208
                  },
                  {
                    "Statement": "string features = \"\";",
                    "Line": 209
                  },
                  {
                    "Statement": "foreach (KeyValuePair<string, Feature> f in c.MyFeatures) features += c.MyFeatures[f.Key].Type + \" BV: \" + c.MyFeatures[f.Key].BaseValue + \" CV: \" + c.MyFeatures[f.Key].CurrValue;",
                    "Line": 210
                  },
                  {
                    "Statement": "features += c.MyFeatures[f.Key].Type + \" BV: \" + c.MyFeatures[f.Key].BaseValue + \" CV: \" + c.MyFeatures[f.Key].CurrValue;",
                    "Line": 210
                  },
                  {
                    "Statement": "Debug.Log(\"Features: \" + features);",
                    "Line": 213
                  }
                ]
              },
              {
                "Name": "PrintFeatures",
                "Modifiers": [],
                "Line": 218,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 220,
                    "Name": "f.Type + \" \" + f.CurrValue",
                    "FullName": "UnityEngine.Debug.Log(object)",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            foreach (Feature f in objectFeatures.Values) Debug.Log(f.Type + \" \" + f.CurrValue);\r\n        }",
                    "Line": 219
                  },
                  {
                    "Statement": "foreach (Feature f in objectFeatures.Values) Debug.Log(f.Type + \" \" + f.CurrValue);",
                    "Line": 220
                  },
                  {
                    "Statement": "Debug.Log(f.Type + \" \" + f.CurrValue);",
                    "Line": 220
                  }
                ]
              },
              {
                "Name": "ComponentsByFeature",
                "Modifiers": [],
                "Line": 223,
                "Parameters": [
                  {
                    "Name": "feature",
                    "Type": "string",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 225,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  },
                  {
                    "Line": 225,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  },
                  {
                    "Line": 225,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            return components.Where(x => x.Value.HasFeature(feature)).ToDictionary(x => x.Key, x=> x.Value);\r\n        }",
                    "Line": 224
                  },
                  {
                    "Statement": "return components.Where(x => x.Value.HasFeature(feature)).ToDictionary(x => x.Key, x=> x.Value);",
                    "Line": 225
                  }
                ]
              },
              {
                "Name": "AddTickable",
                "Modifiers": [],
                "Line": 228,
                "Parameters": [
                  {
                    "Name": "feature",
                    "Type": "string",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 232,
                    "Name": "feature",
                    "FullName": "System.Collections.Generic.List<string>.Add(string)",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            try\r\n            {\r\n                tickable.Add(feature);\r\n            }\r\n            catch (Exception) { }\r\n        }",
                    "Line": 229
                  },
                  {
                    "Statement": "try\r\n            {\r\n                tickable.Add(feature);\r\n            }\r\n            catch (Exception) { }",
                    "Line": 230
                  },
                  {
                    "Statement": "{\r\n                tickable.Add(feature);\r\n            }",
                    "Line": 231
                  },
                  {
                    "Statement": "tickable.Add(feature);",
                    "Line": 232
                  },
                  {
                    "Statement": "{ }",
                    "Line": 234
                  }
                ]
              },
              {
                "Name": "ComponentPickup",
                "Modifiers": [],
                "Line": 237,
                "Parameters": [
                  {
                    "Name": "type",
                    "Type": "string",
                    "Assignment": null
                  },
                  {
                    "Name": "name",
                    "Type": "string",
                    "Assignment": null
                  },
                  {
                    "Name": "path",
                    "Type": "string",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 239,
                    "Name": "Application.streamingAssetsPath, path",
                    "FullName": "System.IO.Path.Combine(string, string)",
                    "Parameters": []
                  },
                  {
                    "Line": 240,
                    "Name": "",
                    "FullName": "string.ToLower()",
                    "Parameters": []
                  },
                  {
                    "Line": 241,
                    "Name": "type[0]",
                    "FullName": "char.ToUpper(char)",
                    "Parameters": []
                  },
                  {
                    "Line": 241,
                    "Name": "1",
                    "FullName": "string.Substring(int)",
                    "Parameters": []
                  },
                  {
                    "Line": 242,
                    "Name": "\"Character.\" + type",
                    "FullName": "System.Type.GetType(string)",
                    "Parameters": []
                  },
                  {
                    "Line": 243,
                    "Name": "(UAComponent)Activator.CreateInstance(t, name, path, this)",
                    "FullName": "Character.ComponentManager.AddComponent(Character.UAComponent)",
                    "Parameters": []
                  },
                  {
                    "Line": 243,
                    "Name": "t, name, path, this",
                    "FullName": "System.Activator.CreateInstance(System.Type, params object[])",
                    "Parameters": []
                  }
                ],
                "Variables": [
                  {
                    "Name": "t",
                    "Type": "Type",
                    "Assignment": "Type.GetType(\"Character.\" + type)",
                    "Line": 242
                  }
                ],
                "Statements": [
                  {
                    "Statement": "{\r\n            path = Path.Combine(Application.streamingAssetsPath, path);\r\n            type = type.ToLower();\r\n            type = char.ToUpper(type[0]) + type.Substring(1);\r\n            Type t = Type.GetType(\"Character.\" + type);\r\n            AddComponent((UAComponent)Activator.CreateInstance(t, name, path, this));\r\n        }",
                    "Line": 238
                  },
                  {
                    "Statement": "path = Path.Combine(Application.streamingAssetsPath, path);",
                    "Line": 239
                  },
                  {
                    "Statement": "type = type.ToLower();",
                    "Line": 240
                  },
                  {
                    "Statement": "type = char.ToUpper(type[0]) + type.Substring(1);",
                    "Line": 241
                  },
                  {
                    "Statement": "Type t = Type.GetType(\"Character.\" + type);",
                    "Line": 242
                  },
                  {
                    "Statement": "AddComponent((UAComponent)Activator.CreateInstance(t, name, path, this));",
                    "Line": 243
                  }
                ]
              },
              {
                "Name": "GetAllTicks",
                "Modifiers": [],
                "Line": 246,
                "Parameters": [
                  {
                    "Name": "type",
                    "Type": "string",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 248,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  },
                  {
                    "Line": 248,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  },
                  {
                    "Line": 251,
                    "Name": "k",
                    "FullName": "System.Collections.Generic.Dictionary<string, Character.Modifier>.Remove(string)",
                    "Parameters": []
                  }
                ],
                "Variables": [
                  {
                    "Name": "filtered",
                    "Type": "Dictionary<string, float>",
                    "Assignment": "allTicks.Where(x => x.Value.Type == type).ToDictionary(x => x.Key, x => x.Value.AddFactor)",
                    "Line": 248
                  }
                ],
                "Statements": [
                  {
                    "Statement": "{\r\n            Dictionary<string, float> filtered = allTicks.Where(x => x.Value.Type == type).ToDictionary(x => x.Key, x => x.Value.AddFactor);\r\n            foreach(string k in filtered.Keys)\r\n            {\r\n                allTicks.Remove(k);\r\n            }\r\n            return filtered;\r\n        }",
                    "Line": 247
                  },
                  {
                    "Statement": "Dictionary<string, float> filtered = allTicks.Where(x => x.Value.Type == type).ToDictionary(x => x.Key, x => x.Value.AddFactor);",
                    "Line": 248
                  },
                  {
                    "Statement": "foreach(string k in filtered.Keys)\r\n            {\r\n                allTicks.Remove(k);\r\n            }",
                    "Line": 249
                  },
                  {
                    "Statement": "{\r\n                allTicks.Remove(k);\r\n            }",
                    "Line": 250
                  },
                  {
                    "Statement": "allTicks.Remove(k);",
                    "Line": 251
                  },
                  {
                    "Statement": "return filtered;",
                    "Line": 253
                  }
                ]
              },
              {
                "Name": "FeatureValue",
                "Modifiers": [],
                "Line": 256,
                "Parameters": [
                  {
                    "Name": "feature",
                    "Type": "string",
                    "Assignment": null
                  }
                ],
                "Invocations": [],
                "Variables": [
                  {
                    "Name": "res",
                    "Type": "float",
                    "Assignment": "0",
                    "Line": 258
                  }
                ],
                "Statements": [
                  {
                    "Statement": "{\r\n            float res = 0;\r\n            try\r\n            {\r\n                res = objectFeatures[feature].CurrValue;\r\n            }\r\n            catch (Exception) { }\r\n            return res;\r\n        }",
                    "Line": 257
                  },
                  {
                    "Statement": "float res = 0;",
                    "Line": 258
                  },
                  {
                    "Statement": "try\r\n            {\r\n                res = objectFeatures[feature].CurrValue;\r\n            }\r\n            catch (Exception) { }",
                    "Line": 259
                  },
                  {
                    "Statement": "{\r\n                res = objectFeatures[feature].CurrValue;\r\n            }",
                    "Line": 260
                  },
                  {
                    "Statement": "res = objectFeatures[feature].CurrValue;",
                    "Line": 261
                  },
                  {
                    "Statement": "{ }",
                    "Line": 263
                  },
                  {
                    "Statement": "return res;",
                    "Line": 264
                  }
                ]
              },
              {
                "Name": "FilterByType",
                "Modifiers": [],
                "Line": 267,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 272,
                    "Name": "c.Key, t",
                    "FullName": "System.Collections.Generic.Dictionary<string, T>.Add(string, T)",
                    "Parameters": []
                  }
                ],
                "Variables": [
                  {
                    "Name": "filtered",
                    "Type": "Dictionary<string, T>",
                    "Assignment": "new Dictionary<string, T>()",
                    "Line": 269
                  }
                ],
                "Statements": [
                  {
                    "Statement": "{\r\n            Dictionary<string, T> filtered = new Dictionary<string, T>();\r\n            foreach(KeyValuePair<string, UAComponent> c in components)\r\n            {\r\n                if (c.Value is T t) filtered.Add(c.Key, t);\r\n            }\r\n            return filtered;\r\n        }",
                    "Line": 268
                  },
                  {
                    "Statement": "Dictionary<string, T> filtered = new Dictionary<string, T>();",
                    "Line": 269
                  },
                  {
                    "Statement": "foreach(KeyValuePair<string, UAComponent> c in components)\r\n            {\r\n                if (c.Value is T t) filtered.Add(c.Key, t);\r\n            }",
                    "Line": 270
                  },
                  {
                    "Statement": "{\r\n                if (c.Value is T t) filtered.Add(c.Key, t);\r\n            }",
                    "Line": 271
                  },
                  {
                    "Statement": "if (c.Value is T t) filtered.Add(c.Key, t);",
                    "Line": 272
                  },
                  {
                    "Statement": "filtered.Add(c.Key, t);",
                    "Line": 272
                  },
                  {
                    "Statement": "return filtered;",
                    "Line": 274
                  }
                ]
              },
              {
                "Name": "IsFeaturePresent",
                "Modifiers": [],
                "Line": 277,
                "Parameters": [
                  {
                    "Name": "feature",
                    "Type": "string",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 279,
                    "Name": "feature",
                    "FullName": "System.Collections.Generic.Dictionary<string, Character.Feature>.ContainsKey(string)",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            return objectFeatures.ContainsKey(feature);\r\n        }",
                    "Line": 278
                  },
                  {
                    "Statement": "return objectFeatures.ContainsKey(feature);",
                    "Line": 279
                  }
                ]
              },
              {
                "Name": "AddComponents",
                "Modifiers": [],
                "Line": 282,
                "Parameters": [
                  {
                    "Name": "com",
                    "Type": "Dictionary<string, UAComponent>",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 284,
                    "Name": "c",
                    "FullName": "Character.ComponentManager.AddComponent(Character.UAComponent)",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            foreach (UAComponent c in com.Values) AddComponent(c);\r\n        }",
                    "Line": 283
                  },
                  {
                    "Statement": "foreach (UAComponent c in com.Values) AddComponent(c);",
                    "Line": 284
                  },
                  {
                    "Statement": "AddComponent(c);",
                    "Line": 284
                  }
                ]
              },
              {
                "Name": "UpdateComponents",
                "Modifiers": [],
                "Line": 287,
                "Parameters": [
                  {
                    "Name": "com",
                    "Type": "Dictionary<string, UAComponent>",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 289,
                    "Name": "",
                    "FullName": "System.Collections.Generic.Dictionary<string, Character.UAComponent>.Clear()",
                    "Parameters": []
                  },
                  {
                    "Line": 290,
                    "Name": "c",
                    "FullName": "Character.ComponentManager.AddComponent(Character.UAComponent)",
                    "Parameters": []
                  },
                  {
                    "Line": 291,
                    "Name": "c",
                    "FullName": "Character.ComponentManager.AddComponent(Character.UAComponent)",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            components.Clear();\r\n            foreach (UAComponent c in com.Values) AddComponent(c);\r\n            foreach (UAComponent c in baseComponents.Values) AddComponent(c);\r\n        }",
                    "Line": 288
                  },
                  {
                    "Statement": "components.Clear();",
                    "Line": 289
                  },
                  {
                    "Statement": "foreach (UAComponent c in com.Values) AddComponent(c);",
                    "Line": 290
                  },
                  {
                    "Statement": "AddComponent(c);",
                    "Line": 290
                  },
                  {
                    "Statement": "foreach (UAComponent c in baseComponents.Values) AddComponent(c);",
                    "Line": 291
                  },
                  {
                    "Statement": "AddComponent(c);",
                    "Line": 291
                  }
                ]
              }
            ],
            "Fields": []
          }
        ],
        "Usings": []
      }
    ],
    "Classes": [],
    "Usings": [
      {
        "Name": "System.Collections",
        "Line": 0
      },
      {
        "Name": "System",
        "Line": 1
      },
      {
        "Name": "Unity.IO",
        "Line": 2
      },
      {
        "Name": "System.IO",
        "Line": 3
      },
      {
        "Name": "System.Collections.Generic",
        "Line": 4
      },
      {
        "Name": "System.Linq",
        "Line": 5
      },
      {
        "Name": "UnityEngine",
        "Line": 6
      }
    ]
  },
  {
    "Name": "CountDown",
    "Interfaces": [],
    "Namespaces": [
      {
        "Line": 4,
        "Name": "Character",
        "Interfaces": [],
        "Namespaces": [],
        "Classes": [
          {
            "Name": "CountDown",
            "Modifier": "public",
            "Inheritance": "OverTime",
            "Line": 6,
            "Interfaces": [],
            "Properties": [],
            "Methods": [
              {
                "Name": "Activate",
                "Modifiers": [],
                "Line": 14,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 16,
                    "Name": "parameter, valuePerSecond",
                    "FullName": "Character.UAComponent.ReduceComponent(string, float)",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            c.ReduceComponent(parameter, valuePerSecond);\r\n        }",
                    "Line": 15
                  },
                  {
                    "Statement": "c.ReduceComponent(parameter, valuePerSecond);",
                    "Line": 16
                  }
                ]
              },
              {
                "Name": "DoCountdown",
                "Modifiers": [],
                "Line": 19,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 21,
                    "Name": "",
                    "FullName": "Character.CountDown.Activate()",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            Activate();\r\n        }",
                    "Line": 20
                  },
                  {
                    "Statement": "Activate();",
                    "Line": 21
                  }
                ]
              }
            ],
            "Fields": []
          }
        ],
        "Usings": []
      }
    ],
    "Classes": [],
    "Usings": [
      {
        "Name": "System.Collections",
        "Line": 0
      },
      {
        "Name": "System.Collections.Generic",
        "Line": 1
      },
      {
        "Name": "UnityEngine",
        "Line": 2
      }
    ]
  },
  {
    "Name": "CountDownManager",
    "Interfaces": [],
    "Namespaces": [
      {
        "Line": 4,
        "Name": "Character",
        "Interfaces": [],
        "Namespaces": [],
        "Classes": [
          {
            "Name": "CountDownManager",
            "Modifier": "public",
            "Inheritance": "MonoBehaviour",
            "Line": 6,
            "Interfaces": [],
            "Properties": [],
            "Methods": [
              {
                "Name": "Awake",
                "Modifiers": [],
                "Line": 12,
                "Parameters": [],
                "Invocations": [],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            timer = countDownTimeInSecond;\r\n        }",
                    "Line": 13
                  },
                  {
                    "Statement": "timer = countDownTimeInSecond;",
                    "Line": 14
                  }
                ]
              },
              {
                "Name": "AddCountDown",
                "Modifiers": [],
                "Line": 17,
                "Parameters": [
                  {
                    "Name": "c",
                    "Type": "CountDown",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 19,
                    "Name": "c",
                    "FullName": "System.Collections.Generic.List<Character.CountDown>.Add(Character.CountDown)",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            countDowns.Add(c);\r\n        }",
                    "Line": 18
                  },
                  {
                    "Statement": "countDowns.Add(c);",
                    "Line": 19
                  }
                ]
              },
              {
                "Name": "CheckIsActive",
                "Modifiers": [],
                "Line": 22,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 24,
                    "Name": "item => item.MyComponent.CheckIsActive() == false",
                    "FullName": "System.Collections.Generic.List<Character.CountDown>.RemoveAll(System.Predicate<Character.CountDown>)",
                    "Parameters": []
                  },
                  {
                    "Line": 24,
                    "Name": "",
                    "FullName": "Character.UAComponent.CheckIsActive()",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            countDowns.RemoveAll(item => item.MyComponent.CheckIsActive() == false);\r\n        }",
                    "Line": 23
                  },
                  {
                    "Statement": "countDowns.RemoveAll(item => item.MyComponent.CheckIsActive() == false);",
                    "Line": 24
                  }
                ]
              },
              {
                "Name": "DoCountDown",
                "Modifiers": [],
                "Line": 27,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 29,
                    "Name": "",
                    "FullName": "Character.CountDown.DoCountdown()",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            foreach (CountDown c in countDowns) c.DoCountdown();\r\n        }",
                    "Line": 28
                  },
                  {
                    "Statement": "foreach (CountDown c in countDowns) c.DoCountdown();",
                    "Line": 29
                  },
                  {
                    "Statement": "c.DoCountdown();",
                    "Line": 29
                  }
                ]
              },
              {
                "Name": "FixedUpdate",
                "Modifiers": [],
                "Line": 32,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 35,
                    "Name": "",
                    "FullName": "Character.CountDownManager.CheckIsActive()",
                    "Parameters": []
                  },
                  {
                    "Line": 40,
                    "Name": "",
                    "FullName": "Character.CountDownManager.DoCountDown()",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            if (countDowns.Count == 0) return;\r\n            CheckIsActive();\r\n            timer -= Time.deltaTime;\r\n            if(timer <= 0)\r\n            {\r\n                timer = countDownTimeInSecond;\r\n                DoCountDown();\r\n            }\r\n        }",
                    "Line": 33
                  },
                  {
                    "Statement": "if (countDowns.Count == 0) return;",
                    "Line": 34
                  },
                  {
                    "Statement": "return;",
                    "Line": 34
                  },
                  {
                    "Statement": "CheckIsActive();",
                    "Line": 35
                  },
                  {
                    "Statement": "timer -= Time.deltaTime;",
                    "Line": 36
                  },
                  {
                    "Statement": "if(timer <= 0)\r\n            {\r\n                timer = countDownTimeInSecond;\r\n                DoCountDown();\r\n            }",
                    "Line": 37
                  },
                  {
                    "Statement": "{\r\n                timer = countDownTimeInSecond;\r\n                DoCountDown();\r\n            }",
                    "Line": 38
                  },
                  {
                    "Statement": "timer = countDownTimeInSecond;",
                    "Line": 39
                  },
                  {
                    "Statement": "DoCountDown();",
                    "Line": 40
                  }
                ]
              }
            ],
            "Fields": []
          }
        ],
        "Usings": []
      }
    ],
    "Classes": [],
    "Usings": [
      {
        "Name": "System.Collections",
        "Line": 0
      },
      {
        "Name": "System.Collections.Generic",
        "Line": 1
      },
      {
        "Name": "UnityEngine",
        "Line": 2
      }
    ]
  },
  {
    "Name": "EffectManager",
    "Interfaces": [],
    "Namespaces": [],
    "Classes": [
      {
        "Name": "EffectManager",
        "Modifier": "public",
        "Inheritance": "MonoBehaviour",
        "Line": 6,
        "Interfaces": [],
        "Properties": [],
        "Methods": [
          {
            "Name": "Awake",
            "Modifiers": [],
            "Line": 11,
            "Parameters": [],
            "Invocations": [
              {
                "Line": 13,
                "Name": "Application.streamingAssetsPath, effectsWrapperPath",
                "FullName": "System.IO.Path.Combine(string, string)",
                "Parameters": []
              },
              {
                "Line": 14,
                "Name": "",
                "FullName": "EffectManager.LoadEffectWrapper()",
                "Parameters": []
              }
            ],
            "Variables": [],
            "Statements": [
              {
                "Statement": "{\r\n        effectsWrapperPath = Path.Combine(Application.streamingAssetsPath, effectsWrapperPath);\r\n        LoadEffectWrapper();\r\n    }",
                "Line": 12
              },
              {
                "Statement": "effectsWrapperPath = Path.Combine(Application.streamingAssetsPath, effectsWrapperPath);",
                "Line": 13
              },
              {
                "Statement": "LoadEffectWrapper();",
                "Line": 14
              }
            ]
          },
          {
            "Name": "Effects",
            "Modifiers": [],
            "Line": 17,
            "Parameters": [
              {
                "Name": "components",
                "Type": "List<string>",
                "Assignment": null
              }
            ],
            "Invocations": [
              {
                "Line": 26,
                "Name": "e",
                "FullName": "System.Collections.Generic.List<string>.Contains(string)",
                "Parameters": []
              },
              {
                "Line": 26,
                "Name": "e",
                "FullName": "System.Collections.Generic.List<string>.Add(string)",
                "Parameters": []
              }
            ],
            "Variables": [
              {
                "Name": "effects",
                "Type": "List<string>",
                "Assignment": "new List<string>()",
                "Line": 19
              }
            ],
            "Statements": [
              {
                "Statement": "{\r\n        List<string> effects = new List<string>();\r\n        foreach(string s in components)\r\n        {\r\n            try\r\n            {\r\n                foreach (string e in effectsWrapper[s])\r\n                {\r\n                    if(!effects.Contains(e)) effects.Add(e);\r\n                }\r\n                \r\n            }catch(Exception) { }\r\n        }\r\n        return effects;\r\n    }",
                "Line": 18
              },
              {
                "Statement": "List<string> effects = new List<string>();",
                "Line": 19
              },
              {
                "Statement": "foreach(string s in components)\r\n        {\r\n            try\r\n            {\r\n                foreach (string e in effectsWrapper[s])\r\n                {\r\n                    if(!effects.Contains(e)) effects.Add(e);\r\n                }\r\n                \r\n            }catch(Exception) { }\r\n        }",
                "Line": 20
              },
              {
                "Statement": "{\r\n            try\r\n            {\r\n                foreach (string e in effectsWrapper[s])\r\n                {\r\n                    if(!effects.Contains(e)) effects.Add(e);\r\n                }\r\n                \r\n            }catch(Exception) { }\r\n        }",
                "Line": 21
              },
              {
                "Statement": "try\r\n            {\r\n                foreach (string e in effectsWrapper[s])\r\n                {\r\n                    if(!effects.Contains(e)) effects.Add(e);\r\n                }\r\n                \r\n            }catch(Exception) { }",
                "Line": 22
              },
              {
                "Statement": "{\r\n                foreach (string e in effectsWrapper[s])\r\n                {\r\n                    if(!effects.Contains(e)) effects.Add(e);\r\n                }\r\n                \r\n            }",
                "Line": 23
              },
              {
                "Statement": "foreach (string e in effectsWrapper[s])\r\n                {\r\n                    if(!effects.Contains(e)) effects.Add(e);\r\n                }",
                "Line": 24
              },
              {
                "Statement": "{\r\n                    if(!effects.Contains(e)) effects.Add(e);\r\n                }",
                "Line": 25
              },
              {
                "Statement": "if(!effects.Contains(e)) effects.Add(e);",
                "Line": 26
              },
              {
                "Statement": "effects.Add(e);",
                "Line": 26
              },
              {
                "Statement": "{ }",
                "Line": 29
              },
              {
                "Statement": "return effects;",
                "Line": 31
              }
            ]
          },
          {
            "Name": "AddEffect",
            "Modifiers": [],
            "Line": 34,
            "Parameters": [
              {
                "Name": "component",
                "Type": "string",
                "Assignment": null
              },
              {
                "Name": "effect",
                "Type": "string",
                "Assignment": null
              }
            ],
            "Invocations": [
              {
                "Line": 36,
                "Name": "component",
                "FullName": "System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>>.ContainsKey(string)",
                "Parameters": []
              },
              {
                "Line": 36,
                "Name": "component, new List<string>()",
                "FullName": "System.Collections.Generic.Dictionary<string, System.Collections.Generic.List<string>>.Add(string, System.Collections.Generic.List<string>)",
                "Parameters": []
              },
              {
                "Line": 37,
                "Name": "effect",
                "FullName": "System.Collections.Generic.List<string>.Add(string)",
                "Parameters": []
              }
            ],
            "Variables": [],
            "Statements": [
              {
                "Statement": "{\r\n        if (!effectsWrapper.ContainsKey(component)) effectsWrapper.Add(component, new List<string>());\r\n        effectsWrapper[component].Add(effect);\r\n    }",
                "Line": 35
              },
              {
                "Statement": "if (!effectsWrapper.ContainsKey(component)) effectsWrapper.Add(component, new List<string>());",
                "Line": 36
              },
              {
                "Statement": "effectsWrapper.Add(component, new List<string>());",
                "Line": 36
              },
              {
                "Statement": "effectsWrapper[component].Add(effect);",
                "Line": 37
              }
            ]
          },
          {
            "Name": "LoadEffectWrapper",
            "Modifiers": [],
            "Line": 40,
            "Parameters": [],
            "Invocations": [
              {
                "Line": 42,
                "Name": "effectsWrapperPath",
                "FullName": "EffectManager.CheckDirectory(string)",
                "Parameters": []
              },
              {
                "Line": 43,
                "Name": "effectsWrapperPath, \"*.csv\"",
                "FullName": "System.IO.Directory.GetFiles(string, string)",
                "Parameters": []
              },
              {
                "Line": 46,
                "Name": "fileName",
                "FullName": "EffectManager.LoadSingleFile(string)",
                "Parameters": []
              }
            ],
            "Variables": [
              {
                "Name": "fileEntries",
                "Type": "string[]",
                "Assignment": "Directory.GetFiles(effectsWrapperPath, \"*.csv\")",
                "Line": 43
              }
            ],
            "Statements": [
              {
                "Statement": "{\r\n        if (!CheckDirectory(effectsWrapperPath)) return;\r\n        string[] fileEntries = Directory.GetFiles(effectsWrapperPath, \"*.csv\");\r\n        foreach (string fileName in fileEntries)\r\n        {\r\n            LoadSingleFile(fileName);\r\n        }\r\n    }",
                "Line": 41
              },
              {
                "Statement": "if (!CheckDirectory(effectsWrapperPath)) return;",
                "Line": 42
              },
              {
                "Statement": "return;",
                "Line": 42
              },
              {
                "Statement": "string[] fileEntries = Directory.GetFiles(effectsWrapperPath, \"*.csv\");",
                "Line": 43
              },
              {
                "Statement": "foreach (string fileName in fileEntries)\r\n        {\r\n            LoadSingleFile(fileName);\r\n        }",
                "Line": 44
              },
              {
                "Statement": "{\r\n            LoadSingleFile(fileName);\r\n        }",
                "Line": 45
              },
              {
                "Statement": "LoadSingleFile(fileName);",
                "Line": 46
              }
            ]
          },
          {
            "Name": "LoadSingleFile",
            "Modifiers": [],
            "Line": 50,
            "Parameters": [
              {
                "Name": "fileName",
                "Type": "string",
                "Assignment": null
              }
            ],
            "Invocations": [
              {
                "Line": 52,
                "Name": "fileName",
                "FullName": "EffectManager.CheckFile(string)",
                "Parameters": []
              },
              {
                "Line": 53,
                "Name": "fileName",
                "FullName": "System.IO.File.ReadAllLines(string)",
                "Parameters": []
              },
              {
                "Line": 56,
                "Name": "','",
                "FullName": "string.Split(params char[])",
                "Parameters": []
              },
              {
                "Line": 57,
                "Name": "",
                "FullName": "string.Trim()",
                "Parameters": []
              },
              {
                "Line": 58,
                "Name": "",
                "FullName": "string.Trim()",
                "Parameters": []
              },
              {
                "Line": 59,
                "Name": "component, effect",
                "FullName": "EffectManager.AddEffect(string, string)",
                "Parameters": []
              }
            ],
            "Variables": [
              {
                "Name": "lines",
                "Type": "string[]",
                "Assignment": "File.ReadAllLines(fileName)",
                "Line": 53
              },
              {
                "Name": "items",
                "Type": "string[]",
                "Assignment": "l.Split(',')",
                "Line": 56
              },
              {
                "Name": "component",
                "Type": "string",
                "Assignment": "items[0].Trim()",
                "Line": 57
              },
              {
                "Name": "effect",
                "Type": "string",
                "Assignment": "items[1].Trim()",
                "Line": 58
              }
            ],
            "Statements": [
              {
                "Statement": "{\r\n        if (!CheckFile(fileName)) return;\r\n        string[] lines = File.ReadAllLines(fileName);\r\n        foreach (string l in lines)\r\n        {\r\n            string[] items = l.Split(',');\r\n            string component = items[0].Trim();\r\n            string effect = items[1].Trim();\r\n            AddEffect(component, effect);\r\n        }\r\n    }",
                "Line": 51
              },
              {
                "Statement": "if (!CheckFile(fileName)) return;",
                "Line": 52
              },
              {
                "Statement": "return;",
                "Line": 52
              },
              {
                "Statement": "string[] lines = File.ReadAllLines(fileName);",
                "Line": 53
              },
              {
                "Statement": "foreach (string l in lines)\r\n        {\r\n            string[] items = l.Split(',');\r\n            string component = items[0].Trim();\r\n            string effect = items[1].Trim();\r\n            AddEffect(component, effect);\r\n        }",
                "Line": 54
              },
              {
                "Statement": "{\r\n            string[] items = l.Split(',');\r\n            string component = items[0].Trim();\r\n            string effect = items[1].Trim();\r\n            AddEffect(component, effect);\r\n        }",
                "Line": 55
              },
              {
                "Statement": "string[] items = l.Split(',');",
                "Line": 56
              },
              {
                "Statement": "string component = items[0].Trim();",
                "Line": 57
              },
              {
                "Statement": "string effect = items[1].Trim();",
                "Line": 58
              },
              {
                "Statement": "AddEffect(component, effect);",
                "Line": 59
              }
            ]
          },
          {
            "Name": "CheckDirectory",
            "Modifiers": [],
            "Line": 63,
            "Parameters": [
              {
                "Name": "path",
                "Type": "string",
                "Assignment": null
              }
            ],
            "Invocations": [
              {
                "Line": 65,
                "Name": "path",
                "FullName": "System.IO.Directory.Exists(string)",
                "Parameters": []
              },
              {
                "Line": 67,
                "Name": "\"Directory Not Found\"",
                "FullName": "UnityEngine.Debug.LogError(object)",
                "Parameters": []
              }
            ],
            "Variables": [],
            "Statements": [
              {
                "Statement": "{\r\n        if (!Directory.Exists(path))\r\n        {\r\n            Debug.LogError(\"Directory Not Found\");\r\n            return false;\r\n        }\r\n        return true;\r\n    }",
                "Line": 64
              },
              {
                "Statement": "if (!Directory.Exists(path))\r\n        {\r\n            Debug.LogError(\"Directory Not Found\");\r\n            return false;\r\n        }",
                "Line": 65
              },
              {
                "Statement": "{\r\n            Debug.LogError(\"Directory Not Found\");\r\n            return false;\r\n        }",
                "Line": 66
              },
              {
                "Statement": "Debug.LogError(\"Directory Not Found\");",
                "Line": 67
              },
              {
                "Statement": "return false;",
                "Line": 68
              },
              {
                "Statement": "return true;",
                "Line": 70
              }
            ]
          },
          {
            "Name": "CheckFile",
            "Modifiers": [],
            "Line": 73,
            "Parameters": [
              {
                "Name": "path",
                "Type": "string",
                "Assignment": null
              }
            ],
            "Invocations": [
              {
                "Line": 75,
                "Name": "path",
                "FullName": "System.IO.File.Exists(string)",
                "Parameters": []
              },
              {
                "Line": 77,
                "Name": "\"File Not Found\"",
                "FullName": "UnityEngine.Debug.LogError(object)",
                "Parameters": []
              }
            ],
            "Variables": [],
            "Statements": [
              {
                "Statement": "{\r\n        if (!File.Exists(path))\r\n        {\r\n            Debug.LogError(\"File Not Found\");\r\n            return false;\r\n        }\r\n        return true;\r\n    }",
                "Line": 74
              },
              {
                "Statement": "if (!File.Exists(path))\r\n        {\r\n            Debug.LogError(\"File Not Found\");\r\n            return false;\r\n        }",
                "Line": 75
              },
              {
                "Statement": "{\r\n            Debug.LogError(\"File Not Found\");\r\n            return false;\r\n        }",
                "Line": 76
              },
              {
                "Statement": "Debug.LogError(\"File Not Found\");",
                "Line": 77
              },
              {
                "Statement": "return false;",
                "Line": 78
              },
              {
                "Statement": "return true;",
                "Line": 80
              }
            ]
          }
        ],
        "Fields": []
      }
    ],
    "Usings": [
      {
        "Name": "System.Collections",
        "Line": 0
      },
      {
        "Name": "System.Collections.Generic",
        "Line": 1
      },
      {
        "Name": "UnityEngine",
        "Line": 2
      },
      {
        "Name": "System.IO",
        "Line": 3
      },
      {
        "Name": "System",
        "Line": 4
      }
    ]
  },
  {
    "Name": "EventManager",
    "Interfaces": [],
    "Namespaces": [
      {
        "Line": 4,
        "Name": "GameManager",
        "Interfaces": [],
        "Namespaces": [],
        "Classes": [
          {
            "Name": "EventManager",
            "Modifier": "public",
            "Inheritance": "MonoBehaviour",
            "Line": 6,
            "Interfaces": [],
            "Properties": [],
            "Methods": [
              {
                "Name": "Awake",
                "Modifiers": [],
                "Line": 11,
                "Parameters": [],
                "Invocations": [],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            currPvp = pvp;\r\n        }",
                    "Line": 12
                  },
                  {
                    "Statement": "currPvp = pvp;",
                    "Line": 13
                  }
                ]
              },
              {
                "Name": "Update",
                "Modifiers": [],
                "Line": 16,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 21,
                    "Name": "currPvp",
                    "FullName": "GameManager.NetManager.SetPvP(bool)",
                    "Parameters": []
                  },
                  {
                    "Line": 21,
                    "Name": "",
                    "FullName": "UnityEngine.Component.GetComponent<GameManager.NetManager>()",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            if (currPvp != pvp)\r\n            {\r\n                currPvp = pvp;\r\n                GetComponent<NetManager>().SetPvP(currPvp);\r\n            }\r\n        }",
                    "Line": 17
                  },
                  {
                    "Statement": "if (currPvp != pvp)\r\n            {\r\n                currPvp = pvp;\r\n                GetComponent<NetManager>().SetPvP(currPvp);\r\n            }",
                    "Line": 18
                  },
                  {
                    "Statement": "{\r\n                currPvp = pvp;\r\n                GetComponent<NetManager>().SetPvP(currPvp);\r\n            }",
                    "Line": 19
                  },
                  {
                    "Statement": "currPvp = pvp;",
                    "Line": 20
                  },
                  {
                    "Statement": "GetComponent<NetManager>().SetPvP(currPvp);",
                    "Line": 21
                  }
                ]
              }
            ],
            "Fields": []
          }
        ],
        "Usings": []
      }
    ],
    "Classes": [],
    "Usings": [
      {
        "Name": "System.Collections",
        "Line": 0
      },
      {
        "Name": "System.Collections.Generic",
        "Line": 1
      },
      {
        "Name": "UnityEngine",
        "Line": 2
      }
    ]
  },
  {
    "Name": "Feature",
    "Interfaces": [],
    "Namespaces": [
      {
        "Line": 4,
        "Name": "Character",
        "Interfaces": [],
        "Namespaces": [],
        "Classes": [
          {
            "Name": "Feature",
            "Modifier": "public",
            "Inheritance": "Object",
            "Line": 6,
            "Interfaces": [],
            "Properties": [],
            "Methods": [],
            "Fields": []
          }
        ],
        "Usings": []
      }
    ],
    "Classes": [],
    "Usings": [
      {
        "Name": "System.Collections",
        "Line": 0
      },
      {
        "Name": "System.Collections.Generic",
        "Line": 1
      },
      {
        "Name": "UnityEngine",
        "Line": 2
      }
    ]
  },
  {
    "Name": "FeatureManager",
    "Interfaces": [],
    "Namespaces": [
      {
        "Line": 8,
        "Name": "Character",
        "Interfaces": [],
        "Namespaces": [],
        "Classes": [
          {
            "Name": "FeatureManager",
            "Modifier": "public",
            "Inheritance": "MonoBehaviour",
            "Line": 10,
            "Interfaces": [],
            "Properties": [],
            "Methods": [
              {
                "Name": "Awake",
                "Modifiers": [],
                "Line": 40,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 42,
                    "Name": "Application.streamingAssetsPath, featuresDirectory",
                    "FullName": "System.IO.Path.Combine(string, string)",
                    "Parameters": []
                  },
                  {
                    "Line": 43,
                    "Name": "",
                    "FullName": "UnityEngine.Component.GetComponent<Character.ComponentManager>()",
                    "Parameters": []
                  },
                  {
                    "Line": 44,
                    "Name": "",
                    "FullName": "Character.FeatureManager.LoadFeatures()",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            featuresDirectory = Path.Combine(Application.streamingAssetsPath, featuresDirectory);\r\n            componentManager = GetComponent<ComponentManager>();\r\n            LoadFeatures();\r\n            componentManager.ObjectFeatures = features;\r\n        }",
                    "Line": 41
                  },
                  {
                    "Statement": "featuresDirectory = Path.Combine(Application.streamingAssetsPath, featuresDirectory);",
                    "Line": 42
                  },
                  {
                    "Statement": "componentManager = GetComponent<ComponentManager>();",
                    "Line": 43
                  },
                  {
                    "Statement": "LoadFeatures();",
                    "Line": 44
                  },
                  {
                    "Statement": "componentManager.ObjectFeatures = features;",
                    "Line": 45
                  }
                ]
              },
              {
                "Name": "LoadFeatures",
                "Modifiers": [],
                "Line": 48,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 50,
                    "Name": "featuresDirectory",
                    "FullName": "System.IO.Directory.Exists(string)",
                    "Parameters": []
                  },
                  {
                    "Line": 52,
                    "Name": "\"Features Directory Not Found\"",
                    "FullName": "UnityEngine.Debug.LogError(object)",
                    "Parameters": []
                  },
                  {
                    "Line": 55,
                    "Name": "featuresDirectory, \"*.csv\"",
                    "FullName": "System.IO.Directory.GetFiles(string, string)",
                    "Parameters": []
                  },
                  {
                    "Line": 58,
                    "Name": "fileName",
                    "FullName": "System.IO.File.ReadAllLines(string)",
                    "Parameters": []
                  },
                  {
                    "Line": 61,
                    "Name": "','",
                    "FullName": "string.Split(params char[])",
                    "Parameters": []
                  },
                  {
                    "Line": 62,
                    "Name": "",
                    "FullName": "string.Trim()",
                    "Parameters": []
                  },
                  {
                    "Line": 63,
                    "Name": "items[1]",
                    "FullName": "Character.FeatureManager.ParseFloatValue(string)",
                    "Parameters": []
                  },
                  {
                    "Line": 65,
                    "Name": "f",
                    "FullName": "Character.FeatureManager.AddFeature(Character.Feature)",
                    "Parameters": []
                  },
                  {
                    "Line": 66,
                    "Name": "f",
                    "FullName": "Character.FeatureManager.AddBaseFeature(Character.Feature)",
                    "Parameters": []
                  }
                ],
                "Variables": [
                  {
                    "Name": "fileEntries",
                    "Type": "string[]",
                    "Assignment": "Directory.GetFiles(featuresDirectory, \"*.csv\")",
                    "Line": 55
                  },
                  {
                    "Name": "lines",
                    "Type": "string[]",
                    "Assignment": "File.ReadAllLines(fileName)",
                    "Line": 58
                  },
                  {
                    "Name": "items",
                    "Type": "string[]",
                    "Assignment": "l.Split(',')",
                    "Line": 61
                  },
                  {
                    "Name": "type",
                    "Type": "string",
                    "Assignment": "items[0].Trim()",
                    "Line": 62
                  },
                  {
                    "Name": "b_value",
                    "Type": "float",
                    "Assignment": "ParseFloatValue(items[1])",
                    "Line": 63
                  },
                  {
                    "Name": "f",
                    "Type": "Feature",
                    "Assignment": "new Feature(b_value, type)",
                    "Line": 64
                  }
                ],
                "Statements": [
                  {
                    "Statement": "{ \r\n            if (!Directory.Exists(featuresDirectory))\r\n            {\r\n                Debug.LogError(\"Features Directory Not Found\");\r\n                return;\r\n            }\r\n            string[] fileEntries = Directory.GetFiles(featuresDirectory, \"*.csv\");\r\n            foreach (string fileName in fileEntries)\r\n            {\r\n                string[] lines = File.ReadAllLines(fileName);\r\n                foreach (string l in lines)\r\n                {\r\n                    string[] items = l.Split(',');\r\n                    string type = items[0].Trim();\r\n                    float b_value = ParseFloatValue(items[1]);\r\n                    Feature f = new Feature(b_value, type);\r\n                    AddFeature(f);\r\n                    AddBaseFeature(f);\r\n                }\r\n            }\r\n            loaded = true;\r\n        }",
                    "Line": 49
                  },
                  {
                    "Statement": "if (!Directory.Exists(featuresDirectory))\r\n            {\r\n                Debug.LogError(\"Features Directory Not Found\");\r\n                return;\r\n            }",
                    "Line": 50
                  },
                  {
                    "Statement": "{\r\n                Debug.LogError(\"Features Directory Not Found\");\r\n                return;\r\n            }",
                    "Line": 51
                  },
                  {
                    "Statement": "Debug.LogError(\"Features Directory Not Found\");",
                    "Line": 52
                  },
                  {
                    "Statement": "return;",
                    "Line": 53
                  },
                  {
                    "Statement": "string[] fileEntries = Directory.GetFiles(featuresDirectory, \"*.csv\");",
                    "Line": 55
                  },
                  {
                    "Statement": "foreach (string fileName in fileEntries)\r\n            {\r\n                string[] lines = File.ReadAllLines(fileName);\r\n                foreach (string l in lines)\r\n                {\r\n                    string[] items = l.Split(',');\r\n                    string type = items[0].Trim();\r\n                    float b_value = ParseFloatValue(items[1]);\r\n                    Feature f = new Feature(b_value, type);\r\n                    AddFeature(f);\r\n                    AddBaseFeature(f);\r\n                }\r\n            }",
                    "Line": 56
                  },
                  {
                    "Statement": "{\r\n                string[] lines = File.ReadAllLines(fileName);\r\n                foreach (string l in lines)\r\n                {\r\n                    string[] items = l.Split(',');\r\n                    string type = items[0].Trim();\r\n                    float b_value = ParseFloatValue(items[1]);\r\n                    Feature f = new Feature(b_value, type);\r\n                    AddFeature(f);\r\n                    AddBaseFeature(f);\r\n                }\r\n            }",
                    "Line": 57
                  },
                  {
                    "Statement": "string[] lines = File.ReadAllLines(fileName);",
                    "Line": 58
                  },
                  {
                    "Statement": "foreach (string l in lines)\r\n                {\r\n                    string[] items = l.Split(',');\r\n                    string type = items[0].Trim();\r\n                    float b_value = ParseFloatValue(items[1]);\r\n                    Feature f = new Feature(b_value, type);\r\n                    AddFeature(f);\r\n                    AddBaseFeature(f);\r\n                }",
                    "Line": 59
                  },
                  {
                    "Statement": "{\r\n                    string[] items = l.Split(',');\r\n                    string type = items[0].Trim();\r\n                    float b_value = ParseFloatValue(items[1]);\r\n                    Feature f = new Feature(b_value, type);\r\n                    AddFeature(f);\r\n                    AddBaseFeature(f);\r\n                }",
                    "Line": 60
                  },
                  {
                    "Statement": "string[] items = l.Split(',');",
                    "Line": 61
                  },
                  {
                    "Statement": "string type = items[0].Trim();",
                    "Line": 62
                  },
                  {
                    "Statement": "float b_value = ParseFloatValue(items[1]);",
                    "Line": 63
                  },
                  {
                    "Statement": "Feature f = new Feature(b_value, type);",
                    "Line": 64
                  },
                  {
                    "Statement": "AddFeature(f);",
                    "Line": 65
                  },
                  {
                    "Statement": "AddBaseFeature(f);",
                    "Line": 66
                  },
                  {
                    "Statement": "loaded = true;",
                    "Line": 69
                  }
                ]
              },
              {
                "Name": "ParseFloatValue",
                "Modifiers": [],
                "Line": 72,
                "Parameters": [
                  {
                    "Name": "val",
                    "Type": "string",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 74,
                    "Name": "val, System.Globalization.NumberStyles.Any, System.Globalization.CultureInfo.InvariantCulture",
                    "FullName": "float.Parse(string, System.Globalization.NumberStyles, System.IFormatProvider)",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            return float.Parse(val, System.Globalization.NumberStyles.Any, System.Globalization.CultureInfo.InvariantCulture);\r\n        }",
                    "Line": 73
                  },
                  {
                    "Statement": "return float.Parse(val, System.Globalization.NumberStyles.Any, System.Globalization.CultureInfo.InvariantCulture);",
                    "Line": 74
                  }
                ]
              },
              {
                "Name": "FeatureValue",
                "Modifiers": [],
                "Line": 77,
                "Parameters": [
                  {
                    "Name": "feature",
                    "Type": "string",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 79,
                    "Name": "",
                    "FullName": "string.ToUpper()",
                    "Parameters": []
                  },
                  {
                    "Line": 83,
                    "Name": "f",
                    "FullName": "Character.FeatureManager.AddFeature(Character.Feature)",
                    "Parameters": []
                  }
                ],
                "Variables": [
                  {
                    "Name": "f",
                    "Type": "Feature",
                    "Assignment": "new Feature(feature)",
                    "Line": 83
                  }
                ],
                "Statements": [
                  {
                    "Statement": "{\r\n            feature = feature.ToUpper();\r\n            try { \r\n                return features[feature].CurrValue; \r\n            } catch (Exception) { \r\n                Feature f = new Feature(feature); AddFeature(f); return f.CurrValue; \r\n            }\r\n        }",
                    "Line": 78
                  },
                  {
                    "Statement": "feature = feature.ToUpper();",
                    "Line": 79
                  },
                  {
                    "Statement": "try { \r\n                return features[feature].CurrValue; \r\n            } catch (Exception) { \r\n                Feature f = new Feature(feature); AddFeature(f); return f.CurrValue; \r\n            }",
                    "Line": 80
                  },
                  {
                    "Statement": "{ \r\n                return features[feature].CurrValue; \r\n            }",
                    "Line": 80
                  },
                  {
                    "Statement": "return features[feature].CurrValue;",
                    "Line": 81
                  },
                  {
                    "Statement": "{ \r\n                Feature f = new Feature(feature); AddFeature(f); return f.CurrValue; \r\n            }",
                    "Line": 82
                  },
                  {
                    "Statement": "Feature f = new Feature(feature);",
                    "Line": 83
                  },
                  {
                    "Statement": "AddFeature(f);",
                    "Line": 83
                  },
                  {
                    "Statement": "return f.CurrValue;",
                    "Line": 83
                  }
                ]
              },
              {
                "Name": "TickValue",
                "Modifiers": [],
                "Line": 87,
                "Parameters": [
                  {
                    "Name": "feature",
                    "Type": "string",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 89,
                    "Name": "feature",
                    "FullName": "Character.ComponentManager.AddTickable(string)",
                    "Parameters": []
                  },
                  {
                    "Line": 90,
                    "Name": "",
                    "FullName": "string.ToUpper()",
                    "Parameters": []
                  },
                  {
                    "Line": 97,
                    "Name": "f",
                    "FullName": "Character.FeatureManager.AddFeature(Character.Feature)",
                    "Parameters": []
                  }
                ],
                "Variables": [
                  {
                    "Name": "currValue",
                    "Type": "float",
                    "Assignment": null,
                    "Line": 91
                  },
                  {
                    "Name": "f",
                    "Type": "Feature",
                    "Assignment": "new Feature(feature)",
                    "Line": 97
                  }
                ],
                "Statements": [
                  {
                    "Statement": "{\r\n            componentManager.AddTickable(feature);\r\n            feature = feature.ToUpper();\r\n            float currValue;\r\n            try {\r\n                currValue = features[feature].CurrValue;\r\n                features[feature].CurrValue = 0;\r\n            }\r\n            catch (Exception) {\r\n                Feature f = new Feature(feature); AddFeature(f); currValue = f.CurrValue;\r\n            }\r\n            return currValue;\r\n        }",
                    "Line": 88
                  },
                  {
                    "Statement": "componentManager.AddTickable(feature);",
                    "Line": 89
                  },
                  {
                    "Statement": "feature = feature.ToUpper();",
                    "Line": 90
                  },
                  {
                    "Statement": "float currValue;",
                    "Line": 91
                  },
                  {
                    "Statement": "try {\r\n                currValue = features[feature].CurrValue;\r\n                features[feature].CurrValue = 0;\r\n            }\r\n            catch (Exception) {\r\n                Feature f = new Feature(feature); AddFeature(f); currValue = f.CurrValue;\r\n            }",
                    "Line": 92
                  },
                  {
                    "Statement": "{\r\n                currValue = features[feature].CurrValue;\r\n                features[feature].CurrValue = 0;\r\n            }",
                    "Line": 92
                  },
                  {
                    "Statement": "currValue = features[feature].CurrValue;",
                    "Line": 93
                  },
                  {
                    "Statement": "features[feature].CurrValue = 0;",
                    "Line": 94
                  },
                  {
                    "Statement": "{\r\n                Feature f = new Feature(feature); AddFeature(f); currValue = f.CurrValue;\r\n            }",
                    "Line": 96
                  },
                  {
                    "Statement": "Feature f = new Feature(feature);",
                    "Line": 97
                  },
                  {
                    "Statement": "AddFeature(f);",
                    "Line": 97
                  },
                  {
                    "Statement": "currValue = f.CurrValue;",
                    "Line": 97
                  },
                  {
                    "Statement": "return currValue;",
                    "Line": 99
                  }
                ]
              },
              {
                "Name": "GetSingleFeature",
                "Modifiers": [],
                "Line": 102,
                "Parameters": [
                  {
                    "Name": "type",
                    "Type": "string",
                    "Assignment": null
                  }
                ],
                "Invocations": [],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            return features[type];\r\n        }",
                    "Line": 103
                  },
                  {
                    "Statement": "return features[type];",
                    "Line": 104
                  }
                ]
              },
              {
                "Name": "AddFeature",
                "Modifiers": [],
                "Line": 107,
                "Parameters": [
                  {
                    "Name": "f",
                    "Type": "Feature",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 109,
                    "Name": "f.Type, f",
                    "FullName": "System.Collections.Generic.Dictionary<string, Character.Feature>.Add(string, Character.Feature)",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            features.Add(f.Type, f);\r\n        }",
                    "Line": 108
                  },
                  {
                    "Statement": "features.Add(f.Type, f);",
                    "Line": 109
                  }
                ]
              },
              {
                "Name": "AddBaseFeature",
                "Modifiers": [],
                "Line": 112,
                "Parameters": [
                  {
                    "Name": "f",
                    "Type": "Feature",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 114,
                    "Name": "f.Type, f",
                    "FullName": "System.Collections.Generic.Dictionary<string, Character.Feature>.Add(string, Character.Feature)",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            baseFeatures.Add(f.Type, f);\r\n        }",
                    "Line": 113
                  },
                  {
                    "Statement": "baseFeatures.Add(f.Type, f);",
                    "Line": 114
                  }
                ]
              },
              {
                "Name": "AddFeature",
                "Modifiers": [],
                "Line": 117,
                "Parameters": [
                  {
                    "Name": "type",
                    "Type": "string",
                    "Assignment": null
                  },
                  {
                    "Name": "val",
                    "Type": "float",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 119,
                    "Name": "new Feature(val, type)",
                    "FullName": "Character.FeatureManager.AddFeature(Character.Feature)",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            AddFeature(new Feature(val, type));\r\n        }",
                    "Line": 118
                  },
                  {
                    "Statement": "AddFeature(new Feature(val, type));",
                    "Line": 119
                  }
                ]
              },
              {
                "Name": "RemoveFeature",
                "Modifiers": [],
                "Line": 122,
                "Parameters": [
                  {
                    "Name": "f",
                    "Type": "Feature",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 124,
                    "Name": "f.Type",
                    "FullName": "System.Collections.Generic.Dictionary<string, Character.Feature>.Remove(string)",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            features.Remove(f.Type);\r\n        }",
                    "Line": 123
                  },
                  {
                    "Statement": "features.Remove(f.Type);",
                    "Line": 124
                  }
                ]
              },
              {
                "Name": "RemoveFeature",
                "Modifiers": [],
                "Line": 127,
                "Parameters": [
                  {
                    "Name": "f",
                    "Type": "string",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 129,
                    "Name": "f",
                    "FullName": "System.Collections.Generic.Dictionary<string, Character.Feature>.Remove(string)",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            features.Remove(f);\r\n        }",
                    "Line": 128
                  },
                  {
                    "Statement": "features.Remove(f);",
                    "Line": 129
                  }
                ]
              }
            ],
            "Fields": []
          }
        ],
        "Usings": []
      }
    ],
    "Classes": [],
    "Usings": [
      {
        "Name": "System.Collections",
        "Line": 0
      },
      {
        "Name": "System.Collections.Generic",
        "Line": 1
      },
      {
        "Name": "System.Linq",
        "Line": 2
      },
      {
        "Name": "System",
        "Line": 3
      },
      {
        "Name": "System.IO",
        "Line": 4
      },
      {
        "Name": "UnityEngine",
        "Line": 5
      },
      {
        "Name": "Unity.IO",
        "Line": 6
      }
    ]
  },
  {
    "Name": "Gear",
    "Interfaces": [],
    "Namespaces": [
      {
        "Line": 4,
        "Name": "Character",
        "Interfaces": [],
        "Namespaces": [],
        "Classes": [
          {
            "Name": "Gear",
            "Modifier": "public",
            "Inheritance": "UAComponent",
            "Line": 6,
            "Interfaces": [],
            "Properties": [],
            "Methods": [
              {
                "Name": "AddToTick",
                "Modifiers": [],
                "Line": 22,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 24,
                    "Name": "TICK",
                    "FullName": "Character.UAComponent.CheckFeature(string)",
                    "Parameters": []
                  },
                  {
                    "Line": 26,
                    "Name": "",
                    "FullName": "Character.Tick.DoTick()",
                    "Parameters": []
                  },
                  {
                    "Line": 27,
                    "Name": "t",
                    "FullName": "Character.TickManager.AddTick(Character.Tick)",
                    "Parameters": []
                  }
                ],
                "Variables": [
                  {
                    "Name": "t",
                    "Type": "Tick",
                    "Assignment": "new Tick(this, TICK, (int)m_features[TICK].CurrValue)",
                    "Line": 25
                  }
                ],
                "Statements": [
                  {
                    "Statement": "{\r\n            if (!CheckFeature(TICK)) return;\r\n            Tick t = new Tick(this, TICK, (int)m_features[TICK].CurrValue);\r\n            t.DoTick();\r\n            tm.AddTick(t);\r\n        }",
                    "Line": 23
                  },
                  {
                    "Statement": "if (!CheckFeature(TICK)) return;",
                    "Line": 24
                  },
                  {
                    "Statement": "return;",
                    "Line": 24
                  },
                  {
                    "Statement": "Tick t = new Tick(this, TICK, (int)m_features[TICK].CurrValue);",
                    "Line": 25
                  },
                  {
                    "Statement": "t.DoTick();",
                    "Line": 26
                  },
                  {
                    "Statement": "tm.AddTick(t);",
                    "Line": 27
                  }
                ]
              },
              {
                "Name": "AddToCountdown",
                "Modifiers": [],
                "Line": 30,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 32,
                    "Name": "TIME",
                    "FullName": "Character.UAComponent.CheckFeature(string)",
                    "Parameters": []
                  },
                  {
                    "Line": 33,
                    "Name": "new CountDown(this, TIME, valuePerSecond)",
                    "FullName": "Character.CountDownManager.AddCountDown(Character.CountDown)",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            if (!CheckFeature(TIME)) return;\r\n            cdmanager.AddCountDown(new CountDown(this, TIME, valuePerSecond));\r\n        }",
                    "Line": 31
                  },
                  {
                    "Statement": "if (!CheckFeature(TIME)) return;",
                    "Line": 32
                  },
                  {
                    "Statement": "return;",
                    "Line": 32
                  },
                  {
                    "Statement": "cdmanager.AddCountDown(new CountDown(this, TIME, valuePerSecond));",
                    "Line": 33
                  }
                ]
              }
            ],
            "Fields": []
          }
        ],
        "Usings": []
      }
    ],
    "Classes": [],
    "Usings": [
      {
        "Name": "System.Collections",
        "Line": 0
      },
      {
        "Name": "System.Collections.Generic",
        "Line": 1
      },
      {
        "Name": "UnityEngine",
        "Line": 2
      }
    ]
  },
  {
    "Name": "InGameUIManager",
    "Interfaces": [],
    "Namespaces": [
      {
        "Line": 7,
        "Name": "Character",
        "Interfaces": [],
        "Namespaces": [],
        "Classes": [
          {
            "Name": "InGameUIManager",
            "Modifier": "public",
            "Inheritance": "MonoBehaviour",
            "Line": 9,
            "Interfaces": [],
            "Properties": [],
            "Methods": [
              {
                "Name": "Awake",
                "Modifiers": [],
                "Line": 31,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 33,
                    "Name": "",
                    "FullName": "UnityEngine.GameObject.GetComponent<Character.PlayerLifeManager>()",
                    "Parameters": []
                  },
                  {
                    "Line": 34,
                    "Name": "",
                    "FullName": "UnityEngine.GameObject.GetComponent<Weapon.WeaponManager>()",
                    "Parameters": []
                  },
                  {
                    "Line": 35,
                    "Name": "",
                    "FullName": "int.ToString()",
                    "Parameters": []
                  },
                  {
                    "Line": 36,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  },
                  {
                    "Line": 39,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  },
                  {
                    "Line": 40,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  },
                  {
                    "Line": 41,
                    "Name": "",
                    "FullName": "UnityEngine.GameObject.GetComponent<AudioManagerPkg.AudioManager>()",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            lifeManager = playerManager.GetComponent<PlayerLifeManager>();\r\n            weaponManager = playerManager.GetComponent<WeaponManager>();\r\n            maxHealth.text = lifeManager.MaxHealth.ToString();\r\n            placeholderVal = Mathf.CeilToInt(placeHolder.rectTransform.sizeDelta.x);\r\n            maxVal = 1 / (float)lifeManager.MaxHealth;\r\n            healthFeedback.color = new Color(0, 0, 0, 0);\r\n            feedbackTime = healthFeedback.GetComponent<UiFeedback>().FeedbackTime;\r\n            maxTransparency = healthFeedback.GetComponent<UiFeedback>().MaxTransparency;\r\n            audioManager = audioManagerObj.GetComponent<AudioManager>();\r\n        }",
                    "Line": 32
                  },
                  {
                    "Statement": "lifeManager = playerManager.GetComponent<PlayerLifeManager>();",
                    "Line": 33
                  },
                  {
                    "Statement": "weaponManager = playerManager.GetComponent<WeaponManager>();",
                    "Line": 34
                  },
                  {
                    "Statement": "maxHealth.text = lifeManager.MaxHealth.ToString();",
                    "Line": 35
                  },
                  {
                    "Statement": "placeholderVal = Mathf.CeilToInt(placeHolder.rectTransform.sizeDelta.x);",
                    "Line": 36
                  },
                  {
                    "Statement": "maxVal = 1 / (float)lifeManager.MaxHealth;",
                    "Line": 37
                  },
                  {
                    "Statement": "healthFeedback.color = new Color(0, 0, 0, 0);",
                    "Line": 38
                  },
                  {
                    "Statement": "feedbackTime = healthFeedback.GetComponent<UiFeedback>().FeedbackTime;",
                    "Line": 39
                  },
                  {
                    "Statement": "maxTransparency = healthFeedback.GetComponent<UiFeedback>().MaxTransparency;",
                    "Line": 40
                  },
                  {
                    "Statement": "audioManager = audioManagerObj.GetComponent<AudioManager>();",
                    "Line": 41
                  }
                ]
              },
              {
                "Name": "FixedUpdate",
                "Modifiers": [],
                "Line": 44,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 46,
                    "Name": "",
                    "FullName": "int.ToString()",
                    "Parameters": []
                  },
                  {
                    "Line": 47,
                    "Name": "",
                    "FullName": "int.ToString()",
                    "Parameters": []
                  },
                  {
                    "Line": 52,
                    "Name": "lifeManager.Health",
                    "FullName": "Character.InGameUIManager.LifeBarCalc(int)",
                    "Parameters": []
                  }
                ],
                "Variables": [
                  {
                    "Name": "c",
                    "Type": "Color",
                    "Assignment": "healthFeedback.color",
                    "Line": 55
                  }
                ],
                "Statements": [
                  {
                    "Statement": "{\r\n            health.text = lifeManager.Health.ToString();\r\n            armor.text = lifeManager.Armor.ToString();\r\n            weapon.text = \"\";//weaponManager.GetActiveWeaponName();\r\n            //if (weaponManager.ActiveWeaponStatus.Has_infinite_ammo) { ammo.text = \"\\u221E\"; ammo.fontSize = 65; }  \r\n            //else { ammo.text = weaponManager.GetActiveWeaponAmmo().ToString(); ammo.fontSize = 30; }\r\n            ammo.text = \"\\u221E\";\r\n            lifeBar.rectTransform.sizeDelta = new Vector2(LifeBarCalc(lifeManager.Health), lifeBar.rectTransform.sizeDelta.y);\r\n            if (isFeedback)\r\n            {\r\n                Color c = healthFeedback.color;\r\n                if (colorUp){ \r\n                    if (healthFeedback.color.a < maxTransparency) c.a += feedbackTime; \r\n                    if (healthFeedback.color.a >= maxTransparency) colorUp = false; \r\n                }  \r\n                if(!colorUp) c.a -= feedbackTime; \r\n                healthFeedback.color = c;\r\n                if (healthFeedback.color.a <= 0) isFeedback = false;\r\n            }\r\n        }",
                    "Line": 45
                  },
                  {
                    "Statement": "health.text = lifeManager.Health.ToString();",
                    "Line": 46
                  },
                  {
                    "Statement": "armor.text = lifeManager.Armor.ToString();",
                    "Line": 47
                  },
                  {
                    "Statement": "weapon.text = \"\";",
                    "Line": 48
                  },
                  {
                    "Statement": "ammo.text = \"\\u221E\";",
                    "Line": 51
                  },
                  {
                    "Statement": "lifeBar.rectTransform.sizeDelta = new Vector2(LifeBarCalc(lifeManager.Health), lifeBar.rectTransform.sizeDelta.y);",
                    "Line": 52
                  },
                  {
                    "Statement": "if (isFeedback)\r\n            {\r\n                Color c = healthFeedback.color;\r\n                if (colorUp){ \r\n                    if (healthFeedback.color.a < maxTransparency) c.a += feedbackTime; \r\n                    if (healthFeedback.color.a >= maxTransparency) colorUp = false; \r\n                }  \r\n                if(!colorUp) c.a -= feedbackTime; \r\n                healthFeedback.color = c;\r\n                if (healthFeedback.color.a <= 0) isFeedback = false;\r\n            }",
                    "Line": 53
                  },
                  {
                    "Statement": "{\r\n                Color c = healthFeedback.color;\r\n                if (colorUp){ \r\n                    if (healthFeedback.color.a < maxTransparency) c.a += feedbackTime; \r\n                    if (healthFeedback.color.a >= maxTransparency) colorUp = false; \r\n                }  \r\n                if(!colorUp) c.a -= feedbackTime; \r\n                healthFeedback.color = c;\r\n                if (healthFeedback.color.a <= 0) isFeedback = false;\r\n            }",
                    "Line": 54
                  },
                  {
                    "Statement": "Color c = healthFeedback.color;",
                    "Line": 55
                  },
                  {
                    "Statement": "if (colorUp){ \r\n                    if (healthFeedback.color.a < maxTransparency) c.a += feedbackTime; \r\n                    if (healthFeedback.color.a >= maxTransparency) colorUp = false; \r\n                }",
                    "Line": 56
                  },
                  {
                    "Statement": "{ \r\n                    if (healthFeedback.color.a < maxTransparency) c.a += feedbackTime; \r\n                    if (healthFeedback.color.a >= maxTransparency) colorUp = false; \r\n                }",
                    "Line": 56
                  },
                  {
                    "Statement": "if (healthFeedback.color.a < maxTransparency) c.a += feedbackTime;",
                    "Line": 57
                  },
                  {
                    "Statement": "c.a += feedbackTime;",
                    "Line": 57
                  },
                  {
                    "Statement": "if (healthFeedback.color.a >= maxTransparency) colorUp = false;",
                    "Line": 58
                  },
                  {
                    "Statement": "colorUp = false;",
                    "Line": 58
                  },
                  {
                    "Statement": "if(!colorUp) c.a -= feedbackTime;",
                    "Line": 60
                  },
                  {
                    "Statement": "c.a -= feedbackTime;",
                    "Line": 60
                  },
                  {
                    "Statement": "healthFeedback.color = c;",
                    "Line": 61
                  },
                  {
                    "Statement": "if (healthFeedback.color.a <= 0) isFeedback = false;",
                    "Line": 62
                  },
                  {
                    "Statement": "isFeedback = false;",
                    "Line": 62
                  }
                ]
              },
              {
                "Name": "LifeBarCalc",
                "Modifiers": [],
                "Line": 66,
                "Parameters": [
                  {
                    "Name": "val",
                    "Type": "int",
                    "Assignment": null
                  }
                ],
                "Invocations": [],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            return (val * maxVal) * placeholderVal;\r\n        }",
                    "Line": 67
                  },
                  {
                    "Statement": "return (val * maxVal) * placeholderVal;",
                    "Line": 68
                  }
                ]
              },
              {
                "Name": "DoFeedback",
                "Modifiers": [],
                "Line": 71,
                "Parameters": [
                  {
                    "Name": "color",
                    "Type": "Color",
                    "Assignment": null
                  }
                ],
                "Invocations": [],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            color.a = 0.0f;\r\n            healthFeedback.color = color;\r\n            colorUp = true;\r\n            isFeedback = true;\r\n        }",
                    "Line": 72
                  },
                  {
                    "Statement": "color.a = 0.0f;",
                    "Line": 73
                  },
                  {
                    "Statement": "healthFeedback.color = color;",
                    "Line": 74
                  },
                  {
                    "Statement": "colorUp = true;",
                    "Line": 75
                  },
                  {
                    "Statement": "isFeedback = true;",
                    "Line": 76
                  }
                ]
              },
              {
                "Name": "CollectibleFeedback",
                "Modifiers": [],
                "Line": 79,
                "Parameters": [
                  {
                    "Name": "o",
                    "Type": "GameObject",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 81,
                    "Name": "",
                    "FullName": "UnityEngine.GameObject.GetComponent<CollectibleFeedback>()",
                    "Parameters": []
                  },
                  {
                    "Line": 83,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  },
                  {
                    "Line": 83,
                    "Name": "",
                    "FullName": "UnityEngine.GameObject.GetComponent<CollectibleFeedback>()",
                    "Parameters": []
                  },
                  {
                    "Line": 84,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  },
                  {
                    "Line": 84,
                    "Name": "",
                    "FullName": "UnityEngine.GameObject.GetComponent<CollectibleFeedback>()",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            if (o.GetComponent<CollectibleFeedback>().FeedbackColor._isFeedback)\r\n            {\r\n                DoFeedback(o.GetComponent<CollectibleFeedback>().FeedbackColor._feedbackColor);\r\n                audioManager.PlaySound(o.GetComponent<CollectibleFeedback>().Clip);\r\n            }\r\n                \r\n        }",
                    "Line": 80
                  },
                  {
                    "Statement": "if (o.GetComponent<CollectibleFeedback>().FeedbackColor._isFeedback)\r\n            {\r\n                DoFeedback(o.GetComponent<CollectibleFeedback>().FeedbackColor._feedbackColor);\r\n                audioManager.PlaySound(o.GetComponent<CollectibleFeedback>().Clip);\r\n            }",
                    "Line": 81
                  },
                  {
                    "Statement": "{\r\n                DoFeedback(o.GetComponent<CollectibleFeedback>().FeedbackColor._feedbackColor);\r\n                audioManager.PlaySound(o.GetComponent<CollectibleFeedback>().Clip);\r\n            }",
                    "Line": 82
                  },
                  {
                    "Statement": "DoFeedback(o.GetComponent<CollectibleFeedback>().FeedbackColor._feedbackColor);",
                    "Line": 83
                  },
                  {
                    "Statement": "audioManager.PlaySound(o.GetComponent<CollectibleFeedback>().Clip);",
                    "Line": 84
                  }
                ]
              }
            ],
            "Fields": []
          }
        ],
        "Usings": []
      }
    ],
    "Classes": [],
    "Usings": [
      {
        "Name": "System.Collections",
        "Line": 0
      },
      {
        "Name": "System.Collections.Generic",
        "Line": 1
      },
      {
        "Name": "UnityEngine",
        "Line": 2
      },
      {
        "Name": "UnityEngine.UI",
        "Line": 3
      },
      {
        "Name": "Weapon",
        "Line": 4
      },
      {
        "Name": "AudioManagerPkg",
        "Line": 5
      }
    ]
  },
  {
    "Name": "LoadingHandler",
    "Interfaces": [],
    "Namespaces": [],
    "Classes": [
      {
        "Name": "LoadingHandler",
        "Modifier": "public",
        "Inheritance": "MonoBehaviour",
        "Line": 4,
        "Interfaces": [],
        "Properties": [],
        "Methods": [
          {
            "Name": "Rotate",
            "Modifiers": [],
            "Line": 21,
            "Parameters": [],
            "Invocations": [
              {
                "Line": 26,
                "Name": "0, 0, rotation",
                "FullName": "UnityEngine.Quaternion.Euler(float, float, float)",
                "Parameters": []
              },
              {
                "Line": 27,
                "Name": "0, 0, -rotation",
                "FullName": "UnityEngine.Quaternion.Euler(float, float, float)",
                "Parameters": []
              }
            ],
            "Variables": [],
            "Statements": [
              {
                "Statement": "{\r\n        if (isRotate)\r\n        {\r\n            rotation += rotationSpeed;\r\n            if (!isRight) transform.localRotation = Quaternion.Euler(0, 0, rotation);\r\n            if (isRight) transform.localRotation = Quaternion.Euler(0, 0, -rotation);\r\n        }\r\n    }",
                "Line": 22
              },
              {
                "Statement": "if (isRotate)\r\n        {\r\n            rotation += rotationSpeed;\r\n            if (!isRight) transform.localRotation = Quaternion.Euler(0, 0, rotation);\r\n            if (isRight) transform.localRotation = Quaternion.Euler(0, 0, -rotation);\r\n        }",
                "Line": 23
              },
              {
                "Statement": "{\r\n            rotation += rotationSpeed;\r\n            if (!isRight) transform.localRotation = Quaternion.Euler(0, 0, rotation);\r\n            if (isRight) transform.localRotation = Quaternion.Euler(0, 0, -rotation);\r\n        }",
                "Line": 24
              },
              {
                "Statement": "rotation += rotationSpeed;",
                "Line": 25
              },
              {
                "Statement": "if (!isRight) transform.localRotation = Quaternion.Euler(0, 0, rotation);",
                "Line": 26
              },
              {
                "Statement": "transform.localRotation = Quaternion.Euler(0, 0, rotation);",
                "Line": 26
              },
              {
                "Statement": "if (isRight) transform.localRotation = Quaternion.Euler(0, 0, -rotation);",
                "Line": 27
              },
              {
                "Statement": "transform.localRotation = Quaternion.Euler(0, 0, -rotation);",
                "Line": 27
              }
            ]
          },
          {
            "Name": "Resize",
            "Modifiers": [],
            "Line": 31,
            "Parameters": [],
            "Invocations": [],
            "Variables": [],
            "Statements": [
              {
                "Statement": "{\r\n        if (isResize)\r\n        {\r\n            transform.localScale = size;\r\n        }\r\n    }",
                "Line": 32
              },
              {
                "Statement": "if (isResize)\r\n        {\r\n            transform.localScale = size;\r\n        }",
                "Line": 33
              },
              {
                "Statement": "{\r\n            transform.localScale = size;\r\n        }",
                "Line": 34
              },
              {
                "Statement": "transform.localScale = size;",
                "Line": 35
              }
            ]
          },
          {
            "Name": "CalcSize",
            "Modifiers": [],
            "Line": 39,
            "Parameters": [],
            "Invocations": [],
            "Variables": [],
            "Statements": [
              {
                "Statement": "{\r\n        if(enbiggen)\r\n        {\r\n            size.x += resizeSpeed;\r\n            size.y += resizeSpeed;\r\n            if (size.x >= maxSize) enbiggen = false;\r\n        }\r\n        else\r\n        {\r\n            size.x -= resizeSpeed;\r\n            size.y -= resizeSpeed;\r\n            if (size.x <= minSize) enbiggen = true;\r\n        }    \r\n    }",
                "Line": 40
              },
              {
                "Statement": "if(enbiggen)\r\n        {\r\n            size.x += resizeSpeed;\r\n            size.y += resizeSpeed;\r\n            if (size.x >= maxSize) enbiggen = false;\r\n        }\r\n        else\r\n        {\r\n            size.x -= resizeSpeed;\r\n            size.y -= resizeSpeed;\r\n            if (size.x <= minSize) enbiggen = true;\r\n        }",
                "Line": 41
              },
              {
                "Statement": "{\r\n            size.x += resizeSpeed;\r\n            size.y += resizeSpeed;\r\n            if (size.x >= maxSize) enbiggen = false;\r\n        }",
                "Line": 42
              },
              {
                "Statement": "size.x += resizeSpeed;",
                "Line": 43
              },
              {
                "Statement": "size.y += resizeSpeed;",
                "Line": 44
              },
              {
                "Statement": "if (size.x >= maxSize) enbiggen = false;",
                "Line": 45
              },
              {
                "Statement": "enbiggen = false;",
                "Line": 45
              },
              {
                "Statement": "{\r\n            size.x -= resizeSpeed;\r\n            size.y -= resizeSpeed;\r\n            if (size.x <= minSize) enbiggen = true;\r\n        }",
                "Line": 48
              },
              {
                "Statement": "size.x -= resizeSpeed;",
                "Line": 49
              },
              {
                "Statement": "size.y -= resizeSpeed;",
                "Line": 50
              },
              {
                "Statement": "if (size.x <= minSize) enbiggen = true;",
                "Line": 51
              },
              {
                "Statement": "enbiggen = true;",
                "Line": 51
              }
            ]
          },
          {
            "Name": "CalcProgress",
            "Modifiers": [],
            "Line": 55,
            "Parameters": [],
            "Invocations": [],
            "Variables": [],
            "Statements": [
              {
                "Statement": "{\r\n        size.y = transform.localScale.y;\r\n        if (enbiggen)\r\n        {\r\n            size.x += progressBarSpeed;\r\n            if (size.x >= progressBarWidth) enbiggen = false;\r\n        }\r\n        else\r\n        {\r\n            size.x -= progressBarSpeed;\r\n            if (size.x <= 1) enbiggen = true;\r\n        }\r\n    }",
                "Line": 56
              },
              {
                "Statement": "size.y = transform.localScale.y;",
                "Line": 57
              },
              {
                "Statement": "if (enbiggen)\r\n        {\r\n            size.x += progressBarSpeed;\r\n            if (size.x >= progressBarWidth) enbiggen = false;\r\n        }\r\n        else\r\n        {\r\n            size.x -= progressBarSpeed;\r\n            if (size.x <= 1) enbiggen = true;\r\n        }",
                "Line": 58
              },
              {
                "Statement": "{\r\n            size.x += progressBarSpeed;\r\n            if (size.x >= progressBarWidth) enbiggen = false;\r\n        }",
                "Line": 59
              },
              {
                "Statement": "size.x += progressBarSpeed;",
                "Line": 60
              },
              {
                "Statement": "if (size.x >= progressBarWidth) enbiggen = false;",
                "Line": 61
              },
              {
                "Statement": "enbiggen = false;",
                "Line": 61
              },
              {
                "Statement": "{\r\n            size.x -= progressBarSpeed;\r\n            if (size.x <= 1) enbiggen = true;\r\n        }",
                "Line": 64
              },
              {
                "Statement": "size.x -= progressBarSpeed;",
                "Line": 65
              },
              {
                "Statement": "if (size.x <= 1) enbiggen = true;",
                "Line": 66
              },
              {
                "Statement": "enbiggen = true;",
                "Line": 66
              }
            ]
          },
          {
            "Name": "FixedUpdate",
            "Modifiers": [],
            "Line": 70,
            "Parameters": [],
            "Invocations": [
              {
                "Line": 72,
                "Name": "",
                "FullName": "LoadingHandler.CalcSize()",
                "Parameters": []
              },
              {
                "Line": 73,
                "Name": "",
                "FullName": "LoadingHandler.CalcProgress()",
                "Parameters": []
              },
              {
                "Line": 74,
                "Name": "",
                "FullName": "LoadingHandler.Rotate()",
                "Parameters": []
              },
              {
                "Line": 75,
                "Name": "",
                "FullName": "LoadingHandler.Resize()",
                "Parameters": []
              }
            ],
            "Variables": [],
            "Statements": [
              {
                "Statement": "{\r\n        if (!isProgressBar) CalcSize(); \r\n        else CalcProgress();\r\n        Rotate();\r\n        Resize();\r\n\r\n    }",
                "Line": 71
              },
              {
                "Statement": "if (!isProgressBar) CalcSize(); \r\n        else CalcProgress();",
                "Line": 72
              },
              {
                "Statement": "CalcSize();",
                "Line": 72
              },
              {
                "Statement": "CalcProgress();",
                "Line": 73
              },
              {
                "Statement": "Rotate();",
                "Line": 74
              },
              {
                "Statement": "Resize();",
                "Line": 75
              }
            ]
          }
        ],
        "Fields": []
      }
    ],
    "Usings": [
      {
        "Name": "System.Collections",
        "Line": 0
      },
      {
        "Name": "System.Collections.Generic",
        "Line": 1
      },
      {
        "Name": "UnityEngine",
        "Line": 2
      }
    ]
  },
  {
    "Name": "LoadingScreenManager",
    "Interfaces": [],
    "Namespaces": [
      {
        "Line": 4,
        "Name": "GameManager",
        "Interfaces": [],
        "Namespaces": [],
        "Classes": [
          {
            "Name": "LoadingScreenManager",
            "Modifier": "public",
            "Inheritance": "MonoBehaviour",
            "Line": 6,
            "Interfaces": [],
            "Properties": [],
            "Methods": [
              {
                "Name": "Start",
                "Modifiers": [],
                "Line": 13,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 15,
                    "Name": "",
                    "FullName": "UnityEngine.Component.GetComponent<GameManager.SceneChangeManager>()",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            sceneChangeManager = GetComponent<SceneChangeManager>();\r\n        }",
                    "Line": 14
                  },
                  {
                    "Statement": "sceneChangeManager = GetComponent<SceneChangeManager>();",
                    "Line": 15
                  }
                ]
              },
              {
                "Name": "Loading",
                "Modifiers": [],
                "Line": 24,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 26,
                    "Name": "WaitForLoad()",
                    "FullName": "UnityEngine.MonoBehaviour.StartCoroutine(System.Collections.IEnumerator)",
                    "Parameters": []
                  },
                  {
                    "Line": 26,
                    "Name": "",
                    "FullName": "GameManager.LoadingScreenManager.WaitForLoad()",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            StartCoroutine(WaitForLoad());\r\n        }",
                    "Line": 25
                  },
                  {
                    "Statement": "StartCoroutine(WaitForLoad());",
                    "Line": 26
                  }
                ]
              },
              {
                "Name": "WaitForLoad",
                "Modifiers": [],
                "Line": 29,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 31,
                    "Name": "loadingScreen",
                    "FullName": "UnityEngine.Object.Instantiate<UnityEngine.GameObject>(UnityEngine.GameObject)",
                    "Parameters": []
                  },
                  {
                    "Line": 34,
                    "Name": "",
                    "FullName": "GameManager.SceneChangeManager.ChangeScene()",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            thisLoadingScreen = Instantiate(loadingScreen);\r\n            isLoading = false;\r\n            yield return new WaitForSeconds(1);\r\n            sceneChangeManager.ChangeScene();\r\n            \r\n        }",
                    "Line": 30
                  },
                  {
                    "Statement": "thisLoadingScreen = Instantiate(loadingScreen);",
                    "Line": 31
                  },
                  {
                    "Statement": "isLoading = false;",
                    "Line": 32
                  },
                  {
                    "Statement": "yield return new WaitForSeconds(1);",
                    "Line": 33
                  },
                  {
                    "Statement": "sceneChangeManager.ChangeScene();",
                    "Line": 34
                  }
                ]
              },
              {
                "Name": "Update",
                "Modifiers": [],
                "Line": 39,
                "Parameters": [],
                "Invocations": [],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            //Debug.Log(sceneChangeManager.LoadProgress);\r\n        }",
                    "Line": 40
                  }
                ]
              }
            ],
            "Fields": []
          }
        ],
        "Usings": []
      }
    ],
    "Classes": [],
    "Usings": [
      {
        "Name": "System.Collections",
        "Line": 0
      },
      {
        "Name": "System.Collections.Generic",
        "Line": 1
      },
      {
        "Name": "UnityEngine",
        "Line": 2
      }
    ]
  },
  {
    "Name": "MainMenu",
    "Interfaces": [],
    "Namespaces": [],
    "Classes": [
      {
        "Name": "MainMenu",
        "Modifier": "public",
        "Inheritance": "MonoBehaviour",
        "Line": 4,
        "Interfaces": [],
        "Properties": [],
        "Methods": [
          {
            "Name": "Start",
            "Modifiers": [],
            "Line": 7,
            "Parameters": [],
            "Invocations": [
              {
                "Line": 11,
                "Name": "\"masterVolume\"",
                "FullName": "UnityEngine.PlayerPrefs.GetFloat(string)",
                "Parameters": []
              }
            ],
            "Variables": [
              {
                "Name": "lockMode",
                "Type": "CursorLockMode",
                "Assignment": "CursorLockMode.Confined",
                "Line": 9
              }
            ],
            "Statements": [
              {
                "Statement": "{\r\n        CursorLockMode lockMode = CursorLockMode.Confined;\r\n        Cursor.lockState = lockMode;\r\n        AudioListener.volume = PlayerPrefs.GetFloat(\"masterVolume\");\r\n    }",
                "Line": 8
              },
              {
                "Statement": "CursorLockMode lockMode = CursorLockMode.Confined;",
                "Line": 9
              },
              {
                "Statement": "Cursor.lockState = lockMode;",
                "Line": 10
              },
              {
                "Statement": "AudioListener.volume = PlayerPrefs.GetFloat(\"masterVolume\");",
                "Line": 11
              }
            ]
          },
          {
            "Name": "ExitGame",
            "Modifiers": [],
            "Line": 14,
            "Parameters": [],
            "Invocations": [
              {
                "Line": 16,
                "Name": "",
                "FullName": "UnityEngine.Application.Quit()",
                "Parameters": []
              }
            ],
            "Variables": [],
            "Statements": [
              {
                "Statement": "{\r\n        Application.Quit();\r\n    }",
                "Line": 15
              },
              {
                "Statement": "Application.Quit();",
                "Line": 16
              }
            ]
          }
        ],
        "Fields": []
      }
    ],
    "Usings": [
      {
        "Name": "System.Collections",
        "Line": 0
      },
      {
        "Name": "System.Collections.Generic",
        "Line": 1
      },
      {
        "Name": "UnityEngine",
        "Line": 2
      }
    ]
  },
  {
    "Name": "MenuEffect",
    "Interfaces": [],
    "Namespaces": [],
    "Classes": [
      {
        "Name": "MenuEffect",
        "Modifier": "public",
        "Inheritance": "MonoBehaviour",
        "Line": 4,
        "Interfaces": [],
        "Properties": [],
        "Methods": [
          {
            "Name": "Start",
            "Modifiers": [],
            "Line": 10,
            "Parameters": [],
            "Invocations": [],
            "Variables": [],
            "Statements": [
              {
                "Statement": "{\r\n        Application.targetFrameRate = 60;\r\n    }",
                "Line": 11
              },
              {
                "Statement": "Application.targetFrameRate = 60;",
                "Line": 12
              }
            ]
          },
          {
            "Name": "FixedUpdate",
            "Modifiers": [],
            "Line": 16,
            "Parameters": [],
            "Invocations": [
              {
                "Line": 21,
                "Name": "\"_Rotation\", rot",
                "FullName": "UnityEngine.Material.SetFloat(string, float)",
                "Parameters": []
              }
            ],
            "Variables": [],
            "Statements": [
              {
                "Statement": "{\r\n        rot += speed;\r\n        if(rot > 360) rot = 0; \r\n        rot %= 360;\r\n        RenderSettings.skybox.SetFloat(\"_Rotation\", rot);\r\n    }",
                "Line": 17
              },
              {
                "Statement": "rot += speed;",
                "Line": 18
              },
              {
                "Statement": "if(rot > 360) rot = 0;",
                "Line": 19
              },
              {
                "Statement": "rot = 0;",
                "Line": 19
              },
              {
                "Statement": "rot %= 360;",
                "Line": 20
              },
              {
                "Statement": "RenderSettings.skybox.SetFloat(\"_Rotation\", rot);",
                "Line": 21
              }
            ]
          }
        ],
        "Fields": []
      }
    ],
    "Usings": [
      {
        "Name": "System.Collections",
        "Line": 0
      },
      {
        "Name": "System.Collections.Generic",
        "Line": 1
      },
      {
        "Name": "UnityEngine",
        "Line": 2
      }
    ]
  },
  {
    "Name": "Modifier",
    "Interfaces": [],
    "Namespaces": [
      {
        "Line": 4,
        "Name": "Character",
        "Interfaces": [],
        "Namespaces": [],
        "Classes": [
          {
            "Name": "Modifier",
            "Modifier": "public",
            "Inheritance": "Object",
            "Line": 6,
            "Interfaces": [],
            "Properties": [],
            "Methods": [],
            "Fields": []
          }
        ],
        "Usings": []
      }
    ],
    "Classes": [],
    "Usings": [
      {
        "Name": "System.Collections",
        "Line": 0
      },
      {
        "Name": "System.Collections.Generic",
        "Line": 1
      },
      {
        "Name": "UnityEngine",
        "Line": 2
      }
    ]
  },
  {
    "Name": "MuzzleManager",
    "Interfaces": [],
    "Namespaces": [
      {
        "Line": 5,
        "Name": "Weapon",
        "Interfaces": [],
        "Namespaces": [],
        "Classes": [
          {
            "Name": "MuzzleManager",
            "Modifier": "public",
            "Inheritance": "NetworkBehaviour",
            "Line": 7,
            "Interfaces": [],
            "Properties": [],
            "Methods": [
              {
                "Name": "Muzzle",
                "Modifiers": [],
                "Line": 14,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 16,
                    "Name": "true",
                    "FullName": "UnityEngine.GameObject.SetActive(bool)",
                    "Parameters": []
                  },
                  {
                    "Line": 18,
                    "Name": "false",
                    "FullName": "UnityEngine.GameObject.SetActive(bool)",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            muzzle.SetActive(true);\r\n            yield return new WaitForSeconds(interval);\r\n            muzzle.SetActive(false);\r\n        }",
                    "Line": 15
                  },
                  {
                    "Statement": "muzzle.SetActive(true);",
                    "Line": 16
                  },
                  {
                    "Statement": "yield return new WaitForSeconds(interval);",
                    "Line": 17
                  },
                  {
                    "Statement": "muzzle.SetActive(false);",
                    "Line": 18
                  }
                ]
              }
            ],
            "Fields": []
          }
        ],
        "Usings": []
      }
    ],
    "Classes": [],
    "Usings": [
      {
        "Name": "System.Collections",
        "Line": 0
      },
      {
        "Name": "System.Collections.Generic",
        "Line": 1
      },
      {
        "Name": "UnityEngine",
        "Line": 2
      },
      {
        "Name": "UnityEngine.Networking",
        "Line": 3
      }
    ]
  },
  {
    "Name": "NameSelection",
    "Interfaces": [],
    "Namespaces": [
      {
        "Line": 5,
        "Name": "GameManager",
        "Interfaces": [],
        "Namespaces": [],
        "Classes": [
          {
            "Name": "NameSelection",
            "Modifier": "public",
            "Inheritance": "MonoBehaviour",
            "Line": 7,
            "Interfaces": [],
            "Properties": [],
            "Methods": [
              {
                "Name": "Awake",
                "Modifiers": [],
                "Line": 13,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 15,
                    "Name": "",
                    "FullName": "UnityEngine.GameObject.GetComponent<GameManager.SceneChangeManager>()",
                    "Parameters": []
                  },
                  {
                    "Line": 15,
                    "Name": "\"NetworkManager\"",
                    "FullName": "UnityEngine.GameObject.FindGameObjectWithTag(string)",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            scm = GameObject.FindGameObjectWithTag(\"NetworkManager\").GetComponent<SceneChangeManager>();\r\n        }",
                    "Line": 14
                  },
                  {
                    "Statement": "scm = GameObject.FindGameObjectWithTag(\"NetworkManager\").GetComponent<SceneChangeManager>();",
                    "Line": 15
                  }
                ]
              },
              {
                "Name": "Start",
                "Modifiers": [],
                "Line": 18,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 20,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  },
                  {
                    "Line": 20,
                    "Name": "",
                    "FullName": "GameManager.NameSelection.RemoveSpaces()",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            playerName.onValueChanged.AddListener(delegate { RemoveSpaces(); });\r\n        }",
                    "Line": 19
                  },
                  {
                    "Statement": "playerName.onValueChanged.AddListener(delegate { RemoveSpaces(); });",
                    "Line": 20
                  },
                  {
                    "Statement": "{ RemoveSpaces(); }",
                    "Line": 20
                  },
                  {
                    "Statement": "RemoveSpaces();",
                    "Line": 20
                  }
                ]
              },
              {
                "Name": "RemoveSpaces",
                "Modifiers": [],
                "Line": 23,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 25,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            playerName.text = playerName.text.Replace(\" \", \"\");\r\n        }",
                    "Line": 24
                  },
                  {
                    "Statement": "playerName.text = playerName.text.Replace(\" \", \"\");",
                    "Line": 25
                  }
                ]
              },
              {
                "Name": "ConnectToGame",
                "Modifiers": [],
                "Line": 28,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 30,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  },
                  {
                    "Line": 30,
                    "Name": "",
                    "FullName": "float.ToString()",
                    "Parameters": []
                  },
                  {
                    "Line": 31,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  },
                  {
                    "Line": 32,
                    "Name": "\"UnlimitedArena_Menu\"",
                    "FullName": "GameManager.SceneChangeManager.LoadingScreen(string)",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            if (playerName.text.Equals(\"\")) playerName.text = \"GuestPlayer\" + Time.time.ToString();\r\n            PlayerPrefs.SetString(\"Name\", playerName.text);\r\n            scm.LoadingScreen(\"UnlimitedArena_Menu\");\r\n        }",
                    "Line": 29
                  },
                  {
                    "Statement": "if (playerName.text.Equals(\"\")) playerName.text = \"GuestPlayer\" + Time.time.ToString();",
                    "Line": 30
                  },
                  {
                    "Statement": "playerName.text = \"GuestPlayer\" + Time.time.ToString();",
                    "Line": 30
                  },
                  {
                    "Statement": "PlayerPrefs.SetString(\"Name\", playerName.text);",
                    "Line": 31
                  },
                  {
                    "Statement": "scm.LoadingScreen(\"UnlimitedArena_Menu\");",
                    "Line": 32
                  }
                ]
              }
            ],
            "Fields": []
          }
        ],
        "Usings": []
      }
    ],
    "Classes": [],
    "Usings": [
      {
        "Name": "System.Collections",
        "Line": 0
      },
      {
        "Name": "System.Collections.Generic",
        "Line": 1
      },
      {
        "Name": "UnityEngine",
        "Line": 2
      },
      {
        "Name": "UnityEngine.UI",
        "Line": 3
      }
    ]
  },
  {
    "Name": "NetManager",
    "Interfaces": [],
    "Namespaces": [
      {
        "Line": 6,
        "Name": "GameManager",
        "Interfaces": [],
        "Namespaces": [],
        "Classes": [
          {
            "Name": "NetManager",
            "Modifier": "public",
            "Inheritance": "NetworkManager",
            "Line": 8,
            "Interfaces": [],
            "Properties": [],
            "Methods": [
              {
                "Name": "Start",
                "Modifiers": [],
                "Line": 72,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 74,
                    "Name": "\"SCORES\", \"\"",
                    "FullName": "UnityEngine.PlayerPrefs.SetString(string, string)",
                    "Parameters": []
                  },
                  {
                    "Line": 75,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            PlayerPrefs.SetString(\"SCORES\", \"\");\r\n            scm = GetComponent<SceneChangeManager>();\r\n            //LogFilter.currentLogLevel = 0;\r\n        }",
                    "Line": 73
                  },
                  {
                    "Statement": "PlayerPrefs.SetString(\"SCORES\", \"\");",
                    "Line": 74
                  },
                  {
                    "Statement": "scm = GetComponent<SceneChangeManager>();",
                    "Line": 75
                  }
                ]
              },
              {
                "Name": "ChooseMap",
                "Modifiers": [],
                "Line": 79,
                "Parameters": [],
                "Invocations": [],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            // choose the map with RNG\r\n            return \"UnlimitedArena_WareHouseScene\";\r\n        }",
                    "Line": 80
                  },
                  {
                    "Statement": "return \"UnlimitedArena_WareHouseScene\";",
                    "Line": 82
                  }
                ]
              },
              {
                "Name": "StartAsHost",
                "Modifiers": [],
                "Line": 85,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 88,
                    "Name": "",
                    "FullName": "GameManager.NetManager.StartGame()",
                    "Parameters": []
                  },
                  {
                    "Line": 89,
                    "Name": "",
                    "FullName": "GameManager.NetManager.RegisterServerHandlers()",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            isHost = true;\r\n            StartGame();\r\n            RegisterServerHandlers();\r\n        }",
                    "Line": 86
                  },
                  {
                    "Statement": "isHost = true;",
                    "Line": 87
                  },
                  {
                    "Statement": "StartGame();",
                    "Line": 88
                  },
                  {
                    "Statement": "RegisterServerHandlers();",
                    "Line": 89
                  }
                ]
              },
              {
                "Name": "RegisterServerHandlers",
                "Modifiers": [],
                "Line": 92,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 94,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            NetworkServer.RegisterHandler(UAMess.MSG_HOST_SIGNAL_DEATH, OnSignalDeath);\r\n        }",
                    "Line": 93
                  },
                  {
                    "Statement": "NetworkServer.RegisterHandler(UAMess.MSG_HOST_SIGNAL_DEATH, OnSignalDeath);",
                    "Line": 94
                  }
                ]
              },
              {
                "Name": "StartAsClient",
                "Modifiers": [],
                "Line": 97,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 100,
                    "Name": "",
                    "FullName": "GameManager.NetManager.StartGame()",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            isHost = false;\r\n            StartGame();\r\n        }",
                    "Line": 98
                  },
                  {
                    "Statement": "isHost = false;",
                    "Line": 99
                  },
                  {
                    "Statement": "StartGame();",
                    "Line": 100
                  }
                ]
              },
              {
                "Name": "StartGame",
                "Modifiers": [],
                "Line": 103,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 105,
                    "Name": "ChooseMap()",
                    "FullName": "GameManager.SceneChangeManager.LoadingScreen(string)",
                    "Parameters": []
                  },
                  {
                    "Line": 105,
                    "Name": "",
                    "FullName": "GameManager.NetManager.ChooseMap()",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            scm.LoadingScreen(ChooseMap());\r\n        }",
                    "Line": 104
                  },
                  {
                    "Statement": "scm.LoadingScreen(ChooseMap());",
                    "Line": 105
                  }
                ]
              },
              {
                "Name": "SpawnPlayer",
                "Modifiers": [],
                "Line": 108,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 111,
                    "Name": "",
                    "FullName": "UnityEngine.GameObject.GetComponent<GameManager.PlayerSpawnScript>()",
                    "Parameters": []
                  },
                  {
                    "Line": 111,
                    "Name": "\"PlayerSpawnManager\"",
                    "FullName": "UnityEngine.GameObject.FindGameObjectWithTag(string)",
                    "Parameters": []
                  },
                  {
                    "Line": 112,
                    "Name": "",
                    "FullName": "GameManager.NetManager.LoadSpawnPositions()",
                    "Parameters": []
                  },
                  {
                    "Line": 114,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  },
                  {
                    "Line": 115,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            pss = GameObject.FindGameObjectWithTag(\"PlayerSpawnManager\").GetComponent<PlayerSpawnScript>();\r\n            LoadSpawnPositions();\r\n            inGame = false;\r\n            if (isHost) myClient = StartHost();\r\n            else myClient = StartClient();\r\n        }",
                    "Line": 110
                  },
                  {
                    "Statement": "pss = GameObject.FindGameObjectWithTag(\"PlayerSpawnManager\").GetComponent<PlayerSpawnScript>();",
                    "Line": 111
                  },
                  {
                    "Statement": "LoadSpawnPositions();",
                    "Line": 112
                  },
                  {
                    "Statement": "inGame = false;",
                    "Line": 113
                  },
                  {
                    "Statement": "if (isHost) myClient = StartHost();\r\n            else myClient = StartClient();",
                    "Line": 114
                  },
                  {
                    "Statement": "myClient = StartHost();",
                    "Line": 114
                  },
                  {
                    "Statement": "myClient = StartClient();",
                    "Line": 115
                  }
                ]
              },
              {
                "Name": "LoadSpawnPositions",
                "Modifiers": [],
                "Line": 118,
                "Parameters": [],
                "Invocations": [],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            spawnPoints = pss.SpawnPositions;\r\n            playerSpawners = pss.PlayerSpawners;\r\n        }",
                    "Line": 119
                  },
                  {
                    "Statement": "spawnPoints = pss.SpawnPositions;",
                    "Line": 120
                  },
                  {
                    "Statement": "playerSpawners = pss.PlayerSpawners;",
                    "Line": 121
                  }
                ]
              },
              {
                "Name": "ConsumablePickedUp",
                "Modifiers": [],
                "Line": 124,
                "Parameters": [
                  {
                    "Name": "consumable",
                    "Type": "GameObject",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 126,
                    "Name": "false",
                    "FullName": "UnityEngine.GameObject.SetActive(bool)",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            consumable.SetActive(false);\r\n            //consumableSpawnManager = csm.GetComponent<ConsumableSpawnManager>();\r\n            //consumableSpawnManager.Cooldown(consumable.GetInstanceID());\r\n        }",
                    "Line": 125
                  },
                  {
                    "Statement": "consumable.SetActive(false);",
                    "Line": 126
                  }
                ]
              },
              {
                "Name": "SetPvP",
                "Modifiers": [],
                "Line": 131,
                "Parameters": [
                  {
                    "Name": "flag",
                    "Type": "bool",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 133,
                    "Name": "flag",
                    "FullName": "Character.PlayerManagerScript.SetPvP(bool)",
                    "Parameters": []
                  },
                  {
                    "Line": 133,
                    "Name": "",
                    "FullName": "UnityEngine.GameObject.GetComponent<Character.PlayerManagerScript>()",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            foreach (GameObject o in connectedPlayer.Values) o.GetComponent<PlayerManagerScript>().SetPvP(flag);\r\n        }",
                    "Line": 132
                  },
                  {
                    "Statement": "foreach (GameObject o in connectedPlayer.Values) o.GetComponent<PlayerManagerScript>().SetPvP(flag);",
                    "Line": 133
                  },
                  {
                    "Statement": "o.GetComponent<PlayerManagerScript>().SetPvP(flag);",
                    "Line": 133
                  }
                ]
              },
              {
                "Name": "SignalDeath",
                "Modifiers": [],
                "Line": 136,
                "Parameters": [
                  {
                    "Name": "conn",
                    "Type": "int",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 140,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  }
                ],
                "Variables": [
                  {
                    "Name": "msg",
                    "Type": "NetworkSignalDeathMessage",
                    "Assignment": "new NetworkSignalDeathMessage()",
                    "Line": 138
                  }
                ],
                "Statements": [
                  {
                    "Statement": "{\r\n            NetworkSignalDeathMessage msg = new NetworkSignalDeathMessage();\r\n            msg.connectionId = conn;\r\n            myClient.Send(UAMess.MSG_HOST_SIGNAL_DEATH, msg);\r\n        }",
                    "Line": 137
                  },
                  {
                    "Statement": "NetworkSignalDeathMessage msg = new NetworkSignalDeathMessage();",
                    "Line": 138
                  },
                  {
                    "Statement": "msg.connectionId = conn;",
                    "Line": 139
                  },
                  {
                    "Statement": "myClient.Send(UAMess.MSG_HOST_SIGNAL_DEATH, msg);",
                    "Line": 140
                  }
                ]
              },
              {
                "Name": "SetNextSpawn",
                "Modifiers": [],
                "Line": 143,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 146,
                    "Name": "",
                    "FullName": "GameManager.NetManager.RandomSpawnPoint()",
                    "Parameters": []
                  },
                  {
                    "Line": 149,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  },
                  {
                    "Line": 150,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  },
                  {
                    "Line": 151,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  }
                ],
                "Variables": [
                  {
                    "Name": "msg",
                    "Type": "NetworkPositionMessage",
                    "Assignment": "new NetworkPositionMessage()",
                    "Line": 145
                  }
                ],
                "Statements": [
                  {
                    "Statement": "{\r\n            NetworkPositionMessage msg = new NetworkPositionMessage();\r\n            msg.position = RandomSpawnPoint();\r\n            foreach (NetworkConnection o in NetworkServer.connections)\r\n            {\r\n                Debug.LogError(o.connectionId);\r\n                o.Send(UAMess.MSG_NEW_SPAWN_POSITION, msg);\r\n                o.FlushChannels();\r\n            }\r\n        }",
                    "Line": 144
                  },
                  {
                    "Statement": "NetworkPositionMessage msg = new NetworkPositionMessage();",
                    "Line": 145
                  },
                  {
                    "Statement": "msg.position = RandomSpawnPoint();",
                    "Line": 146
                  },
                  {
                    "Statement": "foreach (NetworkConnection o in NetworkServer.connections)\r\n            {\r\n                Debug.LogError(o.connectionId);\r\n                o.Send(UAMess.MSG_NEW_SPAWN_POSITION, msg);\r\n                o.FlushChannels();\r\n            }",
                    "Line": 147
                  },
                  {
                    "Statement": "{\r\n                Debug.LogError(o.connectionId);\r\n                o.Send(UAMess.MSG_NEW_SPAWN_POSITION, msg);\r\n                o.FlushChannels();\r\n            }",
                    "Line": 148
                  },
                  {
                    "Statement": "Debug.LogError(o.connectionId);",
                    "Line": 149
                  },
                  {
                    "Statement": "o.Send(UAMess.MSG_NEW_SPAWN_POSITION, msg);",
                    "Line": 150
                  },
                  {
                    "Statement": "o.FlushChannels();",
                    "Line": 151
                  }
                ]
              },
              {
                "Name": "SpawnPoint",
                "Modifiers": [],
                "Line": 183,
                "Parameters": [],
                "Invocations": [],
                "Variables": [
                  {
                    "Name": "p",
                    "Type": "Vector3",
                    "Assignment": "startPositions[currentSpawnPoint].position",
                    "Line": 185
                  }
                ],
                "Statements": [
                  {
                    "Statement": "{\r\n            Vector3 p = startPositions[currentSpawnPoint].position;\r\n            currentSpawnPoint++;\r\n            if (currentSpawnPoint >= startPositions.Count) currentSpawnPoint = 0;\r\n            return p;\r\n        }",
                    "Line": 184
                  },
                  {
                    "Statement": "Vector3 p = startPositions[currentSpawnPoint].position;",
                    "Line": 185
                  },
                  {
                    "Statement": "currentSpawnPoint++;",
                    "Line": 186
                  },
                  {
                    "Statement": "if (currentSpawnPoint >= startPositions.Count) currentSpawnPoint = 0;",
                    "Line": 187
                  },
                  {
                    "Statement": "currentSpawnPoint = 0;",
                    "Line": 187
                  },
                  {
                    "Statement": "return p;",
                    "Line": 188
                  }
                ]
              },
              {
                "Name": "SSpawnPoint",
                "Modifiers": [],
                "Line": 191,
                "Parameters": [],
                "Invocations": [],
                "Variables": [
                  {
                    "Name": "spanwer",
                    "Type": "GameObject",
                    "Assignment": "playerSpawners[currentSpawnPoint]",
                    "Line": 193
                  }
                ],
                "Statements": [
                  {
                    "Statement": "{\r\n            GameObject spanwer = playerSpawners[currentSpawnPoint];\r\n            currentSpawnPoint++;\r\n            if (currentSpawnPoint >= playerSpawners.Count) currentSpawnPoint = 0;\r\n            return spanwer;\r\n        }",
                    "Line": 192
                  },
                  {
                    "Statement": "GameObject spanwer = playerSpawners[currentSpawnPoint];",
                    "Line": 193
                  },
                  {
                    "Statement": "currentSpawnPoint++;",
                    "Line": 194
                  },
                  {
                    "Statement": "if (currentSpawnPoint >= playerSpawners.Count) currentSpawnPoint = 0;",
                    "Line": 195
                  },
                  {
                    "Statement": "currentSpawnPoint = 0;",
                    "Line": 195
                  },
                  {
                    "Statement": "return spanwer;",
                    "Line": 196
                  }
                ]
              },
              {
                "Name": "RandomSpawnPoint",
                "Modifiers": [],
                "Line": 199,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 201,
                    "Name": "0, spawnPoints.Count",
                    "FullName": "UnityEngine.Random.Range(int, int)",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            return spawnPoints[Random.Range(0, spawnPoints.Count)];\r\n        }",
                    "Line": 200
                  },
                  {
                    "Statement": "return spawnPoints[Random.Range(0, spawnPoints.Count)];",
                    "Line": 201
                  }
                ]
              },
              {
                "Name": "OnServerAddPlayer",
                "Modifiers": [],
                "Line": 204,
                "Parameters": [
                  {
                    "Name": "conn",
                    "Type": "NetworkConnection",
                    "Assignment": null
                  },
                  {
                    "Name": "playerControllerId",
                    "Type": "short",
                    "Assignment": null
                  },
                  {
                    "Name": "extraMessageReader",
                    "Type": "NetworkReader",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 206,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  },
                  {
                    "Line": 206,
                    "Name": "",
                    "FullName": "GameManager.NetManager.SpawnPoint()",
                    "Parameters": []
                  },
                  {
                    "Line": 207,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  },
                  {
                    "Line": 208,
                    "Name": "",
                    "FullName": "UnityEngine.GameObject.GetComponent<Character.PlayerManagerScript>()",
                    "Parameters": []
                  },
                  {
                    "Line": 209,
                    "Name": "",
                    "FullName": "UnityEngine.GameObject.GetComponent<Character.PlayerManagerScript>()",
                    "Parameters": []
                  },
                  {
                    "Line": 210,
                    "Name": "",
                    "FullName": "UnityEngine.GameObject.GetComponent<Character.PlayerManagerScript>()",
                    "Parameters": []
                  },
                  {
                    "Line": 212,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  }
                ],
                "Variables": [
                  {
                    "Name": "msg",
                    "Type": "NetworkHeroSelectionMessage",
                    "Assignment": "extraMessageReader.ReadMessage<NetworkHeroSelectionMessage>()",
                    "Line": 207
                  }
                ],
                "Statements": [
                  {
                    "Statement": "{\r\n            player = Instantiate(playerManagerPrefab, SpawnPoint(), Quaternion.identity);\r\n            NetworkHeroSelectionMessage msg = extraMessageReader.ReadMessage<NetworkHeroSelectionMessage>();\r\n            player.GetComponent<PlayerManagerScript>().ChosenPlayer = msg.chosenPlayer;\r\n            player.GetComponent<PlayerManagerScript>().ClientId = conn.connectionId;\r\n            player.GetComponent<PlayerManagerScript>().PlayerName = \"Player \" + conn.connectionId;\r\n            if (isHost) connectedPlayer[conn.connectionId] = player;\r\n            NetworkServer.AddPlayerForConnection(conn, player, 0);\r\n        }",
                    "Line": 205
                  },
                  {
                    "Statement": "player = Instantiate(playerManagerPrefab, SpawnPoint(), Quaternion.identity);",
                    "Line": 206
                  },
                  {
                    "Statement": "NetworkHeroSelectionMessage msg = extraMessageReader.ReadMessage<NetworkHeroSelectionMessage>();",
                    "Line": 207
                  },
                  {
                    "Statement": "player.GetComponent<PlayerManagerScript>().ChosenPlayer = msg.chosenPlayer;",
                    "Line": 208
                  },
                  {
                    "Statement": "player.GetComponent<PlayerManagerScript>().ClientId = conn.connectionId;",
                    "Line": 209
                  },
                  {
                    "Statement": "player.GetComponent<PlayerManagerScript>().PlayerName = \"Player \" + conn.connectionId;",
                    "Line": 210
                  },
                  {
                    "Statement": "if (isHost) connectedPlayer[conn.connectionId] = player;",
                    "Line": 211
                  },
                  {
                    "Statement": "connectedPlayer[conn.connectionId] = player;",
                    "Line": 211
                  },
                  {
                    "Statement": "NetworkServer.AddPlayerForConnection(conn, player, 0);",
                    "Line": 212
                  }
                ]
              },
              {
                "Name": "PlayerWasKilled",
                "Modifiers": [],
                "Line": 215,
                "Parameters": [
                  {
                    "Name": "connectionId",
                    "Type": "int",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 220,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  },
                  {
                    "Line": 220,
                    "Name": "",
                    "FullName": "GameManager.NetManager.SpawnPoint()",
                    "Parameters": []
                  },
                  {
                    "Line": 221,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  },
                  {
                    "Line": 221,
                    "Name": "",
                    "FullName": "UnityEngine.GameObject.GetComponent<Character.PlayerManagerScript>()",
                    "Parameters": []
                  },
                  {
                    "Line": 222,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  },
                  {
                    "Line": 223,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  },
                  {
                    "Line": 223,
                    "Name": "",
                    "FullName": "UnityEngine.GameObject.GetComponent<Character.PlayerManagerScript>()",
                    "Parameters": []
                  },
                  {
                    "Line": 224,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  },
                  {
                    "Line": 226,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  }
                ],
                "Variables": [
                  {
                    "Name": "conn",
                    "Type": "NetworkConnection",
                    "Assignment": "NetworkServer.connections[connectionId]",
                    "Line": 218
                  },
                  {
                    "Name": "player",
                    "Type": "GameObject",
                    "Assignment": "conn.playerControllers[0].gameObject",
                    "Line": 219
                  },
                  {
                    "Name": "newPlayer",
                    "Type": "var",
                    "Assignment": "Instantiate(playerManagerPrefab, SpawnPoint(), Quaternion.identity)",
                    "Line": 220
                  }
                ],
                "Statements": [
                  {
                    "Statement": "{\r\n            if (!isHost) return;\r\n            NetworkConnection conn = NetworkServer.connections[connectionId];\r\n            GameObject player = conn.playerControllers[0].gameObject;\r\n            var newPlayer = Instantiate(playerManagerPrefab, SpawnPoint(), Quaternion.identity);\r\n            newPlayer.GetComponent<PlayerManagerScript>().ChosenPlayer = player.GetComponent<PlayerManagerScript>().ChosenPlayer;\r\n            newPlayer.GetComponent<PlayerManagerScript>().ClientId = connectionId;\r\n            newPlayer.GetComponent<PlayerManagerScript>().PlayerName = player.GetComponent<PlayerManagerScript>().PlayerName;\r\n            Destroy(player);\r\n            connectedPlayer[connectionId] = newPlayer;\r\n            NetworkServer.ReplacePlayerForConnection(conn, newPlayer, 0);\r\n        }",
                    "Line": 216
                  },
                  {
                    "Statement": "if (!isHost) return;",
                    "Line": 217
                  },
                  {
                    "Statement": "return;",
                    "Line": 217
                  },
                  {
                    "Statement": "NetworkConnection conn = NetworkServer.connections[connectionId];",
                    "Line": 218
                  },
                  {
                    "Statement": "GameObject player = conn.playerControllers[0].gameObject;",
                    "Line": 219
                  },
                  {
                    "Statement": "var newPlayer = Instantiate(playerManagerPrefab, SpawnPoint(), Quaternion.identity);",
                    "Line": 220
                  },
                  {
                    "Statement": "newPlayer.GetComponent<PlayerManagerScript>().ChosenPlayer = player.GetComponent<PlayerManagerScript>().ChosenPlayer;",
                    "Line": 221
                  },
                  {
                    "Statement": "newPlayer.GetComponent<PlayerManagerScript>().ClientId = connectionId;",
                    "Line": 222
                  },
                  {
                    "Statement": "newPlayer.GetComponent<PlayerManagerScript>().PlayerName = player.GetComponent<PlayerManagerScript>().PlayerName;",
                    "Line": 223
                  },
                  {
                    "Statement": "Destroy(player);",
                    "Line": 224
                  },
                  {
                    "Statement": "connectedPlayer[connectionId] = newPlayer;",
                    "Line": 225
                  },
                  {
                    "Statement": "NetworkServer.ReplacePlayerForConnection(conn, newPlayer, 0);",
                    "Line": 226
                  }
                ]
              },
              {
                "Name": "OnClientConnect",
                "Modifiers": [],
                "Line": 229,
                "Parameters": [
                  {
                    "Name": "conn",
                    "Type": "NetworkConnection",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 232,
                    "Name": "\"character\"",
                    "FullName": "UnityEngine.PlayerPrefs.GetInt(string)",
                    "Parameters": []
                  },
                  {
                    "Line": 233,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  },
                  {
                    "Line": 234,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  }
                ],
                "Variables": [
                  {
                    "Name": "msg",
                    "Type": "NetworkHeroSelectionMessage",
                    "Assignment": "new NetworkHeroSelectionMessage()",
                    "Line": 231
                  }
                ],
                "Statements": [
                  {
                    "Statement": "{\r\n            NetworkHeroSelectionMessage msg = new NetworkHeroSelectionMessage();\r\n            msg.chosenPlayer = PlayerPrefs.GetInt(\"character\");\r\n            ClientScene.AddPlayer(conn, 0, msg);\r\n            myClient.RegisterHandler(UAMess.MSG_NEW_SPAWN_POSITION, OnSetSpawnPosition);\r\n        }",
                    "Line": 230
                  },
                  {
                    "Statement": "NetworkHeroSelectionMessage msg = new NetworkHeroSelectionMessage();",
                    "Line": 231
                  },
                  {
                    "Statement": "msg.chosenPlayer = PlayerPrefs.GetInt(\"character\");",
                    "Line": 232
                  },
                  {
                    "Statement": "ClientScene.AddPlayer(conn, 0, msg);",
                    "Line": 233
                  },
                  {
                    "Statement": "myClient.RegisterHandler(UAMess.MSG_NEW_SPAWN_POSITION, OnSetSpawnPosition);",
                    "Line": 234
                  }
                ]
              },
              {
                "Name": "OnSetSpawnPosition",
                "Modifiers": [],
                "Line": 237,
                "Parameters": [
                  {
                    "Name": "netMsg",
                    "Type": "NetworkMessage",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 239,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  },
                  {
                    "Line": 241,
                    "Name": "msg.position",
                    "FullName": "UnityEngine.Debug.LogError(object)",
                    "Parameters": []
                  }
                ],
                "Variables": [
                  {
                    "Name": "msg",
                    "Type": "NetworkPositionMessage",
                    "Assignment": "netMsg.ReadMessage<NetworkPositionMessage>()",
                    "Line": 239
                  }
                ],
                "Statements": [
                  {
                    "Statement": "{\r\n            NetworkPositionMessage msg = netMsg.ReadMessage<NetworkPositionMessage>();\r\n            playerManager.TheSpawnPosition = msg.position;\r\n            Debug.LogError(msg.position);\r\n        }",
                    "Line": 238
                  },
                  {
                    "Statement": "NetworkPositionMessage msg = netMsg.ReadMessage<NetworkPositionMessage>();",
                    "Line": 239
                  },
                  {
                    "Statement": "playerManager.TheSpawnPosition = msg.position;",
                    "Line": 240
                  },
                  {
                    "Statement": "Debug.LogError(msg.position);",
                    "Line": 241
                  }
                ]
              },
              {
                "Name": "OnSignalDeath",
                "Modifiers": [],
                "Line": 244,
                "Parameters": [
                  {
                    "Name": "netMsg",
                    "Type": "NetworkMessage",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 246,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  },
                  {
                    "Line": 247,
                    "Name": "msg.connectionId",
                    "FullName": "GameManager.NetManager.PlayerWasKilled(int)",
                    "Parameters": []
                  }
                ],
                "Variables": [
                  {
                    "Name": "msg",
                    "Type": "NetworkSignalDeathMessage",
                    "Assignment": "netMsg.ReadMessage<NetworkSignalDeathMessage>()",
                    "Line": 246
                  }
                ],
                "Statements": [
                  {
                    "Statement": "{\r\n            NetworkSignalDeathMessage msg = netMsg.ReadMessage<NetworkSignalDeathMessage>();\r\n            PlayerWasKilled(msg.connectionId);\r\n        }",
                    "Line": 245
                  },
                  {
                    "Statement": "NetworkSignalDeathMessage msg = netMsg.ReadMessage<NetworkSignalDeathMessage>();",
                    "Line": 246
                  },
                  {
                    "Statement": "PlayerWasKilled(msg.connectionId);",
                    "Line": 247
                  }
                ]
              },
              {
                "Name": "OnClientDisconnect",
                "Modifiers": [],
                "Line": 250,
                "Parameters": [
                  {
                    "Name": "conn",
                    "Type": "NetworkConnection",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 252,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            base.OnClientDisconnect(conn);\r\n        }",
                    "Line": 251
                  },
                  {
                    "Statement": "base.OnClientDisconnect(conn);",
                    "Line": 252
                  }
                ]
              },
              {
                "Name": "OnServerDisconnect",
                "Modifiers": [],
                "Line": 255,
                "Parameters": [
                  {
                    "Name": "conn",
                    "Type": "NetworkConnection",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 257,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  },
                  {
                    "Line": 258,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            base.OnServerDisconnect(conn);\r\n            connectedPlayer.Remove(conn.connectionId);\r\n        }",
                    "Line": 256
                  },
                  {
                    "Statement": "base.OnServerDisconnect(conn);",
                    "Line": 257
                  },
                  {
                    "Statement": "connectedPlayer.Remove(conn.connectionId);",
                    "Line": 258
                  }
                ]
              },
              {
                "Name": "OnClientSceneChanged",
                "Modifiers": [],
                "Line": 261,
                "Parameters": [
                  {
                    "Name": "conn",
                    "Type": "NetworkConnection",
                    "Assignment": null
                  }
                ],
                "Invocations": [],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            //base.OnClientSceneChanged(conn);\r\n        }",
                    "Line": 262
                  }
                ]
              }
            ],
            "Fields": []
          }
        ],
        "Usings": []
      }
    ],
    "Classes": [],
    "Usings": [
      {
        "Name": "System.Collections",
        "Line": 0
      },
      {
        "Name": "System.Collections.Generic",
        "Line": 1
      },
      {
        "Name": "UnityEngine",
        "Line": 2
      },
      {
        "Name": "UnityEngine.Networking",
        "Line": 3
      },
      {
        "Name": "Character",
        "Line": 4
      }
    ]
  },
  {
    "Name": "ObjectWithFeatures",
    "Interfaces": [],
    "Namespaces": [
      {
        "Line": 5,
        "Name": "Character",
        "Interfaces": [],
        "Namespaces": [],
        "Classes": [
          {
            "Name": "ObjectWithFeatures",
            "Modifier": "public abstract",
            "Inheritance": "Object",
            "Line": 7,
            "Interfaces": [],
            "Properties": [],
            "Methods": [
              {
                "Name": "AddFeature",
                "Modifiers": [],
                "Line": 9,
                "Parameters": [
                  {
                    "Name": "f",
                    "Type": "Feature",
                    "Assignment": null
                  }
                ],
                "Invocations": [],
                "Variables": [],
                "Statements": []
              },
              {
                "Name": "AddFeature",
                "Modifiers": [],
                "Line": 11,
                "Parameters": [
                  {
                    "Name": "f",
                    "Type": "string",
                    "Assignment": null
                  },
                  {
                    "Name": "val",
                    "Type": "float",
                    "Assignment": null
                  }
                ],
                "Invocations": [],
                "Variables": [],
                "Statements": []
              },
              {
                "Name": "GetFeature",
                "Modifiers": [],
                "Line": 13,
                "Parameters": [
                  {
                    "Name": "f",
                    "Type": "string",
                    "Assignment": null
                  }
                ],
                "Invocations": [],
                "Variables": [],
                "Statements": []
              }
            ],
            "Fields": []
          }
        ],
        "Usings": []
      }
    ],
    "Classes": [],
    "Usings": [
      {
        "Name": "System.Collections",
        "Line": 0
      },
      {
        "Name": "System.Collections.Generic",
        "Line": 1
      },
      {
        "Name": "System.Linq",
        "Line": 2
      },
      {
        "Name": "UnityEngine",
        "Line": 3
      }
    ]
  },
  {
    "Name": "OverTime",
    "Interfaces": [],
    "Namespaces": [
      {
        "Line": 4,
        "Name": "Character",
        "Interfaces": [],
        "Namespaces": [],
        "Classes": [
          {
            "Name": "OverTime",
            "Modifier": "public",
            "Inheritance": "Object",
            "Line": 6,
            "Interfaces": [],
            "Properties": [],
            "Methods": [
              {
                "Name": "Activate",
                "Modifiers": [],
                "Line": 23,
                "Parameters": [],
                "Invocations": [],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{ }",
                    "Line": 23
                  }
                ]
              }
            ],
            "Fields": []
          }
        ],
        "Usings": []
      }
    ],
    "Classes": [],
    "Usings": [
      {
        "Name": "System.Collections",
        "Line": 0
      },
      {
        "Name": "System.Collections.Generic",
        "Line": 1
      },
      {
        "Name": "UnityEngine",
        "Line": 2
      }
    ]
  },
  {
    "Name": "PathManager",
    "Interfaces": [],
    "Namespaces": [
      {
        "Line": 6,
        "Name": "Character",
        "Interfaces": [],
        "Namespaces": [],
        "Classes": [
          {
            "Name": "PathManager",
            "Modifier": "public",
            "Inheritance": "MonoBehaviour",
            "Line": 8,
            "Interfaces": [],
            "Properties": [],
            "Methods": [
              {
                "Name": "CorrectPath",
                "Modifiers": [],
                "Line": 17,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 19,
                    "Name": "Application.streamingAssetsPath, path",
                    "FullName": "System.IO.Path.Combine(string, string)",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            return System.IO.Path.Combine(Application.streamingAssetsPath, path);\r\n        }",
                    "Line": 18
                  },
                  {
                    "Statement": "return System.IO.Path.Combine(Application.streamingAssetsPath, path);",
                    "Line": 19
                  }
                ]
              }
            ],
            "Fields": []
          }
        ],
        "Usings": []
      }
    ],
    "Classes": [],
    "Usings": [
      {
        "Name": "System.Collections",
        "Line": 0
      },
      {
        "Name": "System.Collections.Generic",
        "Line": 1
      },
      {
        "Name": "UnityEngine",
        "Line": 2
      },
      {
        "Name": "System",
        "Line": 3
      },
      {
        "Name": "System.IO",
        "Line": 4
      }
    ]
  },
  {
    "Name": "PlayerLifeManager",
    "Interfaces": [],
    "Namespaces": [
      {
        "Line": 10,
        "Name": "Character",
        "Interfaces": [],
        "Namespaces": [],
        "Classes": [
          {
            "Name": "PlayerLifeManager",
            "Modifier": "public",
            "Inheritance": "NetworkBehaviour",
            "Line": 12,
            "Interfaces": [],
            "Properties": [],
            "Methods": [
              {
                "Name": "Awake",
                "Modifiers": [],
                "Line": 46,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 48,
                    "Name": "Application.streamingAssetsPath, LIFEFEATUREPATH",
                    "FullName": "System.IO.Path.Combine(string, string)",
                    "Parameters": []
                  },
                  {
                    "Line": 49,
                    "Name": "Application.streamingAssetsPath, TICKSPATH",
                    "FullName": "System.IO.Path.Combine(string, string)",
                    "Parameters": []
                  },
                  {
                    "Line": 50,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  },
                  {
                    "Line": 53,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  },
                  {
                    "Line": 54,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  },
                  {
                    "Line": 55,
                    "Name": "LIFEFEATUREPATH, lifeFeatures",
                    "FullName": "Character.PlayerLifeManager.LoadParameters<string, float>(string, System.Collections.Generic.Dictionary<string, float>)",
                    "Parameters": []
                  },
                  {
                    "Line": 56,
                    "Name": "TICKSPATH, tickables",
                    "FullName": "Character.PlayerLifeManager.LoadParameters<string, string>(string, System.Collections.Generic.Dictionary<string, string>)",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            LIFEFEATUREPATH = Path.Combine(Application.streamingAssetsPath, LIFEFEATUREPATH);\r\n            TICKSPATH = Path.Combine(Application.streamingAssetsPath, TICKSPATH);\r\n            playerManager = GetComponent<PlayerManagerScript>();\r\n            featureManager = playerManager.PlayerFeatures;\r\n            componentManager = playerManager.ComponentManager;\r\n            characterStatus = GetComponent<CharacterStatus>();\r\n            effectManager = GetComponent<EffectManager>();\r\n            LoadParameters(LIFEFEATUREPATH, lifeFeatures);\r\n            LoadParameters(TICKSPATH, tickables);\r\n        }",
                    "Line": 47
                  },
                  {
                    "Statement": "LIFEFEATUREPATH = Path.Combine(Application.streamingAssetsPath, LIFEFEATUREPATH);",
                    "Line": 48
                  },
                  {
                    "Statement": "TICKSPATH = Path.Combine(Application.streamingAssetsPath, TICKSPATH);",
                    "Line": 49
                  },
                  {
                    "Statement": "playerManager = GetComponent<PlayerManagerScript>();",
                    "Line": 50
                  },
                  {
                    "Statement": "featureManager = playerManager.PlayerFeatures;",
                    "Line": 51
                  },
                  {
                    "Statement": "componentManager = playerManager.ComponentManager;",
                    "Line": 52
                  },
                  {
                    "Statement": "characterStatus = GetComponent<CharacterStatus>();",
                    "Line": 53
                  },
                  {
                    "Statement": "effectManager = GetComponent<EffectManager>();",
                    "Line": 54
                  },
                  {
                    "Statement": "LoadParameters(LIFEFEATUREPATH, lifeFeatures);",
                    "Line": 55
                  },
                  {
                    "Statement": "LoadParameters(TICKSPATH, tickables);",
                    "Line": 56
                  }
                ]
              },
              {
                "Name": "Start",
                "Modifiers": [],
                "Line": 59,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 63,
                    "Name": "",
                    "FullName": "Character.PlayerLifeManager.CmdAlive()",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            inGameUI = playerManager.InGameUI;\r\n            scoreTableManager = playerManager.ScoreTable;\r\n            if (isLocalPlayer) CmdAlive();\r\n            lastPlayerHitting = playerManager.ClientId;\r\n        }",
                    "Line": 60
                  },
                  {
                    "Statement": "inGameUI = playerManager.InGameUI;",
                    "Line": 61
                  },
                  {
                    "Statement": "scoreTableManager = playerManager.ScoreTable;",
                    "Line": 62
                  },
                  {
                    "Statement": "if (isLocalPlayer) CmdAlive();",
                    "Line": 63
                  },
                  {
                    "Statement": "CmdAlive();",
                    "Line": 63
                  },
                  {
                    "Statement": "lastPlayerHitting = playerManager.ClientId;",
                    "Line": 64
                  }
                ]
              },
              {
                "Name": "LoadFeatures",
                "Modifiers": [],
                "Line": 67,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 69,
                    "Name": "HEALTH",
                    "FullName": "Character.FeatureManager.FeatureValue(string)",
                    "Parameters": []
                  },
                  {
                    "Line": 70,
                    "Name": "ARMOR",
                    "FullName": "Character.FeatureManager.FeatureValue(string)",
                    "Parameters": []
                  },
                  {
                    "Line": 71,
                    "Name": "initialHealth",
                    "FullName": "Character.PlayerLifeManager.CmdHealth(int)",
                    "Parameters": []
                  },
                  {
                    "Line": 72,
                    "Name": "initialArmor",
                    "FullName": "Character.PlayerLifeManager.CmdAddArmor(int)",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            initialHealth = (int)featureManager.FeatureValue(HEALTH);\r\n            initialArmor = (int)featureManager.FeatureValue(ARMOR);\r\n            if (isLocalPlayer) CmdHealth(initialHealth);\r\n            if (isLocalPlayer) CmdAddArmor(initialArmor);\r\n            isDead = false;\r\n            characterStatus.IsAlive = true;\r\n            loading = false;\r\n            experience = 0;\r\n        }",
                    "Line": 68
                  },
                  {
                    "Statement": "initialHealth = (int)featureManager.FeatureValue(HEALTH);",
                    "Line": 69
                  },
                  {
                    "Statement": "initialArmor = (int)featureManager.FeatureValue(ARMOR);",
                    "Line": 70
                  },
                  {
                    "Statement": "if (isLocalPlayer) CmdHealth(initialHealth);",
                    "Line": 71
                  },
                  {
                    "Statement": "CmdHealth(initialHealth);",
                    "Line": 71
                  },
                  {
                    "Statement": "if (isLocalPlayer) CmdAddArmor(initialArmor);",
                    "Line": 72
                  },
                  {
                    "Statement": "CmdAddArmor(initialArmor);",
                    "Line": 72
                  },
                  {
                    "Statement": "isDead = false;",
                    "Line": 73
                  },
                  {
                    "Statement": "characterStatus.IsAlive = true;",
                    "Line": 74
                  },
                  {
                    "Statement": "loading = false;",
                    "Line": 75
                  },
                  {
                    "Statement": "experience = 0;",
                    "Line": 76
                  }
                ]
              },
              {
                "Name": "TakeDamage",
                "Modifiers": [],
                "Line": 101,
                "Parameters": [
                  {
                    "Name": "dmg",
                    "Type": "int",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 104,
                    "Name": "dmg",
                    "FullName": "Character.PlayerLifeManager.ReduceArmor(float)",
                    "Parameters": []
                  },
                  {
                    "Line": 105,
                    "Name": "dmg",
                    "FullName": "Character.PlayerLifeManager.ComputateHealthReduction(float)",
                    "Parameters": []
                  },
                  {
                    "Line": 106,
                    "Name": "damage",
                    "FullName": "UnityEngine.Mathf.CeilToInt(float)",
                    "Parameters": []
                  },
                  {
                    "Line": 107,
                    "Name": "lastPlayerHitting, finalDamage",
                    "FullName": "Character.ScoreTableManager.UpdateDamage(int, int)",
                    "Parameters": []
                  },
                  {
                    "Line": 108,
                    "Name": "finalDamage",
                    "FullName": "Character.PlayerLifeManager.CmdTakeDamage(int)",
                    "Parameters": []
                  },
                  {
                    "Line": 109,
                    "Name": "damageReceivedColorFeedback",
                    "FullName": "Character.InGameUIManager.DoFeedback(UnityEngine.Color)",
                    "Parameters": []
                  }
                ],
                "Variables": [
                  {
                    "Name": "damage",
                    "Type": "float",
                    "Assignment": "ComputateHealthReduction(dmg)",
                    "Line": 105
                  },
                  {
                    "Name": "finalDamage",
                    "Type": "int",
                    "Assignment": "Mathf.CeilToInt(damage)",
                    "Line": 106
                  }
                ],
                "Statements": [
                  {
                    "Statement": "{\r\n            if (isDead) return;\r\n            ReduceArmor(dmg);\r\n            float damage = ComputateHealthReduction(dmg);\r\n            int finalDamage = Mathf.CeilToInt(damage);\r\n            playerManager.ScoreTable.UpdateDamage(lastPlayerHitting, finalDamage);\r\n            if (isLocalPlayer) CmdTakeDamage(finalDamage);\r\n            inGameUI.DoFeedback(damageReceivedColorFeedback);\r\n        }",
                    "Line": 102
                  },
                  {
                    "Statement": "if (isDead) return;",
                    "Line": 103
                  },
                  {
                    "Statement": "return;",
                    "Line": 103
                  },
                  {
                    "Statement": "ReduceArmor(dmg);",
                    "Line": 104
                  },
                  {
                    "Statement": "float damage = ComputateHealthReduction(dmg);",
                    "Line": 105
                  },
                  {
                    "Statement": "int finalDamage = Mathf.CeilToInt(damage);",
                    "Line": 106
                  },
                  {
                    "Statement": "playerManager.ScoreTable.UpdateDamage(lastPlayerHitting, finalDamage);",
                    "Line": 107
                  },
                  {
                    "Statement": "if (isLocalPlayer) CmdTakeDamage(finalDamage);",
                    "Line": 108
                  },
                  {
                    "Statement": "CmdTakeDamage(finalDamage);",
                    "Line": 108
                  },
                  {
                    "Statement": "inGameUI.DoFeedback(damageReceivedColorFeedback);",
                    "Line": 109
                  }
                ]
              },
              {
                "Name": "HealMe",
                "Modifiers": [],
                "Line": 111,
                "Parameters": [
                  {
                    "Name": "amount",
                    "Type": "int",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 114,
                    "Name": "amount",
                    "FullName": "Character.PlayerLifeManager.CmdHeal(int)",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            if (isDead) return;\r\n            CmdHeal(amount);\r\n            if (health > maxHealth) health = maxHealth;\r\n        }",
                    "Line": 112
                  },
                  {
                    "Statement": "if (isDead) return;",
                    "Line": 113
                  },
                  {
                    "Statement": "return;",
                    "Line": 113
                  },
                  {
                    "Statement": "CmdHeal(amount);",
                    "Line": 114
                  },
                  {
                    "Statement": "if (health > maxHealth) health = maxHealth;",
                    "Line": 115
                  },
                  {
                    "Statement": "health = maxHealth;",
                    "Line": 115
                  }
                ]
              },
              {
                "Name": "AddExp",
                "Modifiers": [],
                "Line": 117,
                "Parameters": [
                  {
                    "Name": "amount",
                    "Type": "int",
                    "Assignment": null
                  }
                ],
                "Invocations": [],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            if (isDead) return;\r\n            experience += amount;\r\n        }",
                    "Line": 118
                  },
                  {
                    "Statement": "if (isDead) return;",
                    "Line": 119
                  },
                  {
                    "Statement": "return;",
                    "Line": 119
                  },
                  {
                    "Statement": "experience += amount;",
                    "Line": 120
                  }
                ]
              },
              {
                "Name": "FixedUpdate",
                "Modifiers": [],
                "Line": 123,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 129,
                    "Name": "HEALTH",
                    "FullName": "Character.PlayerManagerScript.FeatureValue(string)",
                    "Parameters": []
                  },
                  {
                    "Line": 130,
                    "Name": "",
                    "FullName": "Character.PlayerLifeManager.LoadFeatures()",
                    "Parameters": []
                  },
                  {
                    "Line": 132,
                    "Name": "",
                    "FullName": "Character.PlayerLifeManager.ComputeFeature()",
                    "Parameters": []
                  },
                  {
                    "Line": 133,
                    "Name": "ARMOR",
                    "FullName": "Character.PlayerManagerScript.FeatureValue(string)",
                    "Parameters": []
                  },
                  {
                    "Line": 134,
                    "Name": "HEALTH",
                    "FullName": "Character.PlayerManagerScript.FeatureValue(string)",
                    "Parameters": []
                  },
                  {
                    "Line": 135,
                    "Name": "",
                    "FullName": "Character.PlayerLifeManager.DoAllTicks()",
                    "Parameters": []
                  },
                  {
                    "Line": 136,
                    "Name": "",
                    "FullName": "Character.PlayerLifeManager.CheckEffects()",
                    "Parameters": []
                  },
                  {
                    "Line": 141,
                    "Name": "",
                    "FullName": "Character.PlayerLifeManager.CmdDeath()",
                    "Parameters": []
                  },
                  {
                    "Line": 143,
                    "Name": "lastPlayerHitting",
                    "FullName": "Character.ScoreTableManager.UpdateKill(int)",
                    "Parameters": []
                  },
                  {
                    "Line": 145,
                    "Name": "",
                    "FullName": "Character.PlayerLifeManager.CheckIsOutOfBorder()",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            if (isDead) return;\r\n            if (!featureManager.Loaded) return;\r\n            if (loading && featureManager.Loaded)\r\n            {\r\n                health = (int)playerManager.FeatureValue(HEALTH);\r\n                LoadFeatures();\r\n            }\r\n            ComputeFeature();\r\n            armor = (int)playerManager.FeatureValue(ARMOR);\r\n            maxHealth = (int)playerManager.FeatureValue(HEALTH);\r\n            DoAllTicks();\r\n            CheckEffects();\r\n            if (health <= 0 && !loading)\r\n            {\r\n                health = 0;\r\n                isDead = true;\r\n                if(isLocalPlayer) CmdDeath();\r\n                characterStatus.IsAlive = false;\r\n                scoreTableManager.UpdateKill(lastPlayerHitting);\r\n            }\r\n            CheckIsOutOfBorder();\r\n        }",
                    "Line": 124
                  },
                  {
                    "Statement": "if (isDead) return;",
                    "Line": 125
                  },
                  {
                    "Statement": "return;",
                    "Line": 125
                  },
                  {
                    "Statement": "if (!featureManager.Loaded) return;",
                    "Line": 126
                  },
                  {
                    "Statement": "return;",
                    "Line": 126
                  },
                  {
                    "Statement": "if (loading && featureManager.Loaded)\r\n            {\r\n                health = (int)playerManager.FeatureValue(HEALTH);\r\n                LoadFeatures();\r\n            }",
                    "Line": 127
                  },
                  {
                    "Statement": "{\r\n                health = (int)playerManager.FeatureValue(HEALTH);\r\n                LoadFeatures();\r\n            }",
                    "Line": 128
                  },
                  {
                    "Statement": "health = (int)playerManager.FeatureValue(HEALTH);",
                    "Line": 129
                  },
                  {
                    "Statement": "LoadFeatures();",
                    "Line": 130
                  },
                  {
                    "Statement": "ComputeFeature();",
                    "Line": 132
                  },
                  {
                    "Statement": "armor = (int)playerManager.FeatureValue(ARMOR);",
                    "Line": 133
                  },
                  {
                    "Statement": "maxHealth = (int)playerManager.FeatureValue(HEALTH);",
                    "Line": 134
                  },
                  {
                    "Statement": "DoAllTicks();",
                    "Line": 135
                  },
                  {
                    "Statement": "CheckEffects();",
                    "Line": 136
                  },
                  {
                    "Statement": "if (health <= 0 && !loading)\r\n            {\r\n                health = 0;\r\n                isDead = true;\r\n                if(isLocalPlayer) CmdDeath();\r\n                characterStatus.IsAlive = false;\r\n                scoreTableManager.UpdateKill(lastPlayerHitting);\r\n            }",
                    "Line": 137
                  },
                  {
                    "Statement": "{\r\n                health = 0;\r\n                isDead = true;\r\n                if(isLocalPlayer) CmdDeath();\r\n                characterStatus.IsAlive = false;\r\n                scoreTableManager.UpdateKill(lastPlayerHitting);\r\n            }",
                    "Line": 138
                  },
                  {
                    "Statement": "health = 0;",
                    "Line": 139
                  },
                  {
                    "Statement": "isDead = true;",
                    "Line": 140
                  },
                  {
                    "Statement": "if(isLocalPlayer) CmdDeath();",
                    "Line": 141
                  },
                  {
                    "Statement": "CmdDeath();",
                    "Line": 141
                  },
                  {
                    "Statement": "characterStatus.IsAlive = false;",
                    "Line": 142
                  },
                  {
                    "Statement": "scoreTableManager.UpdateKill(lastPlayerHitting);",
                    "Line": 143
                  },
                  {
                    "Statement": "CheckIsOutOfBorder();",
                    "Line": 145
                  }
                ]
              },
              {
                "Name": "DoAllTicks",
                "Modifiers": [],
                "Line": 148,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 152,
                    "Name": "t.Key, t.Value",
                    "FullName": "Character.PlayerLifeManager.ComputeByComponent(string, string)",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            foreach(KeyValuePair<string, string> t in tickables)\r\n            {\r\n                ComputeByComponent(t.Key, t.Value);\r\n            }\r\n        }",
                    "Line": 149
                  },
                  {
                    "Statement": "foreach(KeyValuePair<string, string> t in tickables)\r\n            {\r\n                ComputeByComponent(t.Key, t.Value);\r\n            }",
                    "Line": 150
                  },
                  {
                    "Statement": "{\r\n                ComputeByComponent(t.Key, t.Value);\r\n            }",
                    "Line": 151
                  },
                  {
                    "Statement": "ComputeByComponent(t.Key, t.Value);",
                    "Line": 152
                  }
                ]
              },
              {
                "Name": "ForeignDamage",
                "Modifiers": [],
                "Line": 156,
                "Parameters": [
                  {
                    "Name": "dmg",
                    "Type": "string",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 158,
                    "Name": "dmg",
                    "FullName": "UnityEngine.JsonUtility.FromJson<Character.ShootingScript.DamageDone>(string)",
                    "Parameters": []
                  },
                  {
                    "Line": 159,
                    "Name": "damage.Effects",
                    "FullName": "EffectManager.Effects(System.Collections.Generic.List<string>)",
                    "Parameters": []
                  },
                  {
                    "Line": 162,
                    "Name": "Mathf.CeilToInt(ComputeFeatureValue(damageList))",
                    "FullName": "Character.PlayerLifeManager.TakeDamage(int)",
                    "Parameters": []
                  },
                  {
                    "Line": 162,
                    "Name": "ComputeFeatureValue(damageList)",
                    "FullName": "UnityEngine.Mathf.CeilToInt(float)",
                    "Parameters": []
                  },
                  {
                    "Line": 162,
                    "Name": "damageList",
                    "FullName": "Character.PlayerLifeManager.ComputeFeatureValue(System.Collections.Generic.Dictionary<string, float>)",
                    "Parameters": []
                  },
                  {
                    "Line": 163,
                    "Name": "effList",
                    "FullName": "UnityEngine.JsonUtility.ToJson(object)",
                    "Parameters": []
                  }
                ],
                "Variables": [
                  {
                    "Name": "damage",
                    "Type": "ShootingScript.DamageDone",
                    "Assignment": "JsonUtility.FromJson<ShootingScript.DamageDone>(dmg)",
                    "Line": 158
                  },
                  {
                    "Name": "effList",
                    "Type": "ShootingScript.EffectList",
                    "Assignment": "new ShootingScript.EffectList(effectManager.Effects(damage.Effects))",
                    "Line": 159
                  },
                  {
                    "Name": "damageList",
                    "Type": "Dictionary<string, float>",
                    "Assignment": "damage.DamageList",
                    "Line": 160
                  }
                ],
                "Statements": [
                  {
                    "Statement": "{\r\n            ShootingScript.DamageDone damage = JsonUtility.FromJson<ShootingScript.DamageDone>(dmg);\r\n            ShootingScript.EffectList effList = new ShootingScript.EffectList(effectManager.Effects(damage.Effects));\r\n            Dictionary<string, float> damageList = damage.DamageList;\r\n            lastPlayerHitting = damage.playerid;\r\n            TakeDamage(Mathf.CeilToInt(ComputeFeatureValue(damageList)));\r\n            effectJSON = JsonUtility.ToJson(effList);\r\n        }",
                    "Line": 157
                  },
                  {
                    "Statement": "ShootingScript.DamageDone damage = JsonUtility.FromJson<ShootingScript.DamageDone>(dmg);",
                    "Line": 158
                  },
                  {
                    "Statement": "ShootingScript.EffectList effList = new ShootingScript.EffectList(effectManager.Effects(damage.Effects));",
                    "Line": 159
                  },
                  {
                    "Statement": "Dictionary<string, float> damageList = damage.DamageList;",
                    "Line": 160
                  },
                  {
                    "Statement": "lastPlayerHitting = damage.playerid;",
                    "Line": 161
                  },
                  {
                    "Statement": "TakeDamage(Mathf.CeilToInt(ComputeFeatureValue(damageList)));",
                    "Line": 162
                  },
                  {
                    "Statement": "effectJSON = JsonUtility.ToJson(effList);",
                    "Line": 163
                  }
                ]
              },
              {
                "Name": "CheckEffects",
                "Modifiers": [],
                "Line": 166,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 168,
                    "Name": "effectJSON",
                    "FullName": "string.IsNullOrEmpty(string)",
                    "Parameters": []
                  },
                  {
                    "Line": 169,
                    "Name": "effectJSON",
                    "FullName": "UnityEngine.JsonUtility.FromJson<Character.ShootingScript.EffectList>(string)",
                    "Parameters": []
                  },
                  {
                    "Line": 170,
                    "Name": "eff",
                    "FullName": "Character.PlayerLifeManager.ApplyAruas(System.Collections.Generic.List<string>)",
                    "Parameters": []
                  },
                  {
                    "Line": 174,
                    "Name": "",
                    "FullName": "Character.PlayerLifeManager.CmdClearEffect()",
                    "Parameters": []
                  }
                ],
                "Variables": [
                  {
                    "Name": "eff",
                    "Type": "List<string>",
                    "Assignment": "JsonUtility.FromJson<ShootingScript.EffectList>(effectJSON).Effects",
                    "Line": 169
                  }
                ],
                "Statements": [
                  {
                    "Statement": "{\r\n            if (String.IsNullOrEmpty(effectJSON)) return;\r\n            List<string> eff = JsonUtility.FromJson<ShootingScript.EffectList>(effectJSON).Effects;\r\n            ApplyAruas(eff);\r\n            if (isLocalPlayer)\r\n            {\r\n                effectJSON = null;\r\n                CmdClearEffect();\r\n            }\r\n        }",
                    "Line": 167
                  },
                  {
                    "Statement": "if (String.IsNullOrEmpty(effectJSON)) return;",
                    "Line": 168
                  },
                  {
                    "Statement": "return;",
                    "Line": 168
                  },
                  {
                    "Statement": "List<string> eff = JsonUtility.FromJson<ShootingScript.EffectList>(effectJSON).Effects;",
                    "Line": 169
                  },
                  {
                    "Statement": "ApplyAruas(eff);",
                    "Line": 170
                  },
                  {
                    "Statement": "if (isLocalPlayer)\r\n            {\r\n                effectJSON = null;\r\n                CmdClearEffect();\r\n            }",
                    "Line": 171
                  },
                  {
                    "Statement": "{\r\n                effectJSON = null;\r\n                CmdClearEffect();\r\n            }",
                    "Line": 172
                  },
                  {
                    "Statement": "effectJSON = null;",
                    "Line": 173
                  },
                  {
                    "Statement": "CmdClearEffect();",
                    "Line": 174
                  }
                ]
              },
              {
                "Name": "ApplyAruas",
                "Modifiers": [],
                "Line": 178,
                "Parameters": [
                  {
                    "Name": "effects",
                    "Type": "List<string>",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 183,
                    "Name": "\"Powerup\", e, path",
                    "FullName": "Character.ComponentManager.ComponentPickup(string, string, string)",
                    "Parameters": []
                  }
                ],
                "Variables": [
                  {
                    "Name": "path",
                    "Type": "string",
                    "Assignment": "buffBasePath + e + ext",
                    "Line": 182
                  }
                ],
                "Statements": [
                  {
                    "Statement": "{\r\n            foreach(string e in effects)\r\n            {\r\n                string path = buffBasePath + e + ext;\r\n                componentManager.ComponentPickup(\"Powerup\", e, path);\r\n            }\r\n        }",
                    "Line": 179
                  },
                  {
                    "Statement": "foreach(string e in effects)\r\n            {\r\n                string path = buffBasePath + e + ext;\r\n                componentManager.ComponentPickup(\"Powerup\", e, path);\r\n            }",
                    "Line": 180
                  },
                  {
                    "Statement": "{\r\n                string path = buffBasePath + e + ext;\r\n                componentManager.ComponentPickup(\"Powerup\", e, path);\r\n            }",
                    "Line": 181
                  },
                  {
                    "Statement": "string path = buffBasePath + e + ext;",
                    "Line": 182
                  },
                  {
                    "Statement": "componentManager.ComponentPickup(\"Powerup\", e, path);",
                    "Line": 183
                  }
                ]
              },
              {
                "Name": "ComputeFeature",
                "Modifiers": [],
                "Line": 187,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 191,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  },
                  {
                    "Line": 192,
                    "Name": "s",
                    "FullName": "Character.ComponentManager.FeatureValue(string)",
                    "Parameters": []
                  }
                ],
                "Variables": [
                  {
                    "Name": "i",
                    "Type": "int",
                    "Assignment": "0",
                    "Line": 189
                  },
                  {
                    "Name": "s",
                    "Type": "string",
                    "Assignment": "lifeFeatures.Keys.ElementAt(i)",
                    "Line": 191
                  }
                ],
                "Statements": [
                  {
                    "Statement": "{\r\n            for(int i = 0; i < lifeFeatures.Count; i++)\r\n            {\r\n                string s = lifeFeatures.Keys.ElementAt(i);\r\n                lifeFeatures[s] = componentManager.FeatureValue(s);\r\n            }\r\n        }",
                    "Line": 188
                  },
                  {
                    "Statement": "for(int i = 0; i < lifeFeatures.Count; i++)\r\n            {\r\n                string s = lifeFeatures.Keys.ElementAt(i);\r\n                lifeFeatures[s] = componentManager.FeatureValue(s);\r\n            }",
                    "Line": 189
                  },
                  {
                    "Statement": "{\r\n                string s = lifeFeatures.Keys.ElementAt(i);\r\n                lifeFeatures[s] = componentManager.FeatureValue(s);\r\n            }",
                    "Line": 190
                  },
                  {
                    "Statement": "string s = lifeFeatures.Keys.ElementAt(i);",
                    "Line": 191
                  },
                  {
                    "Statement": "lifeFeatures[s] = componentManager.FeatureValue(s);",
                    "Line": 192
                  }
                ]
              },
              {
                "Name": "ComputeByComponent",
                "Modifiers": [],
                "Line": 196,
                "Parameters": [
                  {
                    "Name": "type",
                    "Type": "string",
                    "Assignment": null
                  },
                  {
                    "Name": "func",
                    "Type": "string",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 198,
                    "Name": "type",
                    "FullName": "Character.PlayerManagerScript.GetAllTicks(string)",
                    "Parameters": []
                  },
                  {
                    "Line": 199,
                    "Name": "filtered",
                    "FullName": "Character.PlayerLifeManager.ComputeFeatureValue(System.Collections.Generic.Dictionary<string, float>)",
                    "Parameters": []
                  },
                  {
                    "Line": 200,
                    "Name": "amount",
                    "FullName": "UnityEngine.Mathf.CeilToInt(float)",
                    "Parameters": []
                  },
                  {
                    "Line": 204,
                    "Name": "",
                    "FullName": "object.GetType()",
                    "Parameters": []
                  },
                  {
                    "Line": 205,
                    "Name": "func",
                    "FullName": "System.Type.GetMethod(string)",
                    "Parameters": []
                  },
                  {
                    "Line": 206,
                    "Name": "this, p",
                    "FullName": "System.Reflection.MethodBase.Invoke(object, object[])",
                    "Parameters": []
                  }
                ],
                "Variables": [
                  {
                    "Name": "filtered",
                    "Type": "Dictionary<string, float>",
                    "Assignment": "playerManager.GetAllTicks(type)",
                    "Line": 198
                  },
                  {
                    "Name": "amount",
                    "Type": "float",
                    "Assignment": "ComputeFeatureValue(filtered)",
                    "Line": 199
                  },
                  {
                    "Name": "famount",
                    "Type": "int",
                    "Assignment": "Mathf.CeilToInt(amount)",
                    "Line": 200
                  },
                  {
                    "Name": "p",
                    "Type": "object[]",
                    "Assignment": "{ famount }",
                    "Line": 203
                  },
                  {
                    "Name": "thisType",
                    "Type": "Type",
                    "Assignment": "this.GetType()",
                    "Line": 204
                  },
                  {
                    "Name": "theMethod",
                    "Type": "MethodInfo",
                    "Assignment": "thisType.GetMethod(func)",
                    "Line": 205
                  }
                ],
                "Statements": [
                  {
                    "Statement": "{\r\n            Dictionary<string, float> filtered = playerManager.GetAllTicks(type);\r\n            float amount = ComputeFeatureValue(filtered);\r\n            int famount = Mathf.CeilToInt(amount);\r\n            if (famount > 0)\r\n            {\r\n                object[] p = { famount };\r\n                Type thisType = this.GetType();\r\n                MethodInfo theMethod = thisType.GetMethod(func);\r\n                theMethod.Invoke(this, p);\r\n            }\r\n        }",
                    "Line": 197
                  },
                  {
                    "Statement": "Dictionary<string, float> filtered = playerManager.GetAllTicks(type);",
                    "Line": 198
                  },
                  {
                    "Statement": "float amount = ComputeFeatureValue(filtered);",
                    "Line": 199
                  },
                  {
                    "Statement": "int famount = Mathf.CeilToInt(amount);",
                    "Line": 200
                  },
                  {
                    "Statement": "if (famount > 0)\r\n            {\r\n                object[] p = { famount };\r\n                Type thisType = this.GetType();\r\n                MethodInfo theMethod = thisType.GetMethod(func);\r\n                theMethod.Invoke(this, p);\r\n            }",
                    "Line": 201
                  },
                  {
                    "Statement": "{\r\n                object[] p = { famount };\r\n                Type thisType = this.GetType();\r\n                MethodInfo theMethod = thisType.GetMethod(func);\r\n                theMethod.Invoke(this, p);\r\n            }",
                    "Line": 202
                  },
                  {
                    "Statement": "object[] p = { famount };",
                    "Line": 203
                  },
                  {
                    "Statement": "Type thisType = this.GetType();",
                    "Line": 204
                  },
                  {
                    "Statement": "MethodInfo theMethod = thisType.GetMethod(func);",
                    "Line": 205
                  },
                  {
                    "Statement": "theMethod.Invoke(this, p);",
                    "Line": 206
                  }
                ]
              },
              {
                "Name": "ComputeFeatureValue",
                "Modifiers": [],
                "Line": 210,
                "Parameters": [
                  {
                    "Name": "received",
                    "Type": "Dictionary<string, float>",
                    "Assignment": null
                  }
                ],
                "Invocations": [],
                "Variables": [
                  {
                    "Name": "res",
                    "Type": "float",
                    "Assignment": "0",
                    "Line": 212
                  },
                  {
                    "Name": "reduction",
                    "Type": "float",
                    "Assignment": "lifeFeatures[s]",
                    "Line": 217
                  }
                ],
                "Statements": [
                  {
                    "Statement": "{\r\n            float res = 0;\r\n            foreach(string s in received.Keys)\r\n            {\r\n                try\r\n                {\r\n                    float reduction = lifeFeatures[s];\r\n                    res += received[s] * reduction;\r\n                }\r\n                catch (Exception) { }\r\n            }\r\n            return res;\r\n        }",
                    "Line": 211
                  },
                  {
                    "Statement": "float res = 0;",
                    "Line": 212
                  },
                  {
                    "Statement": "foreach(string s in received.Keys)\r\n            {\r\n                try\r\n                {\r\n                    float reduction = lifeFeatures[s];\r\n                    res += received[s] * reduction;\r\n                }\r\n                catch (Exception) { }\r\n            }",
                    "Line": 213
                  },
                  {
                    "Statement": "{\r\n                try\r\n                {\r\n                    float reduction = lifeFeatures[s];\r\n                    res += received[s] * reduction;\r\n                }\r\n                catch (Exception) { }\r\n            }",
                    "Line": 214
                  },
                  {
                    "Statement": "try\r\n                {\r\n                    float reduction = lifeFeatures[s];\r\n                    res += received[s] * reduction;\r\n                }\r\n                catch (Exception) { }",
                    "Line": 215
                  },
                  {
                    "Statement": "{\r\n                    float reduction = lifeFeatures[s];\r\n                    res += received[s] * reduction;\r\n                }",
                    "Line": 216
                  },
                  {
                    "Statement": "float reduction = lifeFeatures[s];",
                    "Line": 217
                  },
                  {
                    "Statement": "res += received[s] * reduction;",
                    "Line": 218
                  },
                  {
                    "Statement": "{ }",
                    "Line": 220
                  },
                  {
                    "Statement": "return res;",
                    "Line": 222
                  }
                ]
              },
              {
                "Name": "SignalAlive",
                "Modifiers": [],
                "Line": 225,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 227,
                    "Name": "",
                    "FullName": "Character.PlayerLifeManager.CmdAlive()",
                    "Parameters": []
                  },
                  {
                    "Line": 228,
                    "Name": "100",
                    "FullName": "Character.PlayerLifeManager.CmdHealth(int)",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            CmdAlive();\r\n            CmdHealth(100);\r\n        }",
                    "Line": 226
                  },
                  {
                    "Statement": "CmdAlive();",
                    "Line": 227
                  },
                  {
                    "Statement": "CmdHealth(100);",
                    "Line": 228
                  }
                ]
              },
              {
                "Name": "CheckIsOutOfBorder",
                "Modifiers": [],
                "Line": 231,
                "Parameters": [],
                "Invocations": [],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            if (transform.localPosition.y < -30) health = 0;\r\n        }",
                    "Line": 232
                  },
                  {
                    "Statement": "if (transform.localPosition.y < -30) health = 0;",
                    "Line": 233
                  },
                  {
                    "Statement": "health = 0;",
                    "Line": 233
                  }
                ]
              },
              {
                "Name": "CmdClearEffect",
                "Modifiers": [],
                "Line": 236,
                "Parameters": [],
                "Invocations": [],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            effectJSON = null;\r\n        }",
                    "Line": 238
                  },
                  {
                    "Statement": "effectJSON = null;",
                    "Line": 239
                  }
                ]
              },
              {
                "Name": "CmdTakeDamage",
                "Modifiers": [],
                "Line": 242,
                "Parameters": [
                  {
                    "Name": "amount",
                    "Type": "int",
                    "Assignment": null
                  }
                ],
                "Invocations": [],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            health -= amount;\r\n        }",
                    "Line": 244
                  },
                  {
                    "Statement": "health -= amount;",
                    "Line": 245
                  }
                ]
              },
              {
                "Name": "CmdHeal",
                "Modifiers": [],
                "Line": 248,
                "Parameters": [
                  {
                    "Name": "amount",
                    "Type": "int",
                    "Assignment": null
                  }
                ],
                "Invocations": [],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            health += amount;\r\n        }",
                    "Line": 250
                  },
                  {
                    "Statement": "health += amount;",
                    "Line": 251
                  }
                ]
              },
              {
                "Name": "CmdHealth",
                "Modifiers": [],
                "Line": 254,
                "Parameters": [
                  {
                    "Name": "amount",
                    "Type": "int",
                    "Assignment": null
                  }
                ],
                "Invocations": [],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            health = amount;\r\n        }",
                    "Line": 256
                  },
                  {
                    "Statement": "health = amount;",
                    "Line": 257
                  }
                ]
              },
              {
                "Name": "CmdAddArmor",
                "Modifiers": [],
                "Line": 260,
                "Parameters": [
                  {
                    "Name": "amount",
                    "Type": "int",
                    "Assignment": null
                  }
                ],
                "Invocations": [],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            armor = amount;\r\n        }",
                    "Line": 262
                  },
                  {
                    "Statement": "armor = amount;",
                    "Line": 263
                  }
                ]
              },
              {
                "Name": "CmdDeath",
                "Modifiers": [],
                "Line": 266,
                "Parameters": [],
                "Invocations": [],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            isDead = true;\r\n        }",
                    "Line": 268
                  },
                  {
                    "Statement": "isDead = true;",
                    "Line": 269
                  }
                ]
              },
              {
                "Name": "CmdAlive",
                "Modifiers": [],
                "Line": 272,
                "Parameters": [],
                "Invocations": [],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            isDead = false;\r\n        }",
                    "Line": 274
                  },
                  {
                    "Statement": "isDead = false;",
                    "Line": 275
                  }
                ]
              },
              {
                "Name": "ReduceArmor",
                "Modifiers": [],
                "Line": 278,
                "Parameters": [
                  {
                    "Name": "dmg",
                    "Type": "float",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 280,
                    "Name": "ARMOR",
                    "FullName": "Character.ComponentManager.ComponentsByFeature(string)",
                    "Parameters": []
                  },
                  {
                    "Line": 285,
                    "Name": "ARMORREDUCTION",
                    "FullName": "Character.UAComponent.ModifierNameByFeature(string)",
                    "Parameters": []
                  },
                  {
                    "Line": 289,
                    "Name": "ARMORDURABILITY, reduction",
                    "FullName": "Character.UAComponent.ReduceComponent(string, float)",
                    "Parameters": []
                  }
                ],
                "Variables": [
                  {
                    "Name": "comp",
                    "Type": "Dictionary<string, UAComponent>",
                    "Assignment": "componentManager.ComponentsByFeature(ARMOR)",
                    "Line": 280
                  },
                  {
                    "Name": "reductionName",
                    "Type": "string",
                    "Assignment": "c.ModifierNameByFeature(ARMORREDUCTION)",
                    "Line": 285
                  },
                  {
                    "Name": "reduction",
                    "Type": "float",
                    "Assignment": "c.MyModifiers[reductionName].MultFactor",
                    "Line": 286
                  }
                ],
                "Statements": [
                  {
                    "Statement": "{\r\n            Dictionary<string, UAComponent> comp = componentManager.ComponentsByFeature(ARMOR);\r\n            foreach(UAComponent c in comp.Values)\r\n            {\r\n                try\r\n                {\r\n                    string reductionName = c.ModifierNameByFeature(ARMORREDUCTION);\r\n                    float reduction = c.MyModifiers[reductionName].MultFactor;\r\n                    reduction *= dmg;\r\n                    if (reduction < minArmorReductionOnHit) reduction = minArmorReductionOnHit;\r\n                    c.ReduceComponent(ARMORDURABILITY, reduction);\r\n                }\r\n                catch (Exception) { }\r\n            }\r\n        }",
                    "Line": 279
                  },
                  {
                    "Statement": "Dictionary<string, UAComponent> comp = componentManager.ComponentsByFeature(ARMOR);",
                    "Line": 280
                  },
                  {
                    "Statement": "foreach(UAComponent c in comp.Values)\r\n            {\r\n                try\r\n                {\r\n                    string reductionName = c.ModifierNameByFeature(ARMORREDUCTION);\r\n                    float reduction = c.MyModifiers[reductionName].MultFactor;\r\n                    reduction *= dmg;\r\n                    if (reduction < minArmorReductionOnHit) reduction = minArmorReductionOnHit;\r\n                    c.ReduceComponent(ARMORDURABILITY, reduction);\r\n                }\r\n                catch (Exception) { }\r\n            }",
                    "Line": 281
                  },
                  {
                    "Statement": "{\r\n                try\r\n                {\r\n                    string reductionName = c.ModifierNameByFeature(ARMORREDUCTION);\r\n                    float reduction = c.MyModifiers[reductionName].MultFactor;\r\n                    reduction *= dmg;\r\n                    if (reduction < minArmorReductionOnHit) reduction = minArmorReductionOnHit;\r\n                    c.ReduceComponent(ARMORDURABILITY, reduction);\r\n                }\r\n                catch (Exception) { }\r\n            }",
                    "Line": 282
                  },
                  {
                    "Statement": "try\r\n                {\r\n                    string reductionName = c.ModifierNameByFeature(ARMORREDUCTION);\r\n                    float reduction = c.MyModifiers[reductionName].MultFactor;\r\n                    reduction *= dmg;\r\n                    if (reduction < minArmorReductionOnHit) reduction = minArmorReductionOnHit;\r\n                    c.ReduceComponent(ARMORDURABILITY, reduction);\r\n                }\r\n                catch (Exception) { }",
                    "Line": 283
                  },
                  {
                    "Statement": "{\r\n                    string reductionName = c.ModifierNameByFeature(ARMORREDUCTION);\r\n                    float reduction = c.MyModifiers[reductionName].MultFactor;\r\n                    reduction *= dmg;\r\n                    if (reduction < minArmorReductionOnHit) reduction = minArmorReductionOnHit;\r\n                    c.ReduceComponent(ARMORDURABILITY, reduction);\r\n                }",
                    "Line": 284
                  },
                  {
                    "Statement": "string reductionName = c.ModifierNameByFeature(ARMORREDUCTION);",
                    "Line": 285
                  },
                  {
                    "Statement": "float reduction = c.MyModifiers[reductionName].MultFactor;",
                    "Line": 286
                  },
                  {
                    "Statement": "reduction *= dmg;",
                    "Line": 287
                  },
                  {
                    "Statement": "if (reduction < minArmorReductionOnHit) reduction = minArmorReductionOnHit;",
                    "Line": 288
                  },
                  {
                    "Statement": "reduction = minArmorReductionOnHit;",
                    "Line": 288
                  },
                  {
                    "Statement": "c.ReduceComponent(ARMORDURABILITY, reduction);",
                    "Line": 289
                  },
                  {
                    "Statement": "{ }",
                    "Line": 291
                  }
                ]
              },
              {
                "Name": "ComputateHealthReduction",
                "Modifiers": [],
                "Line": 295,
                "Parameters": [
                  {
                    "Name": "dmg",
                    "Type": "float",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 297,
                    "Name": "DAMAGEREDUCTION",
                    "FullName": "Character.FeatureManager.FeatureValue(string)",
                    "Parameters": []
                  }
                ],
                "Variables": [
                  {
                    "Name": "reduction",
                    "Type": "float",
                    "Assignment": "playerManager.PlayerFeatures.FeatureValue(DAMAGEREDUCTION)",
                    "Line": 297
                  },
                  {
                    "Name": "healthReduction",
                    "Type": "float",
                    "Assignment": "dmg * reduction",
                    "Line": 298
                  }
                ],
                "Statements": [
                  {
                    "Statement": "{\r\n            float reduction = playerManager.PlayerFeatures.FeatureValue(DAMAGEREDUCTION);\r\n            float healthReduction = dmg * reduction;\r\n            return healthReduction;\r\n        }",
                    "Line": 296
                  },
                  {
                    "Statement": "float reduction = playerManager.PlayerFeatures.FeatureValue(DAMAGEREDUCTION);",
                    "Line": 297
                  },
                  {
                    "Statement": "float healthReduction = dmg * reduction;",
                    "Line": 298
                  },
                  {
                    "Statement": "return healthReduction;",
                    "Line": 299
                  }
                ]
              },
              {
                "Name": "LoadParameters",
                "Modifiers": [],
                "Line": 302,
                "Parameters": [
                  {
                    "Name": "path",
                    "Type": "string",
                    "Assignment": null
                  },
                  {
                    "Name": "paramDict",
                    "Type": "Dictionary<T1, T2>",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 304,
                    "Name": "path",
                    "FullName": "System.IO.File.ReadAllLines(string)",
                    "Parameters": []
                  },
                  {
                    "Line": 307,
                    "Name": "','",
                    "FullName": "string.Split(params char[])",
                    "Parameters": []
                  },
                  {
                    "Line": 308,
                    "Name": "",
                    "FullName": "string.Trim()",
                    "Parameters": []
                  },
                  {
                    "Line": 309,
                    "Name": "",
                    "FullName": "string.Trim()",
                    "Parameters": []
                  },
                  {
                    "Line": 310,
                    "Name": "items[1]",
                    "FullName": "Character.PlayerLifeManager.ParseFloatValue(string)",
                    "Parameters": []
                  },
                  {
                    "Line": 311,
                    "Name": "(T1)param1, (T2)param2",
                    "FullName": "System.Collections.Generic.Dictionary<T1, T2>.Add(T1, T2)",
                    "Parameters": []
                  }
                ],
                "Variables": [
                  {
                    "Name": "lines",
                    "Type": "string[]",
                    "Assignment": "File.ReadAllLines(path)",
                    "Line": 304
                  },
                  {
                    "Name": "items",
                    "Type": "string[]",
                    "Assignment": "l.Split(',')",
                    "Line": 307
                  },
                  {
                    "Name": "param1",
                    "Type": "object",
                    "Assignment": "items[0].Trim()",
                    "Line": 308
                  },
                  {
                    "Name": "param2",
                    "Type": "object",
                    "Assignment": "items[1].Trim()",
                    "Line": 309
                  }
                ],
                "Statements": [
                  {
                    "Statement": "{\r\n            string[] lines = File.ReadAllLines(path);\r\n            foreach (string l in lines)\r\n            {\r\n                string[] items = l.Split(',');\r\n                object param1 = items[0].Trim();\r\n                object param2 = items[1].Trim();\r\n                if (typeof(T2) == typeof(float)) param2 = ParseFloatValue(items[1]);\r\n                paramDict.Add((T1)param1, (T2)param2);\r\n            }\r\n        }",
                    "Line": 303
                  },
                  {
                    "Statement": "string[] lines = File.ReadAllLines(path);",
                    "Line": 304
                  },
                  {
                    "Statement": "foreach (string l in lines)\r\n            {\r\n                string[] items = l.Split(',');\r\n                object param1 = items[0].Trim();\r\n                object param2 = items[1].Trim();\r\n                if (typeof(T2) == typeof(float)) param2 = ParseFloatValue(items[1]);\r\n                paramDict.Add((T1)param1, (T2)param2);\r\n            }",
                    "Line": 305
                  },
                  {
                    "Statement": "{\r\n                string[] items = l.Split(',');\r\n                object param1 = items[0].Trim();\r\n                object param2 = items[1].Trim();\r\n                if (typeof(T2) == typeof(float)) param2 = ParseFloatValue(items[1]);\r\n                paramDict.Add((T1)param1, (T2)param2);\r\n            }",
                    "Line": 306
                  },
                  {
                    "Statement": "string[] items = l.Split(',');",
                    "Line": 307
                  },
                  {
                    "Statement": "object param1 = items[0].Trim();",
                    "Line": 308
                  },
                  {
                    "Statement": "object param2 = items[1].Trim();",
                    "Line": 309
                  },
                  {
                    "Statement": "if (typeof(T2) == typeof(float)) param2 = ParseFloatValue(items[1]);",
                    "Line": 310
                  },
                  {
                    "Statement": "param2 = ParseFloatValue(items[1]);",
                    "Line": 310
                  },
                  {
                    "Statement": "paramDict.Add((T1)param1, (T2)param2);",
                    "Line": 311
                  }
                ]
              },
              {
                "Name": "ParseFloatValue",
                "Modifiers": [],
                "Line": 315,
                "Parameters": [
                  {
                    "Name": "val",
                    "Type": "string",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 317,
                    "Name": "val, System.Globalization.NumberStyles.Any, System.Globalization.CultureInfo.InvariantCulture",
                    "FullName": "float.Parse(string, System.Globalization.NumberStyles, System.IFormatProvider)",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            return float.Parse(val, System.Globalization.NumberStyles.Any, System.Globalization.CultureInfo.InvariantCulture);\r\n        }",
                    "Line": 316
                  },
                  {
                    "Statement": "return float.Parse(val, System.Globalization.NumberStyles.Any, System.Globalization.CultureInfo.InvariantCulture);",
                    "Line": 317
                  }
                ]
              }
            ],
            "Fields": []
          }
        ],
        "Usings": []
      }
    ],
    "Classes": [],
    "Usings": [
      {
        "Name": "System.Collections",
        "Line": 0
      },
      {
        "Name": "System",
        "Line": 1
      },
      {
        "Name": "System.Collections.Generic",
        "Line": 2
      },
      {
        "Name": "UnityEngine",
        "Line": 3
      },
      {
        "Name": "UnityEngine.Networking",
        "Line": 4
      },
      {
        "Name": "System.IO",
        "Line": 5
      },
      {
        "Name": "System.Linq",
        "Line": 6
      },
      {
        "Name": "System.Reflection",
        "Line": 7
      },
      {
        "Name": "Unity.IO",
        "Line": 8
      }
    ]
  },
  {
    "Name": "PlayerManagerScript",
    "Interfaces": [],
    "Namespaces": [
      {
        "Line": 9,
        "Name": "Character",
        "Interfaces": [],
        "Namespaces": [],
        "Classes": [
          {
            "Name": "PlayerManagerScript",
            "Modifier": "public",
            "Inheritance": "NetworkBehaviour",
            "Line": 11,
            "Interfaces": [],
            "Properties": [],
            "Methods": [
              {
                "Name": "Awake",
                "Modifiers": [],
                "Line": 102,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 104,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  },
                  {
                    "Line": 105,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  },
                  {
                    "Line": 106,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  },
                  {
                    "Line": 107,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  },
                  {
                    "Line": 108,
                    "Name": "\"NetworkManager\"",
                    "FullName": "UnityEngine.GameObject.FindGameObjectWithTag(string)",
                    "Parameters": []
                  },
                  {
                    "Line": 109,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  },
                  {
                    "Line": 110,
                    "Name": "",
                    "FullName": "UnityEngine.GameObject.GetComponent<Character.AnimatorManager>()",
                    "Parameters": []
                  },
                  {
                    "Line": 111,
                    "Name": "",
                    "FullName": "UnityEngine.GameObject.GetComponent<GameManager.NetManager>()",
                    "Parameters": []
                  },
                  {
                    "Line": 112,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  },
                  {
                    "Line": 113,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  },
                  {
                    "Line": 114,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  },
                  {
                    "Line": 115,
                    "Name": "",
                    "FullName": "UnityEngine.GameObject.GetComponent<Character.InGameUIManager>()",
                    "Parameters": []
                  },
                  {
                    "Line": 116,
                    "Name": "",
                    "FullName": "UnityEngine.GameObject.GetComponent<Character.ScoreTableManager>()",
                    "Parameters": []
                  },
                  {
                    "Line": 117,
                    "Name": "s => s.ToUpper()",
                    "FullName": "System.Collections.Generic.List<string>.ConvertAll<string>(System.Converter<string, string>)",
                    "Parameters": []
                  },
                  {
                    "Line": 117,
                    "Name": "",
                    "FullName": "string.ToUpper()",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            featureManager = GetComponent<FeatureManager>();\r\n            componentManager = GetComponent<ComponentManager>();\r\n            countDownManager = GetComponent<CountDownManager>();\r\n            tickManager = GetComponent<TickManager>();\r\n            networkManagerObj = GameObject.FindGameObjectWithTag(\"NetworkManager\");\r\n            weaponManager = GetComponent<WeaponManager>();\r\n            animatorManager = animatorManagerObj.GetComponent<AnimatorManager>();\r\n            netManager = networkManagerObj.GetComponent<NetManager>();\r\n            lifeManager = GetComponent<PlayerLifeManager>();\r\n            characterStatus = GetComponent<CharacterStatus>();\r\n            mp = GetComponent<MovePlayer>();\r\n            inGameUI = inGameUIObj.GetComponent<InGameUIManager>();\r\n            scoreTableManager = scoreTableObj.GetComponent<ScoreTableManager>();\r\n            collidersTags = collidersTags.ConvertAll(s => s.ToUpper());\r\n        }",
                    "Line": 103
                  },
                  {
                    "Statement": "featureManager = GetComponent<FeatureManager>();",
                    "Line": 104
                  },
                  {
                    "Statement": "componentManager = GetComponent<ComponentManager>();",
                    "Line": 105
                  },
                  {
                    "Statement": "countDownManager = GetComponent<CountDownManager>();",
                    "Line": 106
                  },
                  {
                    "Statement": "tickManager = GetComponent<TickManager>();",
                    "Line": 107
                  },
                  {
                    "Statement": "networkManagerObj = GameObject.FindGameObjectWithTag(\"NetworkManager\");",
                    "Line": 108
                  },
                  {
                    "Statement": "weaponManager = GetComponent<WeaponManager>();",
                    "Line": 109
                  },
                  {
                    "Statement": "animatorManager = animatorManagerObj.GetComponent<AnimatorManager>();",
                    "Line": 110
                  },
                  {
                    "Statement": "netManager = networkManagerObj.GetComponent<NetManager>();",
                    "Line": 111
                  },
                  {
                    "Statement": "lifeManager = GetComponent<PlayerLifeManager>();",
                    "Line": 112
                  },
                  {
                    "Statement": "characterStatus = GetComponent<CharacterStatus>();",
                    "Line": 113
                  },
                  {
                    "Statement": "mp = GetComponent<MovePlayer>();",
                    "Line": 114
                  },
                  {
                    "Statement": "inGameUI = inGameUIObj.GetComponent<InGameUIManager>();",
                    "Line": 115
                  },
                  {
                    "Statement": "scoreTableManager = scoreTableObj.GetComponent<ScoreTableManager>();",
                    "Line": 116
                  },
                  {
                    "Statement": "collidersTags = collidersTags.ConvertAll(s => s.ToUpper());",
                    "Line": 117
                  }
                ]
              },
              {
                "Name": "ActivateCam",
                "Modifiers": [],
                "Line": 120,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 122,
                    "Name": "true",
                    "FullName": "UnityEngine.GameObject.SetActive(bool)",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            if (isLocalPlayer) mainCam.gameObject.SetActive(true);\r\n        }",
                    "Line": 121
                  },
                  {
                    "Statement": "if (isLocalPlayer) mainCam.gameObject.SetActive(true);",
                    "Line": 122
                  },
                  {
                    "Statement": "mainCam.gameObject.SetActive(true);",
                    "Line": 122
                  }
                ]
              },
              {
                "Name": "Start",
                "Modifiers": [],
                "Line": 125,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 127,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  },
                  {
                    "Line": 128,
                    "Name": "",
                    "FullName": "Character.PlayerManagerScript.ActivateModel()",
                    "Parameters": []
                  },
                  {
                    "Line": 129,
                    "Name": "thisChar, \"WeaponContainer\"",
                    "FullName": "Character.PlayerManagerScript.SearchByTag(UnityEngine.GameObject, string)",
                    "Parameters": []
                  },
                  {
                    "Line": 131,
                    "Name": "",
                    "FullName": "Weapon.WeaponManager.Spawn()",
                    "Parameters": []
                  },
                  {
                    "Line": 132,
                    "Name": "",
                    "FullName": "Character.PlayerManagerScript.PlayerReset()",
                    "Parameters": []
                  },
                  {
                    "Line": 133,
                    "Name": "weaponManager.ActiveWeaponStatus.WeaponType",
                    "FullName": "Character.PlayerManagerScript.SetAnimator(string)",
                    "Parameters": []
                  },
                  {
                    "Line": 134,
                    "Name": "",
                    "FullName": "Character.PlayerManagerScript.ActivateCam()",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            if (isLocalPlayer) netManager.PManager = GetComponent<PlayerManagerScript>();\r\n            ActivateModel();\r\n            thisCharWeapon = SearchByTag(thisChar, \"WeaponContainer\");\r\n            weaponManager.WeaponContainer = thisCharWeapon;\r\n            weaponManager.Spawn();\r\n            PlayerReset();\r\n            SetAnimator(weaponManager.ActiveWeaponStatus.WeaponType);\r\n            ActivateCam();\r\n        }",
                    "Line": 126
                  },
                  {
                    "Statement": "if (isLocalPlayer) netManager.PManager = GetComponent<PlayerManagerScript>();",
                    "Line": 127
                  },
                  {
                    "Statement": "netManager.PManager = GetComponent<PlayerManagerScript>();",
                    "Line": 127
                  },
                  {
                    "Statement": "ActivateModel();",
                    "Line": 128
                  },
                  {
                    "Statement": "thisCharWeapon = SearchByTag(thisChar, \"WeaponContainer\");",
                    "Line": 129
                  },
                  {
                    "Statement": "weaponManager.WeaponContainer = thisCharWeapon;",
                    "Line": 130
                  },
                  {
                    "Statement": "weaponManager.Spawn();",
                    "Line": 131
                  },
                  {
                    "Statement": "PlayerReset();",
                    "Line": 132
                  },
                  {
                    "Statement": "SetAnimator(weaponManager.ActiveWeaponStatus.WeaponType);",
                    "Line": 133
                  },
                  {
                    "Statement": "ActivateCam();",
                    "Line": 134
                  }
                ]
              },
              {
                "Name": "CmdScore",
                "Modifiers": [],
                "Line": 137,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 140,
                    "Name": "\"SCORES\"",
                    "FullName": "UnityEngine.PlayerPrefs.GetString(string)",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            scores = PlayerPrefs.GetString(\"SCORES\");\r\n        }",
                    "Line": 139
                  },
                  {
                    "Statement": "scores = PlayerPrefs.GetString(\"SCORES\");",
                    "Line": 140
                  }
                ]
              },
              {
                "Name": "ActivateModel",
                "Modifiers": [],
                "Line": 143,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 145,
                    "Name": "true",
                    "FullName": "UnityEngine.GameObject.SetActive(bool)",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n           thisChar.SetActive(true);\r\n        }",
                    "Line": 144
                  },
                  {
                    "Statement": "thisChar.SetActive(true);",
                    "Line": 145
                  }
                ]
              },
              {
                "Name": "PlayerReset",
                "Modifiers": [],
                "Line": 148,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 150,
                    "Name": "",
                    "FullName": "Weapon.WeaponManager.ResetWeapons()",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            weaponManager.ResetWeapons();  \r\n        }",
                    "Line": 149
                  },
                  {
                    "Statement": "weaponManager.ResetWeapons();",
                    "Line": 150
                  }
                ]
              },
              {
                "Name": "StartDeathCooldown",
                "Modifiers": [],
                "Line": 153,
                "Parameters": [],
                "Invocations": [],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            isDeathCooldown = true;\r\n            startDeathCooldown = Time.time;\r\n        }",
                    "Line": 154
                  },
                  {
                    "Statement": "isDeathCooldown = true;",
                    "Line": 155
                  },
                  {
                    "Statement": "startDeathCooldown = Time.time;",
                    "Line": 156
                  }
                ]
              },
              {
                "Name": "FixedUpdate",
                "Modifiers": [],
                "Line": 159,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 161,
                    "Name": "",
                    "FullName": "Character.PlayerManagerScript.CmdScore()",
                    "Parameters": []
                  },
                  {
                    "Line": 167,
                    "Name": "",
                    "FullName": "Character.PlayerManagerScript.UpdateAnimator()",
                    "Parameters": []
                  },
                  {
                    "Line": 173,
                    "Name": "",
                    "FullName": "Character.PlayerManagerScript.SetDeathAnimator()",
                    "Parameters": []
                  },
                  {
                    "Line": 174,
                    "Name": "",
                    "FullName": "Character.PlayerManagerScript.StartDeathCooldown()",
                    "Parameters": []
                  },
                  {
                    "Line": 181,
                    "Name": "",
                    "FullName": "Character.ScoreTableManager.SaveState()",
                    "Parameters": []
                  },
                  {
                    "Line": 182,
                    "Name": "clientId",
                    "FullName": "GameManager.NetManager.SignalDeath(int)",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            if (isLocalPlayer) CmdScore();\r\n            if (thisChar != null)\r\n            {\r\n                if (thisChar.activeSelf && !lifeManager.IsDead)\r\n                {\r\n                    thisChar.transform.localPosition = new Vector3(0, yPos, 0);\r\n                    UpdateAnimator();\r\n                }\r\n            }\r\n\r\n            if (lifeManager.IsDead && !isDeathCooldown)\r\n            {\r\n                SetDeathAnimator();\r\n                StartDeathCooldown();\r\n            }\r\n\r\n            if (isLocalPlayer && lifeManager.IsDead && isDeathCooldown)\r\n            {\r\n                if (Time.time - startDeathCooldown >= deathCooldown && characterStatus.IsJumping)\r\n                {\r\n                    scoreTableManager.SaveState();\r\n                    netManager.SignalDeath(clientId);\r\n                    isDeathCooldown = false;\r\n                }\r\n            }\r\n\r\n            // for debugging purpose\r\n            //if (isLocalPlayer && characterStatus.IsChangingWeaponsPre) lifeManager.TakeDamage(10);\r\n            //if (isLocalPlayer && characterStatus.IsChangingWeaponsNext) componentManager.Print(); \r\n            //if (isLocalPlayer && characterStatus.ScoreTable) scoreTableObj.SetActive(true);\r\n            //else scoreTableObj.SetActive(false);\r\n\r\n        }",
                    "Line": 160
                  },
                  {
                    "Statement": "if (isLocalPlayer) CmdScore();",
                    "Line": 161
                  },
                  {
                    "Statement": "CmdScore();",
                    "Line": 161
                  },
                  {
                    "Statement": "if (thisChar != null)\r\n            {\r\n                if (thisChar.activeSelf && !lifeManager.IsDead)\r\n                {\r\n                    thisChar.transform.localPosition = new Vector3(0, yPos, 0);\r\n                    UpdateAnimator();\r\n                }\r\n            }",
                    "Line": 162
                  },
                  {
                    "Statement": "{\r\n                if (thisChar.activeSelf && !lifeManager.IsDead)\r\n                {\r\n                    thisChar.transform.localPosition = new Vector3(0, yPos, 0);\r\n                    UpdateAnimator();\r\n                }\r\n            }",
                    "Line": 163
                  },
                  {
                    "Statement": "if (thisChar.activeSelf && !lifeManager.IsDead)\r\n                {\r\n                    thisChar.transform.localPosition = new Vector3(0, yPos, 0);\r\n                    UpdateAnimator();\r\n                }",
                    "Line": 164
                  },
                  {
                    "Statement": "{\r\n                    thisChar.transform.localPosition = new Vector3(0, yPos, 0);\r\n                    UpdateAnimator();\r\n                }",
                    "Line": 165
                  },
                  {
                    "Statement": "thisChar.transform.localPosition = new Vector3(0, yPos, 0);",
                    "Line": 166
                  },
                  {
                    "Statement": "UpdateAnimator();",
                    "Line": 167
                  },
                  {
                    "Statement": "if (lifeManager.IsDead && !isDeathCooldown)\r\n            {\r\n                SetDeathAnimator();\r\n                StartDeathCooldown();\r\n            }",
                    "Line": 171
                  },
                  {
                    "Statement": "{\r\n                SetDeathAnimator();\r\n                StartDeathCooldown();\r\n            }",
                    "Line": 172
                  },
                  {
                    "Statement": "SetDeathAnimator();",
                    "Line": 173
                  },
                  {
                    "Statement": "StartDeathCooldown();",
                    "Line": 174
                  },
                  {
                    "Statement": "if (isLocalPlayer && lifeManager.IsDead && isDeathCooldown)\r\n            {\r\n                if (Time.time - startDeathCooldown >= deathCooldown && characterStatus.IsJumping)\r\n                {\r\n                    scoreTableManager.SaveState();\r\n                    netManager.SignalDeath(clientId);\r\n                    isDeathCooldown = false;\r\n                }\r\n            }",
                    "Line": 177
                  },
                  {
                    "Statement": "{\r\n                if (Time.time - startDeathCooldown >= deathCooldown && characterStatus.IsJumping)\r\n                {\r\n                    scoreTableManager.SaveState();\r\n                    netManager.SignalDeath(clientId);\r\n                    isDeathCooldown = false;\r\n                }\r\n            }",
                    "Line": 178
                  },
                  {
                    "Statement": "if (Time.time - startDeathCooldown >= deathCooldown && characterStatus.IsJumping)\r\n                {\r\n                    scoreTableManager.SaveState();\r\n                    netManager.SignalDeath(clientId);\r\n                    isDeathCooldown = false;\r\n                }",
                    "Line": 179
                  },
                  {
                    "Statement": "{\r\n                    scoreTableManager.SaveState();\r\n                    netManager.SignalDeath(clientId);\r\n                    isDeathCooldown = false;\r\n                }",
                    "Line": 180
                  },
                  {
                    "Statement": "scoreTableManager.SaveState();",
                    "Line": 181
                  },
                  {
                    "Statement": "netManager.SignalDeath(clientId);",
                    "Line": 182
                  },
                  {
                    "Statement": "isDeathCooldown = false;",
                    "Line": 183
                  }
                ]
              },
              {
                "Name": "TestFilter",
                "Modifiers": [],
                "Line": 195,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 197,
                    "Name": "",
                    "FullName": "Character.ComponentManager.FilterByType<Character.Powerup>()",
                    "Parameters": []
                  },
                  {
                    "Line": 198,
                    "Name": "s",
                    "FullName": "UnityEngine.Debug.Log(object)",
                    "Parameters": []
                  }
                ],
                "Variables": [
                  {
                    "Name": "p",
                    "Type": "Dictionary<string, Powerup>",
                    "Assignment": "componentManager.FilterByType<Powerup>()",
                    "Line": 197
                  }
                ],
                "Statements": [
                  {
                    "Statement": "{\r\n            Dictionary<string, Powerup> p = componentManager.FilterByType<Powerup>();\r\n            foreach (string s in p.Keys) Debug.Log(s);\r\n        }",
                    "Line": 196
                  },
                  {
                    "Statement": "Dictionary<string, Powerup> p = componentManager.FilterByType<Powerup>();",
                    "Line": 197
                  },
                  {
                    "Statement": "foreach (string s in p.Keys) Debug.Log(s);",
                    "Line": 198
                  },
                  {
                    "Statement": "Debug.Log(s);",
                    "Line": 198
                  }
                ]
              },
              {
                "Name": "OnTriggerEnter",
                "Modifiers": [],
                "Line": 201,
                "Parameters": [
                  {
                    "Name": "other",
                    "Type": "Collider",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 204,
                    "Name": "",
                    "FullName": "string.ToUpper()",
                    "Parameters": []
                  },
                  {
                    "Line": 205,
                    "Name": "tag",
                    "FullName": "Character.PlayerManagerScript.InTagList(string)",
                    "Parameters": []
                  },
                  {
                    "Line": 207,
                    "Name": "",
                    "FullName": "UnityEngine.GameObject.GetComponent<Character.PathManager>()",
                    "Parameters": []
                  },
                  {
                    "Line": 208,
                    "Name": "'.'",
                    "FullName": "string.Split(params char[])",
                    "Parameters": []
                  },
                  {
                    "Line": 209,
                    "Name": "n[0]",
                    "FullName": "System.IO.Path.GetFileName(string)",
                    "Parameters": []
                  },
                  {
                    "Line": 210,
                    "Name": "tag, name, path",
                    "FullName": "Character.ComponentManager.ComponentPickup(string, string, string)",
                    "Parameters": []
                  },
                  {
                    "Line": 211,
                    "Name": "other.gameObject",
                    "FullName": "Character.InGameUIManager.CollectibleFeedback(UnityEngine.GameObject)",
                    "Parameters": []
                  }
                ],
                "Variables": [
                  {
                    "Name": "tag",
                    "Type": "string",
                    "Assignment": "other.gameObject.tag.ToUpper()",
                    "Line": 204
                  },
                  {
                    "Name": "path",
                    "Type": "string",
                    "Assignment": "other.gameObject.GetComponent<PathManager>().Path",
                    "Line": 207
                  },
                  {
                    "Name": "n",
                    "Type": "string[]",
                    "Assignment": "path.Split('.')",
                    "Line": 208
                  },
                  {
                    "Name": "name",
                    "Type": "string",
                    "Assignment": "Path.GetFileName(n[0])",
                    "Line": 209
                  }
                ],
                "Statements": [
                  {
                    "Statement": "{\r\n            if (!isLocalPlayer) return;\r\n            string tag = other.gameObject.tag.ToUpper();\r\n            if (InTagList(tag))\r\n            {\r\n                string path = other.gameObject.GetComponent<PathManager>().Path;\r\n                string[] n = path.Split('.');\r\n                string name =  Path.GetFileName(n[0]);\r\n                componentManager.ComponentPickup(tag, name, path);\r\n                inGameUI.CollectibleFeedback(other.gameObject);\r\n            }  \r\n        }",
                    "Line": 202
                  },
                  {
                    "Statement": "if (!isLocalPlayer) return;",
                    "Line": 203
                  },
                  {
                    "Statement": "return;",
                    "Line": 203
                  },
                  {
                    "Statement": "string tag = other.gameObject.tag.ToUpper();",
                    "Line": 204
                  },
                  {
                    "Statement": "if (InTagList(tag))\r\n            {\r\n                string path = other.gameObject.GetComponent<PathManager>().Path;\r\n                string[] n = path.Split('.');\r\n                string name =  Path.GetFileName(n[0]);\r\n                componentManager.ComponentPickup(tag, name, path);\r\n                inGameUI.CollectibleFeedback(other.gameObject);\r\n            }",
                    "Line": 205
                  },
                  {
                    "Statement": "{\r\n                string path = other.gameObject.GetComponent<PathManager>().Path;\r\n                string[] n = path.Split('.');\r\n                string name =  Path.GetFileName(n[0]);\r\n                componentManager.ComponentPickup(tag, name, path);\r\n                inGameUI.CollectibleFeedback(other.gameObject);\r\n            }",
                    "Line": 206
                  },
                  {
                    "Statement": "string path = other.gameObject.GetComponent<PathManager>().Path;",
                    "Line": 207
                  },
                  {
                    "Statement": "string[] n = path.Split('.');",
                    "Line": 208
                  },
                  {
                    "Statement": "string name =  Path.GetFileName(n[0]);",
                    "Line": 209
                  },
                  {
                    "Statement": "componentManager.ComponentPickup(tag, name, path);",
                    "Line": 210
                  },
                  {
                    "Statement": "inGameUI.CollectibleFeedback(other.gameObject);",
                    "Line": 211
                  }
                ]
              },
              {
                "Name": "InTagList",
                "Modifiers": [],
                "Line": 215,
                "Parameters": [
                  {
                    "Name": "s",
                    "Type": "string",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 217,
                    "Name": "s",
                    "FullName": "System.Collections.Generic.List<string>.Contains(string)",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            return collidersTags.Contains(s);\r\n        }",
                    "Line": 216
                  },
                  {
                    "Statement": "return collidersTags.Contains(s);",
                    "Line": 217
                  }
                ]
              },
              {
                "Name": "SetPvP",
                "Modifiers": [],
                "Line": 220,
                "Parameters": [
                  {
                    "Name": "flag",
                    "Type": "bool",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 222,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            GetComponent<ShootingScript>().Pvp = flag;\r\n        }",
                    "Line": 221
                  },
                  {
                    "Statement": "GetComponent<ShootingScript>().Pvp = flag;",
                    "Line": 222
                  }
                ]
              },
              {
                "Name": "SearchByTag",
                "Modifiers": [],
                "Line": 225,
                "Parameters": [
                  {
                    "Name": "o",
                    "Type": "GameObject",
                    "Assignment": null
                  },
                  {
                    "Name": "tag",
                    "Type": "string",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 227,
                    "Name": "",
                    "FullName": "UnityEngine.GameObject.GetComponentsInChildren<UnityEngine.Transform>()",
                    "Parameters": []
                  },
                  {
                    "Line": 229,
                    "Name": "tag",
                    "FullName": "UnityEngine.Component.CompareTag(string)",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            foreach (Transform t in o.GetComponentsInChildren<Transform>())\r\n            {\r\n                if (t.CompareTag(tag)) return t.gameObject;\r\n            }\r\n            return null;\r\n        }",
                    "Line": 226
                  },
                  {
                    "Statement": "foreach (Transform t in o.GetComponentsInChildren<Transform>())\r\n            {\r\n                if (t.CompareTag(tag)) return t.gameObject;\r\n            }",
                    "Line": 227
                  },
                  {
                    "Statement": "{\r\n                if (t.CompareTag(tag)) return t.gameObject;\r\n            }",
                    "Line": 228
                  },
                  {
                    "Statement": "if (t.CompareTag(tag)) return t.gameObject;",
                    "Line": 229
                  },
                  {
                    "Statement": "return t.gameObject;",
                    "Line": 229
                  },
                  {
                    "Statement": "return null;",
                    "Line": 231
                  }
                ]
              },
              {
                "Name": "SetAnimator",
                "Modifiers": [],
                "Line": 234,
                "Parameters": [
                  {
                    "Name": "animatorId",
                    "Type": "string",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 236,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  },
                  {
                    "Line": 236,
                    "Name": "animatorId",
                    "FullName": "Character.AnimatorManager.GetCombatAnimator(string)",
                    "Parameters": []
                  },
                  {
                    "Line": 237,
                    "Name": "",
                    "FullName": "UnityEngine.GameObject.GetComponent<UnityEngine.Animator>()",
                    "Parameters": []
                  },
                  {
                    "Line": 237,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            GetComponent<Animator>().runtimeAnimatorController = animatorManager.GetCombatAnimator(animatorId);\r\n            thisChar.GetComponent<Animator>().runtimeAnimatorController = GetComponent<Animator>().runtimeAnimatorController;\r\n        }",
                    "Line": 235
                  },
                  {
                    "Statement": "GetComponent<Animator>().runtimeAnimatorController = animatorManager.GetCombatAnimator(animatorId);",
                    "Line": 236
                  },
                  {
                    "Statement": "thisChar.GetComponent<Animator>().runtimeAnimatorController = GetComponent<Animator>().runtimeAnimatorController;",
                    "Line": 237
                  }
                ]
              },
              {
                "Name": "SetDeathAnimator",
                "Modifiers": [],
                "Line": 240,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 243,
                    "Name": "40, 0, 0",
                    "FullName": "UnityEngine.Quaternion.Euler(float, float, float)",
                    "Parameters": []
                  },
                  {
                    "Line": 244,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  },
                  {
                    "Line": 244,
                    "Name": "",
                    "FullName": "Character.AnimatorManager.RandomDeathAnimator()",
                    "Parameters": []
                  },
                  {
                    "Line": 245,
                    "Name": "",
                    "FullName": "UnityEngine.GameObject.GetComponent<UnityEngine.Animator>()",
                    "Parameters": []
                  },
                  {
                    "Line": 245,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            mainCam.transform.localPosition = new Vector3(mainCam.transform.localPosition.x, mainCam.transform.localPosition.y, -1);\r\n            mainCam.transform.localRotation = Quaternion.Euler(40, 0, 0);\r\n            GetComponent<Animator>().runtimeAnimatorController = animatorManager.RandomDeathAnimator();\r\n            thisChar.GetComponent<Animator>().runtimeAnimatorController = GetComponent<Animator>().runtimeAnimatorController;\r\n        }",
                    "Line": 241
                  },
                  {
                    "Statement": "mainCam.transform.localPosition = new Vector3(mainCam.transform.localPosition.x, mainCam.transform.localPosition.y, -1);",
                    "Line": 242
                  },
                  {
                    "Statement": "mainCam.transform.localRotation = Quaternion.Euler(40, 0, 0);",
                    "Line": 243
                  },
                  {
                    "Statement": "GetComponent<Animator>().runtimeAnimatorController = animatorManager.RandomDeathAnimator();",
                    "Line": 244
                  },
                  {
                    "Statement": "thisChar.GetComponent<Animator>().runtimeAnimatorController = GetComponent<Animator>().runtimeAnimatorController;",
                    "Line": 245
                  }
                ]
              },
              {
                "Name": "UpdateAnimator",
                "Modifiers": [],
                "Line": 248,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 250,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  },
                  {
                    "Line": 250,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  },
                  {
                    "Line": 251,
                    "Name": "\"speed\", speed",
                    "FullName": "UnityEngine.Animator.SetFloat(string, float)",
                    "Parameters": []
                  },
                  {
                    "Line": 251,
                    "Name": "",
                    "FullName": "UnityEngine.GameObject.GetComponent<UnityEngine.Animator>()",
                    "Parameters": []
                  }
                ],
                "Variables": [
                  {
                    "Name": "speed",
                    "Type": "float",
                    "Assignment": "GetComponent<Animator>().GetFloat(\"speed\")",
                    "Line": 250
                  }
                ],
                "Statements": [
                  {
                    "Statement": "{\r\n            float speed = GetComponent<Animator>().GetFloat(\"speed\");\r\n            thisChar.GetComponent<Animator>().SetFloat(\"speed\", speed);\r\n        }",
                    "Line": 249
                  },
                  {
                    "Statement": "float speed = GetComponent<Animator>().GetFloat(\"speed\");",
                    "Line": 250
                  },
                  {
                    "Statement": "thisChar.GetComponent<Animator>().SetFloat(\"speed\", speed);",
                    "Line": 251
                  }
                ]
              },
              {
                "Name": "PreStartClient",
                "Modifiers": [],
                "Line": 254,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 256,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  },
                  {
                    "Line": 257,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            base.PreStartClient();\r\n            thisChar = Instantiate(characters[chosenPlayer], transform.localPosition, gameObject.transform.rotation, transform);\r\n        }",
                    "Line": 255
                  },
                  {
                    "Statement": "base.PreStartClient();",
                    "Line": 256
                  },
                  {
                    "Statement": "thisChar = Instantiate(characters[chosenPlayer], transform.localPosition, gameObject.transform.rotation, transform);",
                    "Line": 257
                  }
                ]
              },
              {
                "Name": "CmdDeathCooldown",
                "Modifiers": [],
                "Line": 265,
                "Parameters": [
                  {
                    "Name": "val",
                    "Type": "bool",
                    "Assignment": null
                  }
                ],
                "Invocations": [],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            isDeathCooldown = val;\r\n        }",
                    "Line": 267
                  },
                  {
                    "Statement": "isDeathCooldown = val;",
                    "Line": 268
                  }
                ]
              },
              {
                "Name": "FeatureValue",
                "Modifiers": [],
                "Line": 271,
                "Parameters": [
                  {
                    "Name": "f",
                    "Type": "string",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 273,
                    "Name": "f",
                    "FullName": "Character.FeatureManager.FeatureValue(string)",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            return PlayerFeatures.FeatureValue(f);\r\n        }",
                    "Line": 272
                  },
                  {
                    "Statement": "return PlayerFeatures.FeatureValue(f);",
                    "Line": 273
                  }
                ]
              },
              {
                "Name": "TickValue",
                "Modifiers": [],
                "Line": 276,
                "Parameters": [
                  {
                    "Name": "f",
                    "Type": "string",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 278,
                    "Name": "f",
                    "FullName": "Character.FeatureManager.TickValue(string)",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            return PlayerFeatures.TickValue(f);\r\n        }",
                    "Line": 277
                  },
                  {
                    "Statement": "return PlayerFeatures.TickValue(f);",
                    "Line": 278
                  }
                ]
              },
              {
                "Name": "GetAllTicks",
                "Modifiers": [],
                "Line": 281,
                "Parameters": [
                  {
                    "Name": "type",
                    "Type": "string",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 283,
                    "Name": "type",
                    "FullName": "Character.ComponentManager.GetAllTicks(string)",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            return ComponentManager.GetAllTicks(type);\r\n        }",
                    "Line": 282
                  },
                  {
                    "Statement": "return ComponentManager.GetAllTicks(type);",
                    "Line": 283
                  }
                ]
              }
            ],
            "Fields": []
          }
        ],
        "Usings": []
      }
    ],
    "Classes": [],
    "Usings": [
      {
        "Name": "System.Collections",
        "Line": 0
      },
      {
        "Name": "System.Collections.Generic",
        "Line": 1
      },
      {
        "Name": "UnityEngine",
        "Line": 2
      },
      {
        "Name": "UnityEngine.Networking",
        "Line": 3
      },
      {
        "Name": "Weapon",
        "Line": 4
      },
      {
        "Name": "GameManager",
        "Line": 5
      },
      {
        "Name": "System.IO",
        "Line": 6
      },
      {
        "Name": "Unity.IO",
        "Line": 7
      }
    ]
  },
  {
    "Name": "PlayerSpawnScript",
    "Interfaces": [],
    "Namespaces": [
      {
        "Line": 5,
        "Name": "GameManager",
        "Interfaces": [],
        "Namespaces": [],
        "Classes": [
          {
            "Name": "PlayerSpawnScript",
            "Modifier": "public",
            "Inheritance": "MonoBehaviour",
            "Line": 7,
            "Interfaces": [],
            "Properties": [],
            "Methods": [
              {
                "Name": "Awake",
                "Modifiers": [],
                "Line": 13,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 16,
                    "Name": "o.transform.position",
                    "FullName": "System.Collections.Generic.List<UnityEngine.Vector3>.Add(UnityEngine.Vector3)",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            spawnPositions = new List<Vector3>();\r\n            foreach (GameObject o in spawnPointsList) spawnPositions.Add(o.transform.position);\r\n        }",
                    "Line": 14
                  },
                  {
                    "Statement": "spawnPositions = new List<Vector3>();",
                    "Line": 15
                  },
                  {
                    "Statement": "foreach (GameObject o in spawnPointsList) spawnPositions.Add(o.transform.position);",
                    "Line": 16
                  },
                  {
                    "Statement": "spawnPositions.Add(o.transform.position);",
                    "Line": 16
                  }
                ]
              }
            ],
            "Fields": []
          }
        ],
        "Usings": []
      }
    ],
    "Classes": [],
    "Usings": [
      {
        "Name": "System.Collections",
        "Line": 0
      },
      {
        "Name": "System.Collections.Generic",
        "Line": 1
      },
      {
        "Name": "UnityEngine",
        "Line": 2
      }
    ]
  },
  {
    "Name": "Powerup",
    "Interfaces": [],
    "Namespaces": [
      {
        "Line": 4,
        "Name": "Character",
        "Interfaces": [],
        "Namespaces": [],
        "Classes": [
          {
            "Name": "Powerup",
            "Modifier": "public",
            "Inheritance": "UAComponent",
            "Line": 6,
            "Interfaces": [],
            "Properties": [],
            "Methods": [
              {
                "Name": "AddToTick",
                "Modifiers": [],
                "Line": 21,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 23,
                    "Name": "TICK",
                    "FullName": "Character.UAComponent.CheckFeature(string)",
                    "Parameters": []
                  },
                  {
                    "Line": 25,
                    "Name": "",
                    "FullName": "Character.Tick.DoTick()",
                    "Parameters": []
                  },
                  {
                    "Line": 26,
                    "Name": "t",
                    "FullName": "Character.TickManager.AddTick(Character.Tick)",
                    "Parameters": []
                  }
                ],
                "Variables": [
                  {
                    "Name": "t",
                    "Type": "Tick",
                    "Assignment": "new Tick(this, TICK, (int)m_features[TICK].CurrValue)",
                    "Line": 24
                  }
                ],
                "Statements": [
                  {
                    "Statement": "{\r\n            if (!CheckFeature(TICK)) return;\r\n            Tick t = new Tick(this, TICK, (int)m_features[TICK].CurrValue);\r\n            t.DoTick();\r\n            tm.AddTick(t);\r\n        }",
                    "Line": 22
                  },
                  {
                    "Statement": "if (!CheckFeature(TICK)) return;",
                    "Line": 23
                  },
                  {
                    "Statement": "return;",
                    "Line": 23
                  },
                  {
                    "Statement": "Tick t = new Tick(this, TICK, (int)m_features[TICK].CurrValue);",
                    "Line": 24
                  },
                  {
                    "Statement": "t.DoTick();",
                    "Line": 25
                  },
                  {
                    "Statement": "tm.AddTick(t);",
                    "Line": 26
                  }
                ]
              },
              {
                "Name": "AddToCountdown",
                "Modifiers": [],
                "Line": 29,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 31,
                    "Name": "TIME",
                    "FullName": "Character.UAComponent.CheckFeature(string)",
                    "Parameters": []
                  },
                  {
                    "Line": 32,
                    "Name": "new CountDown(this, TIME, valuePerSecond)",
                    "FullName": "Character.CountDownManager.AddCountDown(Character.CountDown)",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            if (!CheckFeature(TIME)) return;\r\n            cdmanager.AddCountDown(new CountDown(this, TIME, valuePerSecond));\r\n        }",
                    "Line": 30
                  },
                  {
                    "Statement": "if (!CheckFeature(TIME)) return;",
                    "Line": 31
                  },
                  {
                    "Statement": "return;",
                    "Line": 31
                  },
                  {
                    "Statement": "cdmanager.AddCountDown(new CountDown(this, TIME, valuePerSecond));",
                    "Line": 32
                  }
                ]
              }
            ],
            "Fields": []
          }
        ],
        "Usings": []
      }
    ],
    "Classes": [],
    "Usings": [
      {
        "Name": "System.Collections",
        "Line": 0
      },
      {
        "Name": "System.Collections.Generic",
        "Line": 1
      },
      {
        "Name": "UnityEngine",
        "Line": 2
      }
    ]
  },
  {
    "Name": "SceneChangeManager",
    "Interfaces": [],
    "Namespaces": [
      {
        "Line": 5,
        "Name": "GameManager",
        "Interfaces": [],
        "Namespaces": [],
        "Classes": [
          {
            "Name": "SceneChangeManager",
            "Modifier": "public",
            "Inheritance": "MonoBehaviour",
            "Line": 7,
            "Interfaces": [],
            "Properties": [],
            "Methods": [
              {
                "Name": "Awake",
                "Modifiers": [],
                "Line": 21,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 23,
                    "Name": "",
                    "FullName": "UnityEngine.Component.GetComponent<GameManager.NetManager>()",
                    "Parameters": []
                  },
                  {
                    "Line": 24,
                    "Name": "",
                    "FullName": "UnityEngine.Component.GetComponent<GameManager.LoadingScreenManager>()",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            netManager = GetComponent<NetManager>();\r\n            loadingScreenManager = GetComponent<LoadingScreenManager>();\r\n        }",
                    "Line": 22
                  },
                  {
                    "Statement": "netManager = GetComponent<NetManager>();",
                    "Line": 23
                  },
                  {
                    "Statement": "loadingScreenManager = GetComponent<LoadingScreenManager>();",
                    "Line": 24
                  }
                ]
              },
              {
                "Name": "OnEnable",
                "Modifiers": [],
                "Line": 27,
                "Parameters": [],
                "Invocations": [],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            SceneManager.sceneLoaded += OnSceneLoaded;\r\n        }",
                    "Line": 29
                  },
                  {
                    "Statement": "SceneManager.sceneLoaded += OnSceneLoaded;",
                    "Line": 30
                  }
                ]
              },
              {
                "Name": "LoadingScreen",
                "Modifiers": [],
                "Line": 33,
                "Parameters": [
                  {
                    "Name": "scene",
                    "Type": "string",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 36,
                    "Name": "\"UnlimitedArena_Loading\"",
                    "FullName": "UnityEngine.SceneManagement.SceneManager.LoadScene(string)",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            sceneToLoad = scene;\r\n            SceneManager.LoadScene(\"UnlimitedArena_Loading\");\r\n            loadingScreenManager.IsLoading = true;\r\n        }",
                    "Line": 34
                  },
                  {
                    "Statement": "sceneToLoad = scene;",
                    "Line": 35
                  },
                  {
                    "Statement": "SceneManager.LoadScene(\"UnlimitedArena_Loading\");",
                    "Line": 36
                  },
                  {
                    "Statement": "loadingScreenManager.IsLoading = true;",
                    "Line": 37
                  }
                ]
              },
              {
                "Name": "ChangeScene",
                "Modifiers": [],
                "Line": 40,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 42,
                    "Name": "sceneToLoad",
                    "FullName": "UnityEngine.SceneManagement.SceneManager.LoadSceneAsync(string)",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            loadingOperation = SceneManager.LoadSceneAsync(sceneToLoad);\r\n            loadProgress = loadingOperation.progress;\r\n            netManager.InGame = true;\r\n        }",
                    "Line": 41
                  },
                  {
                    "Statement": "loadingOperation = SceneManager.LoadSceneAsync(sceneToLoad);",
                    "Line": 42
                  },
                  {
                    "Statement": "loadProgress = loadingOperation.progress;",
                    "Line": 43
                  },
                  {
                    "Statement": "netManager.InGame = true;",
                    "Line": 44
                  }
                ]
              },
              {
                "Name": "OnSceneLoaded",
                "Modifiers": [],
                "Line": 47,
                "Parameters": [
                  {
                    "Name": "scene",
                    "Type": "Scene",
                    "Assignment": null
                  },
                  {
                    "Name": "mode",
                    "Type": "LoadSceneMode",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 50,
                    "Name": "",
                    "FullName": "GameManager.NetManager.SpawnPlayer()",
                    "Parameters": []
                  },
                  {
                    "Line": 51,
                    "Name": "",
                    "FullName": "GameManager.LoadingScreenManager.Loading()",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            if (netManager.InGame) netManager.SpawnPlayer();\r\n            else if (loadingScreenManager.IsLoading) loadingScreenManager.Loading();\r\n        }",
                    "Line": 49
                  },
                  {
                    "Statement": "if (netManager.InGame) netManager.SpawnPlayer();\r\n            else if (loadingScreenManager.IsLoading) loadingScreenManager.Loading();",
                    "Line": 50
                  },
                  {
                    "Statement": "netManager.SpawnPlayer();",
                    "Line": 50
                  },
                  {
                    "Statement": "if (loadingScreenManager.IsLoading) loadingScreenManager.Loading();",
                    "Line": 51
                  },
                  {
                    "Statement": "loadingScreenManager.Loading();",
                    "Line": 51
                  }
                ]
              }
            ],
            "Fields": []
          }
        ],
        "Usings": []
      }
    ],
    "Classes": [],
    "Usings": [
      {
        "Name": "System.Collections",
        "Line": 0
      },
      {
        "Name": "System.Collections.Generic",
        "Line": 1
      },
      {
        "Name": "UnityEngine",
        "Line": 2
      },
      {
        "Name": "UnityEngine.SceneManagement",
        "Line": 3
      }
    ]
  },
  {
    "Name": "SelectHero",
    "Interfaces": [],
    "Namespaces": [
      {
        "Line": 4,
        "Name": "GameManager",
        "Interfaces": [],
        "Namespaces": [],
        "Classes": [
          {
            "Name": "SelectHero",
            "Modifier": "public",
            "Inheritance": "MonoBehaviour",
            "Line": 6,
            "Interfaces": [],
            "Properties": [],
            "Methods": [
              {
                "Name": "Awake",
                "Modifiers": [],
                "Line": 14,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 16,
                    "Name": "",
                    "FullName": "UnityEngine.GameObject.GetComponent<GameManager.NetManager>()",
                    "Parameters": []
                  },
                  {
                    "Line": 16,
                    "Name": "\"NetworkManager\"",
                    "FullName": "UnityEngine.GameObject.FindGameObjectWithTag(string)",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            _netManager = GameObject.FindGameObjectWithTag(\"NetworkManager\").GetComponent<NetManager>();\r\n        }",
                    "Line": 15
                  },
                  {
                    "Statement": "_netManager = GameObject.FindGameObjectWithTag(\"NetworkManager\").GetComponent<NetManager>();",
                    "Line": 16
                  }
                ]
              },
              {
                "Name": "Start",
                "Modifiers": [],
                "Line": 19,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 22,
                    "Name": "true",
                    "FullName": "UnityEngine.GameObject.SetActive(bool)",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            currentChar = 0;\r\n            characthers[currentChar].SetActive(true);\r\n        }",
                    "Line": 20
                  },
                  {
                    "Statement": "currentChar = 0;",
                    "Line": 21
                  },
                  {
                    "Statement": "characthers[currentChar].SetActive(true);",
                    "Line": 22
                  }
                ]
              },
              {
                "Name": "right",
                "Modifiers": [],
                "Line": 25,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 27,
                    "Name": "false",
                    "FullName": "UnityEngine.GameObject.SetActive(bool)",
                    "Parameters": []
                  },
                  {
                    "Line": 30,
                    "Name": "true",
                    "FullName": "UnityEngine.GameObject.SetActive(bool)",
                    "Parameters": []
                  },
                  {
                    "Line": 31,
                    "Name": "new Vector3(0, 180, 0)",
                    "FullName": "UnityEngine.Quaternion.Euler(UnityEngine.Vector3)",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            characthers[currentChar].SetActive(false);\r\n            currentChar++;\r\n            if (currentChar >= characthers.Length) currentChar = 0;\r\n            characthers[currentChar].SetActive(true);\r\n            characthers[currentChar].transform.rotation = Quaternion.Euler(new Vector3(0, 180, 0));\r\n        }",
                    "Line": 26
                  },
                  {
                    "Statement": "characthers[currentChar].SetActive(false);",
                    "Line": 27
                  },
                  {
                    "Statement": "currentChar++;",
                    "Line": 28
                  },
                  {
                    "Statement": "if (currentChar >= characthers.Length) currentChar = 0;",
                    "Line": 29
                  },
                  {
                    "Statement": "currentChar = 0;",
                    "Line": 29
                  },
                  {
                    "Statement": "characthers[currentChar].SetActive(true);",
                    "Line": 30
                  },
                  {
                    "Statement": "characthers[currentChar].transform.rotation = Quaternion.Euler(new Vector3(0, 180, 0));",
                    "Line": 31
                  }
                ]
              },
              {
                "Name": "left",
                "Modifiers": [],
                "Line": 34,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 36,
                    "Name": "false",
                    "FullName": "UnityEngine.GameObject.SetActive(bool)",
                    "Parameters": []
                  },
                  {
                    "Line": 39,
                    "Name": "true",
                    "FullName": "UnityEngine.GameObject.SetActive(bool)",
                    "Parameters": []
                  },
                  {
                    "Line": 40,
                    "Name": "new Vector3(0, 180, 0)",
                    "FullName": "UnityEngine.Quaternion.Euler(UnityEngine.Vector3)",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            characthers[currentChar].SetActive(false);\r\n            currentChar--;\r\n            if (currentChar < 0) currentChar = characthers.Length - 1;\r\n            characthers[currentChar].SetActive(true);\r\n            characthers[currentChar].transform.rotation = Quaternion.Euler(new Vector3(0, 180, 0));\r\n        }",
                    "Line": 35
                  },
                  {
                    "Statement": "characthers[currentChar].SetActive(false);",
                    "Line": 36
                  },
                  {
                    "Statement": "currentChar--;",
                    "Line": 37
                  },
                  {
                    "Statement": "if (currentChar < 0) currentChar = characthers.Length - 1;",
                    "Line": 38
                  },
                  {
                    "Statement": "currentChar = characthers.Length - 1;",
                    "Line": 38
                  },
                  {
                    "Statement": "characthers[currentChar].SetActive(true);",
                    "Line": 39
                  },
                  {
                    "Statement": "characthers[currentChar].transform.rotation = Quaternion.Euler(new Vector3(0, 180, 0));",
                    "Line": 40
                  }
                ]
              },
              {
                "Name": "SelectCharHost",
                "Modifiers": [],
                "Line": 43,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 45,
                    "Name": "\"character\", currentChar",
                    "FullName": "UnityEngine.PlayerPrefs.SetInt(string, int)",
                    "Parameters": []
                  },
                  {
                    "Line": 46,
                    "Name": "",
                    "FullName": "GameManager.NetManager.StartAsHost()",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            PlayerPrefs.SetInt(\"character\", currentChar);\r\n            _netManager.StartAsHost();\r\n        }",
                    "Line": 44
                  },
                  {
                    "Statement": "PlayerPrefs.SetInt(\"character\", currentChar);",
                    "Line": 45
                  },
                  {
                    "Statement": "_netManager.StartAsHost();",
                    "Line": 46
                  }
                ]
              },
              {
                "Name": "SelectCharClient",
                "Modifiers": [],
                "Line": 49,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 51,
                    "Name": "\"character\", currentChar",
                    "FullName": "UnityEngine.PlayerPrefs.SetInt(string, int)",
                    "Parameters": []
                  },
                  {
                    "Line": 52,
                    "Name": "",
                    "FullName": "GameManager.NetManager.StartAsClient()",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            PlayerPrefs.SetInt(\"character\", currentChar);\r\n            _netManager.StartAsClient();\r\n        }",
                    "Line": 50
                  },
                  {
                    "Statement": "PlayerPrefs.SetInt(\"character\", currentChar);",
                    "Line": 51
                  },
                  {
                    "Statement": "_netManager.StartAsClient();",
                    "Line": 52
                  }
                ]
              },
              {
                "Name": "FixedUpdate",
                "Modifiers": [],
                "Line": 55,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 57,
                    "Name": "0, rotationSpeed, 0",
                    "FullName": "UnityEngine.Transform.Rotate(float, float, float)",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            characthers[currentChar].transform.Rotate(0, rotationSpeed, 0);\r\n        }",
                    "Line": 56
                  },
                  {
                    "Statement": "characthers[currentChar].transform.Rotate(0, rotationSpeed, 0);",
                    "Line": 57
                  }
                ]
              }
            ],
            "Fields": []
          }
        ],
        "Usings": []
      }
    ],
    "Classes": [],
    "Usings": [
      {
        "Name": "System.Collections",
        "Line": 0
      },
      {
        "Name": "System.Collections.Generic",
        "Line": 1
      },
      {
        "Name": "UnityEngine",
        "Line": 2
      }
    ]
  },
  {
    "Name": "ShootingScript",
    "Interfaces": [],
    "Namespaces": [
      {
        "Line": 9,
        "Name": "Character",
        "Interfaces": [],
        "Namespaces": [],
        "Classes": [
          {
            "Name": "ShootingScript",
            "Modifier": "public",
            "Inheritance": "NetworkBehaviour",
            "Line": 11,
            "Interfaces": [],
            "Properties": [],
            "Methods": [
              {
                "Name": "Awake",
                "Modifiers": [],
                "Line": 34,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 36,
                    "Name": "Application.streamingAssetsPath, damageWrapperDirectory",
                    "FullName": "System.IO.Path.Combine(string, string)",
                    "Parameters": []
                  },
                  {
                    "Line": 37,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  },
                  {
                    "Line": 38,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  },
                  {
                    "Line": 39,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  },
                  {
                    "Line": 40,
                    "Name": "",
                    "FullName": "Character.ShootingScript.LoadDamageWrapper()",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            damageWrapperDirectory = Path.Combine(Application.streamingAssetsPath, damageWrapperDirectory);\r\n            playerManager = GetComponent<PlayerManagerScript>();\r\n            status = GetComponent<CharacterStatus>();\r\n            weaponManager = GetComponent<WeaponManager>();\r\n            LoadDamageWrapper();\r\n        }",
                    "Line": 35
                  },
                  {
                    "Statement": "damageWrapperDirectory = Path.Combine(Application.streamingAssetsPath, damageWrapperDirectory);",
                    "Line": 36
                  },
                  {
                    "Statement": "playerManager = GetComponent<PlayerManagerScript>();",
                    "Line": 37
                  },
                  {
                    "Statement": "status = GetComponent<CharacterStatus>();",
                    "Line": 38
                  },
                  {
                    "Statement": "weaponManager = GetComponent<WeaponManager>();",
                    "Line": 39
                  },
                  {
                    "Statement": "LoadDamageWrapper();",
                    "Line": 40
                  }
                ]
              },
              {
                "Name": "FixedUpdate",
                "Modifiers": [],
                "Line": 44,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 47,
                    "Name": "",
                    "FullName": "Character.ShootingScript.DoShoot()",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            if (!isLocalPlayer) return;\r\n            if (status.IsFiring && canShoot && !status.IsPaused) DoShoot();\r\n        }",
                    "Line": 45
                  },
                  {
                    "Statement": "if (!isLocalPlayer) return;",
                    "Line": 46
                  },
                  {
                    "Statement": "return;",
                    "Line": 46
                  },
                  {
                    "Statement": "if (status.IsFiring && canShoot && !status.IsPaused) DoShoot();",
                    "Line": 47
                  },
                  {
                    "Statement": "DoShoot();",
                    "Line": 47
                  }
                ]
              },
              {
                "Name": "DoShoot",
                "Modifiers": [],
                "Line": 50,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 52,
                    "Name": "",
                    "FullName": "Character.ShootingScript.DamagePacket()",
                    "Parameters": []
                  },
                  {
                    "Line": 54,
                    "Name": "",
                    "FullName": "Weapon.WeaponManager.TriggerShoot()",
                    "Parameters": []
                  },
                  {
                    "Line": 55,
                    "Name": "_camera.transform.position, _camera.transform.forward, out RaycastHit hitInfo, range",
                    "FullName": "UnityEngine.Physics.Raycast(UnityEngine.Vector3, UnityEngine.Vector3, out UnityEngine.RaycastHit, float)",
                    "Parameters": []
                  },
                  {
                    "Line": 58,
                    "Name": "\"Player\"",
                    "FullName": "UnityEngine.GameObject.CompareTag(string)",
                    "Parameters": []
                  },
                  {
                    "Line": 61,
                    "Name": "",
                    "FullName": "Character.ShootingScript.DamagePacket()",
                    "Parameters": []
                  },
                  {
                    "Line": 62,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  },
                  {
                    "Line": 63,
                    "Name": "dmg",
                    "FullName": "UnityEngine.JsonUtility.ToJson(object)",
                    "Parameters": []
                  },
                  {
                    "Line": 64,
                    "Name": "jsonString",
                    "FullName": "UnityEngine.Debug.Log(object)",
                    "Parameters": []
                  },
                  {
                    "Line": 65,
                    "Name": "enemy, jsonString",
                    "FullName": "Character.ShootingScript.CmdShootEnemyPlayer(UnityEngine.GameObject, string)",
                    "Parameters": []
                  },
                  {
                    "Line": 68,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  },
                  {
                    "Line": 68,
                    "Name": "",
                    "FullName": "Character.ShootingScript.ShootCooldown()",
                    "Parameters": []
                  }
                ],
                "Variables": [
                  {
                    "Name": "enemy",
                    "Type": "GameObject",
                    "Assignment": "hitInfo.transform.gameObject",
                    "Line": 57
                  },
                  {
                    "Name": "dmg",
                    "Type": "DamageDone",
                    "Assignment": "new DamageDone(playerManager.PlayerName, playerManager.ClientId)",
                    "Line": 60
                  },
                  {
                    "Name": "jsonString",
                    "Type": "string",
                    "Assignment": "JsonUtility.ToJson(dmg)",
                    "Line": 63
                  }
                ],
                "Statements": [
                  {
                    "Statement": "{\r\n            DamagePacket();\r\n            canShoot = false;\r\n            weaponManager.TriggerShoot();\r\n            if (Physics.Raycast(_camera.transform.position, _camera.transform.forward, out RaycastHit hitInfo, range))\r\n            {\r\n                GameObject enemy = hitInfo.transform.gameObject;\r\n                if (enemy.CompareTag(\"Player\") && pvp)\r\n                {\r\n                    DamageDone dmg = new DamageDone(playerManager.PlayerName, playerManager.ClientId);\r\n                    dmg.DamageList = DamagePacket();\r\n                    dmg.effects = weaponManager.MyComponentManager.Components.Keys.ToList();\r\n                    string jsonString = JsonUtility.ToJson(dmg);\r\n                    Debug.Log(jsonString);\r\n                    CmdShootEnemyPlayer(enemy, jsonString);\r\n                }\r\n            }\r\n            StartCoroutine(ShootCooldown());\r\n        }",
                    "Line": 51
                  },
                  {
                    "Statement": "DamagePacket();",
                    "Line": 52
                  },
                  {
                    "Statement": "canShoot = false;",
                    "Line": 53
                  },
                  {
                    "Statement": "weaponManager.TriggerShoot();",
                    "Line": 54
                  },
                  {
                    "Statement": "if (Physics.Raycast(_camera.transform.position, _camera.transform.forward, out RaycastHit hitInfo, range))\r\n            {\r\n                GameObject enemy = hitInfo.transform.gameObject;\r\n                if (enemy.CompareTag(\"Player\") && pvp)\r\n                {\r\n                    DamageDone dmg = new DamageDone(playerManager.PlayerName, playerManager.ClientId);\r\n                    dmg.DamageList = DamagePacket();\r\n                    dmg.effects = weaponManager.MyComponentManager.Components.Keys.ToList();\r\n                    string jsonString = JsonUtility.ToJson(dmg);\r\n                    Debug.Log(jsonString);\r\n                    CmdShootEnemyPlayer(enemy, jsonString);\r\n                }\r\n            }",
                    "Line": 55
                  },
                  {
                    "Statement": "{\r\n                GameObject enemy = hitInfo.transform.gameObject;\r\n                if (enemy.CompareTag(\"Player\") && pvp)\r\n                {\r\n                    DamageDone dmg = new DamageDone(playerManager.PlayerName, playerManager.ClientId);\r\n                    dmg.DamageList = DamagePacket();\r\n                    dmg.effects = weaponManager.MyComponentManager.Components.Keys.ToList();\r\n                    string jsonString = JsonUtility.ToJson(dmg);\r\n                    Debug.Log(jsonString);\r\n                    CmdShootEnemyPlayer(enemy, jsonString);\r\n                }\r\n            }",
                    "Line": 56
                  },
                  {
                    "Statement": "GameObject enemy = hitInfo.transform.gameObject;",
                    "Line": 57
                  },
                  {
                    "Statement": "if (enemy.CompareTag(\"Player\") && pvp)\r\n                {\r\n                    DamageDone dmg = new DamageDone(playerManager.PlayerName, playerManager.ClientId);\r\n                    dmg.DamageList = DamagePacket();\r\n                    dmg.effects = weaponManager.MyComponentManager.Components.Keys.ToList();\r\n                    string jsonString = JsonUtility.ToJson(dmg);\r\n                    Debug.Log(jsonString);\r\n                    CmdShootEnemyPlayer(enemy, jsonString);\r\n                }",
                    "Line": 58
                  },
                  {
                    "Statement": "{\r\n                    DamageDone dmg = new DamageDone(playerManager.PlayerName, playerManager.ClientId);\r\n                    dmg.DamageList = DamagePacket();\r\n                    dmg.effects = weaponManager.MyComponentManager.Components.Keys.ToList();\r\n                    string jsonString = JsonUtility.ToJson(dmg);\r\n                    Debug.Log(jsonString);\r\n                    CmdShootEnemyPlayer(enemy, jsonString);\r\n                }",
                    "Line": 59
                  },
                  {
                    "Statement": "DamageDone dmg = new DamageDone(playerManager.PlayerName, playerManager.ClientId);",
                    "Line": 60
                  },
                  {
                    "Statement": "dmg.DamageList = DamagePacket();",
                    "Line": 61
                  },
                  {
                    "Statement": "dmg.effects = weaponManager.MyComponentManager.Components.Keys.ToList();",
                    "Line": 62
                  },
                  {
                    "Statement": "string jsonString = JsonUtility.ToJson(dmg);",
                    "Line": 63
                  },
                  {
                    "Statement": "Debug.Log(jsonString);",
                    "Line": 64
                  },
                  {
                    "Statement": "CmdShootEnemyPlayer(enemy, jsonString);",
                    "Line": 65
                  },
                  {
                    "Statement": "StartCoroutine(ShootCooldown());",
                    "Line": 68
                  }
                ]
              },
              {
                "Name": "LoadDamageWrapper",
                "Modifiers": [],
                "Line": 71,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 73,
                    "Name": "damageWrapperDirectory",
                    "FullName": "Character.ShootingScript.CheckDirectory(string)",
                    "Parameters": []
                  },
                  {
                    "Line": 75,
                    "Name": "DEFAULTDAMAGEDONE, DEFAULTDAMAGERESIST",
                    "FullName": "System.Collections.Generic.Dictionary<string, string>.Add(string, string)",
                    "Parameters": []
                  },
                  {
                    "Line": 78,
                    "Name": "damageWrapperDirectory, \"*.csv\"",
                    "FullName": "System.IO.Directory.GetFiles(string, string)",
                    "Parameters": []
                  },
                  {
                    "Line": 81,
                    "Name": "fileName",
                    "FullName": "Character.ShootingScript.LoadSingleFile(string)",
                    "Parameters": []
                  }
                ],
                "Variables": [
                  {
                    "Name": "fileEntries",
                    "Type": "string[]",
                    "Assignment": "Directory.GetFiles(damageWrapperDirectory, \"*.csv\")",
                    "Line": 78
                  }
                ],
                "Statements": [
                  {
                    "Statement": "{\r\n            if (!CheckDirectory(damageWrapperDirectory))\r\n            {\r\n                damageWrapper.Add(DEFAULTDAMAGEDONE, DEFAULTDAMAGERESIST);\r\n                return;\r\n            }\r\n            string[] fileEntries = Directory.GetFiles(damageWrapperDirectory, \"*.csv\");\r\n            foreach (string fileName in fileEntries)\r\n            {\r\n                LoadSingleFile(fileName);\r\n            }\r\n        }",
                    "Line": 72
                  },
                  {
                    "Statement": "if (!CheckDirectory(damageWrapperDirectory))\r\n            {\r\n                damageWrapper.Add(DEFAULTDAMAGEDONE, DEFAULTDAMAGERESIST);\r\n                return;\r\n            }",
                    "Line": 73
                  },
                  {
                    "Statement": "{\r\n                damageWrapper.Add(DEFAULTDAMAGEDONE, DEFAULTDAMAGERESIST);\r\n                return;\r\n            }",
                    "Line": 74
                  },
                  {
                    "Statement": "damageWrapper.Add(DEFAULTDAMAGEDONE, DEFAULTDAMAGERESIST);",
                    "Line": 75
                  },
                  {
                    "Statement": "return;",
                    "Line": 76
                  },
                  {
                    "Statement": "string[] fileEntries = Directory.GetFiles(damageWrapperDirectory, \"*.csv\");",
                    "Line": 78
                  },
                  {
                    "Statement": "foreach (string fileName in fileEntries)\r\n            {\r\n                LoadSingleFile(fileName);\r\n            }",
                    "Line": 79
                  },
                  {
                    "Statement": "{\r\n                LoadSingleFile(fileName);\r\n            }",
                    "Line": 80
                  },
                  {
                    "Statement": "LoadSingleFile(fileName);",
                    "Line": 81
                  }
                ]
              },
              {
                "Name": "LoadSingleFile",
                "Modifiers": [],
                "Line": 85,
                "Parameters": [
                  {
                    "Name": "fileName",
                    "Type": "string",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 87,
                    "Name": "fileName",
                    "FullName": "Character.ShootingScript.CheckFile(string)",
                    "Parameters": []
                  },
                  {
                    "Line": 89,
                    "Name": "DEFAULTDAMAGEDONE, DEFAULTDAMAGERESIST",
                    "FullName": "System.Collections.Generic.Dictionary<string, string>.Add(string, string)",
                    "Parameters": []
                  },
                  {
                    "Line": 92,
                    "Name": "fileName",
                    "FullName": "System.IO.File.ReadAllLines(string)",
                    "Parameters": []
                  },
                  {
                    "Line": 95,
                    "Name": "','",
                    "FullName": "string.Split(params char[])",
                    "Parameters": []
                  },
                  {
                    "Line": 96,
                    "Name": "",
                    "FullName": "string.Trim()",
                    "Parameters": []
                  },
                  {
                    "Line": 97,
                    "Name": "",
                    "FullName": "string.Trim()",
                    "Parameters": []
                  },
                  {
                    "Line": 98,
                    "Name": "damage, resist",
                    "FullName": "System.Collections.Generic.Dictionary<string, string>.Add(string, string)",
                    "Parameters": []
                  }
                ],
                "Variables": [
                  {
                    "Name": "lines",
                    "Type": "string[]",
                    "Assignment": "File.ReadAllLines(fileName)",
                    "Line": 92
                  },
                  {
                    "Name": "items",
                    "Type": "string[]",
                    "Assignment": "l.Split(',')",
                    "Line": 95
                  },
                  {
                    "Name": "damage",
                    "Type": "string",
                    "Assignment": "items[0].Trim()",
                    "Line": 96
                  },
                  {
                    "Name": "resist",
                    "Type": "string",
                    "Assignment": "items[1].Trim()",
                    "Line": 97
                  }
                ],
                "Statements": [
                  {
                    "Statement": "{\r\n            if (!CheckFile(fileName))\r\n            {\r\n                damageWrapper.Add(DEFAULTDAMAGEDONE, DEFAULTDAMAGERESIST);\r\n                return;\r\n            }\r\n            string[] lines = File.ReadAllLines(fileName);\r\n            foreach (string l in lines)\r\n            {\r\n                string[] items = l.Split(',');\r\n                string damage = items[0].Trim();\r\n                string resist = items[1].Trim();\r\n                damageWrapper.Add(damage, resist);\r\n            }\r\n        }",
                    "Line": 86
                  },
                  {
                    "Statement": "if (!CheckFile(fileName))\r\n            {\r\n                damageWrapper.Add(DEFAULTDAMAGEDONE, DEFAULTDAMAGERESIST);\r\n                return;\r\n            }",
                    "Line": 87
                  },
                  {
                    "Statement": "{\r\n                damageWrapper.Add(DEFAULTDAMAGEDONE, DEFAULTDAMAGERESIST);\r\n                return;\r\n            }",
                    "Line": 88
                  },
                  {
                    "Statement": "damageWrapper.Add(DEFAULTDAMAGEDONE, DEFAULTDAMAGERESIST);",
                    "Line": 89
                  },
                  {
                    "Statement": "return;",
                    "Line": 90
                  },
                  {
                    "Statement": "string[] lines = File.ReadAllLines(fileName);",
                    "Line": 92
                  },
                  {
                    "Statement": "foreach (string l in lines)\r\n            {\r\n                string[] items = l.Split(',');\r\n                string damage = items[0].Trim();\r\n                string resist = items[1].Trim();\r\n                damageWrapper.Add(damage, resist);\r\n            }",
                    "Line": 93
                  },
                  {
                    "Statement": "{\r\n                string[] items = l.Split(',');\r\n                string damage = items[0].Trim();\r\n                string resist = items[1].Trim();\r\n                damageWrapper.Add(damage, resist);\r\n            }",
                    "Line": 94
                  },
                  {
                    "Statement": "string[] items = l.Split(',');",
                    "Line": 95
                  },
                  {
                    "Statement": "string damage = items[0].Trim();",
                    "Line": 96
                  },
                  {
                    "Statement": "string resist = items[1].Trim();",
                    "Line": 97
                  },
                  {
                    "Statement": "damageWrapper.Add(damage, resist);",
                    "Line": 98
                  }
                ]
              },
              {
                "Name": "CheckDirectory",
                "Modifiers": [],
                "Line": 102,
                "Parameters": [
                  {
                    "Name": "path",
                    "Type": "string",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 104,
                    "Name": "path",
                    "FullName": "System.IO.Directory.Exists(string)",
                    "Parameters": []
                  },
                  {
                    "Line": 106,
                    "Name": "\"Directory Not Found\"",
                    "FullName": "UnityEngine.Debug.LogError(object)",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            if (!Directory.Exists(path))\r\n            {\r\n                Debug.LogError(\"Directory Not Found\");\r\n                return false;\r\n            }\r\n            return true;\r\n        }",
                    "Line": 103
                  },
                  {
                    "Statement": "if (!Directory.Exists(path))\r\n            {\r\n                Debug.LogError(\"Directory Not Found\");\r\n                return false;\r\n            }",
                    "Line": 104
                  },
                  {
                    "Statement": "{\r\n                Debug.LogError(\"Directory Not Found\");\r\n                return false;\r\n            }",
                    "Line": 105
                  },
                  {
                    "Statement": "Debug.LogError(\"Directory Not Found\");",
                    "Line": 106
                  },
                  {
                    "Statement": "return false;",
                    "Line": 107
                  },
                  {
                    "Statement": "return true;",
                    "Line": 109
                  }
                ]
              },
              {
                "Name": "CheckFile",
                "Modifiers": [],
                "Line": 112,
                "Parameters": [
                  {
                    "Name": "path",
                    "Type": "string",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 114,
                    "Name": "path",
                    "FullName": "System.IO.File.Exists(string)",
                    "Parameters": []
                  },
                  {
                    "Line": 116,
                    "Name": "\"File Not Found\"",
                    "FullName": "UnityEngine.Debug.LogError(object)",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            if (!File.Exists(path))\r\n            {\r\n                Debug.LogError(\"File Not Found\");\r\n                return false;\r\n            }\r\n            return true;\r\n        }",
                    "Line": 113
                  },
                  {
                    "Statement": "if (!File.Exists(path))\r\n            {\r\n                Debug.LogError(\"File Not Found\");\r\n                return false;\r\n            }",
                    "Line": 114
                  },
                  {
                    "Statement": "{\r\n                Debug.LogError(\"File Not Found\");\r\n                return false;\r\n            }",
                    "Line": 115
                  },
                  {
                    "Statement": "Debug.LogError(\"File Not Found\");",
                    "Line": 116
                  },
                  {
                    "Statement": "return false;",
                    "Line": 117
                  },
                  {
                    "Statement": "return true;",
                    "Line": 119
                  }
                ]
              },
              {
                "Name": "DamagePacket",
                "Modifiers": [],
                "Line": 122,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 128,
                    "Name": "kvf.Key",
                    "FullName": "System.Collections.Generic.Dictionary<string, string>.ContainsKey(string)",
                    "Parameters": []
                  },
                  {
                    "Line": 128,
                    "Name": "damageWrapper[kvf.Key], kvf.Value.CurrValue",
                    "FullName": "System.Collections.Generic.Dictionary<string, float>.Add(string, float)",
                    "Parameters": []
                  }
                ],
                "Variables": [
                  {
                    "Name": "damagePacket",
                    "Type": "Dictionary<string, float>",
                    "Assignment": "new Dictionary<string, float>()",
                    "Line": 124
                  },
                  {
                    "Name": "fm",
                    "Type": "FeatureManager",
                    "Assignment": "weaponManager.MyFeatureManager",
                    "Line": 125
                  }
                ],
                "Statements": [
                  {
                    "Statement": "{\r\n            Dictionary<string, float> damagePacket = new Dictionary<string, float>();\r\n            FeatureManager fm = weaponManager.MyFeatureManager;\r\n            foreach(KeyValuePair<string, Feature> kvf in fm.Features)\r\n            {\r\n                if(damageWrapper.ContainsKey(kvf.Key)) damagePacket.Add(damageWrapper[kvf.Key], kvf.Value.CurrValue);\r\n            }\r\n            return damagePacket;\r\n        }",
                    "Line": 123
                  },
                  {
                    "Statement": "Dictionary<string, float> damagePacket = new Dictionary<string, float>();",
                    "Line": 124
                  },
                  {
                    "Statement": "FeatureManager fm = weaponManager.MyFeatureManager;",
                    "Line": 125
                  },
                  {
                    "Statement": "foreach(KeyValuePair<string, Feature> kvf in fm.Features)\r\n            {\r\n                if(damageWrapper.ContainsKey(kvf.Key)) damagePacket.Add(damageWrapper[kvf.Key], kvf.Value.CurrValue);\r\n            }",
                    "Line": 126
                  },
                  {
                    "Statement": "{\r\n                if(damageWrapper.ContainsKey(kvf.Key)) damagePacket.Add(damageWrapper[kvf.Key], kvf.Value.CurrValue);\r\n            }",
                    "Line": 127
                  },
                  {
                    "Statement": "if(damageWrapper.ContainsKey(kvf.Key)) damagePacket.Add(damageWrapper[kvf.Key], kvf.Value.CurrValue);",
                    "Line": 128
                  },
                  {
                    "Statement": "damagePacket.Add(damageWrapper[kvf.Key], kvf.Value.CurrValue);",
                    "Line": 128
                  },
                  {
                    "Statement": "return damagePacket;",
                    "Line": 130
                  }
                ]
              },
              {
                "Name": "CmdShootEnemyPlayer",
                "Modifiers": [],
                "Line": 133,
                "Parameters": [
                  {
                    "Name": "enemy",
                    "Type": "GameObject",
                    "Assignment": null
                  },
                  {
                    "Name": "dmg",
                    "Type": "string",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 136,
                    "Name": "dmg",
                    "FullName": "Character.PlayerLifeManager.ForeignDamage(string)",
                    "Parameters": []
                  },
                  {
                    "Line": 136,
                    "Name": "",
                    "FullName": "UnityEngine.GameObject.GetComponent<Character.PlayerLifeManager>()",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            enemy.GetComponent<PlayerLifeManager>().ForeignDamage(dmg);\r\n        }",
                    "Line": 135
                  },
                  {
                    "Statement": "enemy.GetComponent<PlayerLifeManager>().ForeignDamage(dmg);",
                    "Line": 136
                  }
                ]
              },
              {
                "Name": "ShootCooldown",
                "Modifiers": [],
                "Line": 139,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 141,
                    "Name": "",
                    "FullName": "Weapon.WeaponManager.GetActiveWeaponShootDelay()",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            yield return new WaitForSeconds(weaponManager.GetActiveWeaponShootDelay());\r\n            canShoot = true;\r\n        }",
                    "Line": 140
                  },
                  {
                    "Statement": "yield return new WaitForSeconds(weaponManager.GetActiveWeaponShootDelay());",
                    "Line": 141
                  },
                  {
                    "Statement": "canShoot = true;",
                    "Line": 142
                  }
                ]
              },
              {
                "Name": "CalcDamage",
                "Modifiers": [],
                "Line": 145,
                "Parameters": [
                  {
                    "Name": "baseDmg",
                    "Type": "float",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 147,
                    "Name": "playerManager.PlayerFeatures.FeatureValue(DAMAGEDONE) * baseDmg",
                    "FullName": "UnityEngine.Mathf.CeilToInt(float)",
                    "Parameters": []
                  },
                  {
                    "Line": 147,
                    "Name": "DAMAGEDONE",
                    "FullName": "Character.FeatureManager.FeatureValue(string)",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            return Mathf.CeilToInt(playerManager.PlayerFeatures.FeatureValue(DAMAGEDONE) * baseDmg);\r\n        }",
                    "Line": 146
                  },
                  {
                    "Statement": "return Mathf.CeilToInt(playerManager.PlayerFeatures.FeatureValue(DAMAGEDONE) * baseDmg);",
                    "Line": 147
                  }
                ]
              },
              {
                "Name": "DeserializeDmg",
                "Modifiers": [],
                "Line": 179,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 184,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  },
                  {
                    "Line": 184,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  },
                  {
                    "Line": 184,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  }
                ],
                "Variables": [
                  {
                    "Name": "i",
                    "Type": "int",
                    "Assignment": "0",
                    "Line": 182
                  }
                ],
                "Statements": [
                  {
                    "Statement": "{\r\n                damageDone = new Dictionary<string, float>();\r\n                for(int i = 0; i < damageType.Count; i++)\r\n                {\r\n                    damageDone.Add(damageType.ElementAt(i), damageValue.ElementAt(i));\r\n                }\r\n            }",
                    "Line": 180
                  },
                  {
                    "Statement": "damageDone = new Dictionary<string, float>();",
                    "Line": 181
                  },
                  {
                    "Statement": "for(int i = 0; i < damageType.Count; i++)\r\n                {\r\n                    damageDone.Add(damageType.ElementAt(i), damageValue.ElementAt(i));\r\n                }",
                    "Line": 182
                  },
                  {
                    "Statement": "{\r\n                    damageDone.Add(damageType.ElementAt(i), damageValue.ElementAt(i));\r\n                }",
                    "Line": 183
                  },
                  {
                    "Statement": "damageDone.Add(damageType.ElementAt(i), damageValue.ElementAt(i));",
                    "Line": 184
                  }
                ]
              },
              {
                "Name": "SerializeDmg",
                "Modifiers": [],
                "Line": 188,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 192,
                    "Name": "k.Key",
                    "FullName": "System.Collections.Generic.List<string>.Add(string)",
                    "Parameters": []
                  },
                  {
                    "Line": 193,
                    "Name": "k.Value",
                    "FullName": "System.Collections.Generic.List<float>.Add(float)",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n                foreach(KeyValuePair<string, float> k in damageDone)\r\n                {\r\n                    damageType.Add(k.Key);\r\n                    damageValue.Add(k.Value);\r\n                }\r\n            }",
                    "Line": 189
                  },
                  {
                    "Statement": "foreach(KeyValuePair<string, float> k in damageDone)\r\n                {\r\n                    damageType.Add(k.Key);\r\n                    damageValue.Add(k.Value);\r\n                }",
                    "Line": 190
                  },
                  {
                    "Statement": "{\r\n                    damageType.Add(k.Key);\r\n                    damageValue.Add(k.Value);\r\n                }",
                    "Line": 191
                  },
                  {
                    "Statement": "damageType.Add(k.Key);",
                    "Line": 192
                  },
                  {
                    "Statement": "damageValue.Add(k.Value);",
                    "Line": 193
                  }
                ]
              }
            ],
            "Fields": []
          }
        ],
        "Usings": []
      }
    ],
    "Classes": [],
    "Usings": [
      {
        "Name": "System.Collections",
        "Line": 0
      },
      {
        "Name": "System.Collections.Generic",
        "Line": 1
      },
      {
        "Name": "UnityEngine",
        "Line": 2
      },
      {
        "Name": "Weapon",
        "Line": 3
      },
      {
        "Name": "UnityEngine.Networking",
        "Line": 4
      },
      {
        "Name": "System",
        "Line": 5
      },
      {
        "Name": "System.IO",
        "Line": 6
      },
      {
        "Name": "System.Linq",
        "Line": 7
      }
    ]
  },
  {
    "Name": "SoundConfiguration",
    "Interfaces": [],
    "Namespaces": [],
    "Classes": [
      {
        "Name": "SoundConfiguration",
        "Modifier": "public",
        "Inheritance": "MonoBehaviour",
        "Line": 5,
        "Interfaces": [],
        "Properties": [],
        "Methods": [
          {
            "Name": "Start",
            "Modifiers": [],
            "Line": 12,
            "Parameters": [],
            "Invocations": [
              {
                "Line": 14,
                "Name": "",
                "FullName": "SoundConfiguration.LoadVolume()",
                "Parameters": []
              }
            ],
            "Variables": [],
            "Statements": [
              {
                "Statement": "{\r\n        LoadVolume();\r\n    }",
                "Line": 13
              },
              {
                "Statement": "LoadVolume();",
                "Line": 14
              }
            ]
          },
          {
            "Name": "VolumeValue",
            "Modifiers": [],
            "Line": 17,
            "Parameters": [
              {
                "Name": "volume",
                "Type": "float",
                "Assignment": null
              }
            ],
            "Invocations": [
              {
                "Line": 19,
                "Name": "",
                "FullName": "float.ToString()",
                "Parameters": []
              }
            ],
            "Variables": [],
            "Statements": [
              {
                "Statement": "{\r\n        musicText.text = (volume*100).ToString();\r\n    }",
                "Line": 18
              },
              {
                "Statement": "musicText.text = (volume*100).ToString();",
                "Line": 19
              }
            ]
          },
          {
            "Name": "SaveVolume",
            "Modifiers": [],
            "Line": 22,
            "Parameters": [],
            "Invocations": [
              {
                "Line": 25,
                "Name": "\"masterVolume\", volume",
                "FullName": "UnityEngine.PlayerPrefs.SetFloat(string, float)",
                "Parameters": []
              }
            ],
            "Variables": [
              {
                "Name": "volume",
                "Type": "float",
                "Assignment": "masterSlider.value",
                "Line": 24
              }
            ],
            "Statements": [
              {
                "Statement": "{\r\n        float volume = masterSlider.value;\r\n        PlayerPrefs.SetFloat(\"masterVolume\", volume);\r\n        AudioListener.volume = volume;\r\n        //Debug.Log(volume);\r\n        //VolumeValue(volume);\r\n    }",
                "Line": 23
              },
              {
                "Statement": "float volume = masterSlider.value;",
                "Line": 24
              },
              {
                "Statement": "PlayerPrefs.SetFloat(\"masterVolume\", volume);",
                "Line": 25
              },
              {
                "Statement": "AudioListener.volume = volume;",
                "Line": 26
              }
            ]
          },
          {
            "Name": "UpdateGUI",
            "Modifiers": [],
            "Line": 31,
            "Parameters": [],
            "Invocations": [
              {
                "Line": 34,
                "Name": "volume",
                "FullName": "SoundConfiguration.VolumeValue(float)",
                "Parameters": []
              }
            ],
            "Variables": [
              {
                "Name": "volume",
                "Type": "float",
                "Assignment": "masterSlider.value",
                "Line": 33
              }
            ],
            "Statements": [
              {
                "Statement": "{\r\n        float volume = masterSlider.value;\r\n        VolumeValue(volume);\r\n    }",
                "Line": 32
              },
              {
                "Statement": "float volume = masterSlider.value;",
                "Line": 33
              },
              {
                "Statement": "VolumeValue(volume);",
                "Line": 34
              }
            ]
          },
          {
            "Name": "LoadVolume",
            "Modifiers": [],
            "Line": 37,
            "Parameters": [],
            "Invocations": [
              {
                "Line": 39,
                "Name": "\"masterVolume\"",
                "FullName": "UnityEngine.PlayerPrefs.GetFloat(string)",
                "Parameters": []
              },
              {
                "Line": 41,
                "Name": "volume",
                "FullName": "SoundConfiguration.VolumeValue(float)",
                "Parameters": []
              }
            ],
            "Variables": [
              {
                "Name": "volume",
                "Type": "float",
                "Assignment": "PlayerPrefs.GetFloat(\"masterVolume\")",
                "Line": 39
              }
            ],
            "Statements": [
              {
                "Statement": "{\r\n        float volume = PlayerPrefs.GetFloat(\"masterVolume\");\r\n        masterSlider.value = volume;\r\n        VolumeValue(volume);\r\n        AudioListener.volume = volume;\r\n    }",
                "Line": 38
              },
              {
                "Statement": "float volume = PlayerPrefs.GetFloat(\"masterVolume\");",
                "Line": 39
              },
              {
                "Statement": "masterSlider.value = volume;",
                "Line": 40
              },
              {
                "Statement": "VolumeValue(volume);",
                "Line": 41
              },
              {
                "Statement": "AudioListener.volume = volume;",
                "Line": 42
              }
            ]
          }
        ],
        "Fields": []
      }
    ],
    "Usings": [
      {
        "Name": "System.Collections",
        "Line": 0
      },
      {
        "Name": "System.Collections.Generic",
        "Line": 1
      },
      {
        "Name": "UnityEngine",
        "Line": 2
      },
      {
        "Name": "UnityEngine.UI",
        "Line": 3
      }
    ]
  },
  {
    "Name": "Tick",
    "Interfaces": [],
    "Namespaces": [
      {
        "Line": 4,
        "Name": "Character",
        "Interfaces": [],
        "Namespaces": [],
        "Classes": [
          {
            "Name": "Tick",
            "Modifier": "public",
            "Inheritance": "OverTime",
            "Line": 6,
            "Interfaces": [],
            "Properties": [],
            "Methods": [
              {
                "Name": "Activate",
                "Modifiers": [],
                "Line": 29,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 36,
                    "Name": "",
                    "FullName": "Character.UAComponent.TickFeature()",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            if (valuePerSecond >= 0)\r\n            {\r\n                valuePerSecond -= tickPerSecond;\r\n                if (valuePerSecond < 0) active = false;\r\n            }\r\n            if (active) c.TickFeature();\r\n        }",
                    "Line": 30
                  },
                  {
                    "Statement": "if (valuePerSecond >= 0)\r\n            {\r\n                valuePerSecond -= tickPerSecond;\r\n                if (valuePerSecond < 0) active = false;\r\n            }",
                    "Line": 31
                  },
                  {
                    "Statement": "{\r\n                valuePerSecond -= tickPerSecond;\r\n                if (valuePerSecond < 0) active = false;\r\n            }",
                    "Line": 32
                  },
                  {
                    "Statement": "valuePerSecond -= tickPerSecond;",
                    "Line": 33
                  },
                  {
                    "Statement": "if (valuePerSecond < 0) active = false;",
                    "Line": 34
                  },
                  {
                    "Statement": "active = false;",
                    "Line": 34
                  },
                  {
                    "Statement": "if (active) c.TickFeature();",
                    "Line": 36
                  },
                  {
                    "Statement": "c.TickFeature();",
                    "Line": 36
                  }
                ]
              },
              {
                "Name": "DoTick",
                "Modifiers": [],
                "Line": 39,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 41,
                    "Name": "",
                    "FullName": "Character.Tick.Activate()",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            Activate();\r\n        }",
                    "Line": 40
                  },
                  {
                    "Statement": "Activate();",
                    "Line": 41
                  }
                ]
              }
            ],
            "Fields": []
          }
        ],
        "Usings": []
      }
    ],
    "Classes": [],
    "Usings": [
      {
        "Name": "System.Collections",
        "Line": 0
      },
      {
        "Name": "System.Collections.Generic",
        "Line": 1
      },
      {
        "Name": "UnityEngine",
        "Line": 2
      }
    ]
  },
  {
    "Name": "TickManager",
    "Interfaces": [],
    "Namespaces": [
      {
        "Line": 4,
        "Name": "Character",
        "Interfaces": [],
        "Namespaces": [],
        "Classes": [
          {
            "Name": "TickManager",
            "Modifier": "public",
            "Inheritance": "MonoBehaviour",
            "Line": 6,
            "Interfaces": [],
            "Properties": [],
            "Methods": [
              {
                "Name": "Awake",
                "Modifiers": [],
                "Line": 13,
                "Parameters": [],
                "Invocations": [],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            //timer = timeIntervalInSecond;\r\n        }",
                    "Line": 14
                  }
                ]
              },
              {
                "Name": "AddTick",
                "Modifiers": [],
                "Line": 18,
                "Parameters": [
                  {
                    "Name": "t",
                    "Type": "Tick",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 21,
                    "Name": "t",
                    "FullName": "System.Collections.Generic.List<Character.Tick>.Add(Character.Tick)",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            t.Timer = timer;\r\n            ticks.Add(t);\r\n        }",
                    "Line": 19
                  },
                  {
                    "Statement": "t.Timer = timer;",
                    "Line": 20
                  },
                  {
                    "Statement": "ticks.Add(t);",
                    "Line": 21
                  }
                ]
              },
              {
                "Name": "CheckIsActive",
                "Modifiers": [],
                "Line": 24,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 26,
                    "Name": "item => item.MyComponent.CheckIsActive() == false",
                    "FullName": "System.Collections.Generic.List<Character.Tick>.RemoveAll(System.Predicate<Character.Tick>)",
                    "Parameters": []
                  },
                  {
                    "Line": 26,
                    "Name": "",
                    "FullName": "Character.UAComponent.CheckIsActive()",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            ticks.RemoveAll(item => item.MyComponent.CheckIsActive() == false);\r\n        }",
                    "Line": 25
                  },
                  {
                    "Statement": "ticks.RemoveAll(item => item.MyComponent.CheckIsActive() == false);",
                    "Line": 26
                  }
                ]
              },
              {
                "Name": "CheckTimer",
                "Modifiers": [],
                "Line": 29,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 36,
                    "Name": "",
                    "FullName": "Character.Tick.DoTick()",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            foreach(Tick t in ticks)\r\n            {\r\n                t.Timer -= Time.deltaTime;\r\n                if (t.Timer <= 0)\r\n                {\r\n                    t.DoTick();\r\n                    t.Timer = timeIntervalInSecond;\r\n                }\r\n            }\r\n        }",
                    "Line": 30
                  },
                  {
                    "Statement": "foreach(Tick t in ticks)\r\n            {\r\n                t.Timer -= Time.deltaTime;\r\n                if (t.Timer <= 0)\r\n                {\r\n                    t.DoTick();\r\n                    t.Timer = timeIntervalInSecond;\r\n                }\r\n            }",
                    "Line": 31
                  },
                  {
                    "Statement": "{\r\n                t.Timer -= Time.deltaTime;\r\n                if (t.Timer <= 0)\r\n                {\r\n                    t.DoTick();\r\n                    t.Timer = timeIntervalInSecond;\r\n                }\r\n            }",
                    "Line": 32
                  },
                  {
                    "Statement": "t.Timer -= Time.deltaTime;",
                    "Line": 33
                  },
                  {
                    "Statement": "if (t.Timer <= 0)\r\n                {\r\n                    t.DoTick();\r\n                    t.Timer = timeIntervalInSecond;\r\n                }",
                    "Line": 34
                  },
                  {
                    "Statement": "{\r\n                    t.DoTick();\r\n                    t.Timer = timeIntervalInSecond;\r\n                }",
                    "Line": 35
                  },
                  {
                    "Statement": "t.DoTick();",
                    "Line": 36
                  },
                  {
                    "Statement": "t.Timer = timeIntervalInSecond;",
                    "Line": 37
                  }
                ]
              },
              {
                "Name": "FixedUpdate",
                "Modifiers": [],
                "Line": 42,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 44,
                    "Name": "",
                    "FullName": "Character.TickManager.CheckTimer()",
                    "Parameters": []
                  },
                  {
                    "Line": 45,
                    "Name": "",
                    "FullName": "Character.TickManager.CheckIsActive()",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            CheckTimer();\r\n            CheckIsActive();\r\n        }",
                    "Line": 43
                  },
                  {
                    "Statement": "CheckTimer();",
                    "Line": 44
                  },
                  {
                    "Statement": "CheckIsActive();",
                    "Line": 45
                  }
                ]
              }
            ],
            "Fields": []
          }
        ],
        "Usings": []
      }
    ],
    "Classes": [],
    "Usings": [
      {
        "Name": "System.Collections",
        "Line": 0
      },
      {
        "Name": "System.Collections.Generic",
        "Line": 1
      },
      {
        "Name": "UnityEngine",
        "Line": 2
      }
    ]
  },
  {
    "Name": "UAComponent",
    "Interfaces": [],
    "Namespaces": [
      {
        "Line": 7,
        "Name": "Character",
        "Interfaces": [],
        "Namespaces": [],
        "Classes": [
          {
            "Name": "UAComponent",
            "Modifier": "public",
            "Inheritance": "ObjectWithFeatures",
            "Line": 9,
            "Interfaces": [],
            "Properties": [],
            "Methods": [
              {
                "Name": "ReduceComponent",
                "Modifiers": [],
                "Line": 26,
                "Parameters": [
                  {
                    "Name": "type",
                    "Type": "string",
                    "Assignment": null
                  },
                  {
                    "Name": "n",
                    "Type": "float",
                    "Assignment": null
                  }
                ],
                "Invocations": [],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            try\r\n            {\r\n                if (m_features[type].CurrValue < 0) return;\r\n                m_features[type].CurrValue -= n;\r\n                if (m_features[type].CurrValue < 0) isActive = false;\r\n            }\r\n            catch (Exception) { }\r\n        }",
                    "Line": 27
                  },
                  {
                    "Statement": "try\r\n            {\r\n                if (m_features[type].CurrValue < 0) return;\r\n                m_features[type].CurrValue -= n;\r\n                if (m_features[type].CurrValue < 0) isActive = false;\r\n            }\r\n            catch (Exception) { }",
                    "Line": 28
                  },
                  {
                    "Statement": "{\r\n                if (m_features[type].CurrValue < 0) return;\r\n                m_features[type].CurrValue -= n;\r\n                if (m_features[type].CurrValue < 0) isActive = false;\r\n            }",
                    "Line": 29
                  },
                  {
                    "Statement": "if (m_features[type].CurrValue < 0) return;",
                    "Line": 30
                  },
                  {
                    "Statement": "return;",
                    "Line": 30
                  },
                  {
                    "Statement": "m_features[type].CurrValue -= n;",
                    "Line": 31
                  },
                  {
                    "Statement": "if (m_features[type].CurrValue < 0) isActive = false;",
                    "Line": 32
                  },
                  {
                    "Statement": "isActive = false;",
                    "Line": 32
                  },
                  {
                    "Statement": "{ }",
                    "Line": 34
                  }
                ]
              },
              {
                "Name": "TickFeature",
                "Modifiers": [],
                "Line": 37,
                "Parameters": [],
                "Invocations": [],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            nextTick = true;\r\n        }",
                    "Line": 38
                  },
                  {
                    "Statement": "nextTick = true;",
                    "Line": 39
                  }
                ]
              },
              {
                "Name": "ResetTick",
                "Modifiers": [],
                "Line": 42,
                "Parameters": [],
                "Invocations": [],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            nextTick = false;\r\n        }",
                    "Line": 43
                  },
                  {
                    "Statement": "nextTick = false;",
                    "Line": 44
                  }
                ]
              },
              {
                "Name": "CheckTick",
                "Modifiers": [],
                "Line": 47,
                "Parameters": [],
                "Invocations": [],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            return nextTick;\r\n        }",
                    "Line": 48
                  },
                  {
                    "Statement": "return nextTick;",
                    "Line": 49
                  }
                ]
              },
              {
                "Name": "HasFeature",
                "Modifiers": [],
                "Line": 52,
                "Parameters": [
                  {
                    "Name": "feature",
                    "Type": "string",
                    "Assignment": null
                  }
                ],
                "Invocations": [],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            foreach (string s in m_features.Keys) if (s == feature) return true;\r\n            return false;\r\n        }",
                    "Line": 53
                  },
                  {
                    "Statement": "foreach (string s in m_features.Keys) if (s == feature) return true;",
                    "Line": 54
                  },
                  {
                    "Statement": "if (s == feature) return true;",
                    "Line": 54
                  },
                  {
                    "Statement": "return true;",
                    "Line": 54
                  },
                  {
                    "Statement": "return false;",
                    "Line": 55
                  }
                ]
              },
              {
                "Name": "CheckIsActive",
                "Modifiers": [],
                "Line": 58,
                "Parameters": [],
                "Invocations": [],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            return isActive;\r\n        }",
                    "Line": 59
                  },
                  {
                    "Statement": "return isActive;",
                    "Line": 60
                  }
                ]
              },
              {
                "Name": "AddModifier",
                "Modifiers": [],
                "Line": 63,
                "Parameters": [
                  {
                    "Name": "m",
                    "Type": "Modifier",
                    "Assignment": null
                  }
                ],
                "Invocations": [],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            modifiers[m.Name] = m;\r\n        }",
                    "Line": 64
                  },
                  {
                    "Statement": "modifiers[m.Name] = m;",
                    "Line": 65
                  }
                ]
              },
              {
                "Name": "AddModifier",
                "Modifiers": [],
                "Line": 68,
                "Parameters": [
                  {
                    "Name": "name",
                    "Type": "string",
                    "Assignment": null
                  },
                  {
                    "Name": "m",
                    "Type": "string",
                    "Assignment": null
                  },
                  {
                    "Name": "mul",
                    "Type": "float",
                    "Assignment": null
                  },
                  {
                    "Name": "add",
                    "Type": "float",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 70,
                    "Name": "new Modifier(name, m, mul, add)",
                    "FullName": "Character.UAComponent.AddModifier(Character.Modifier)",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            AddModifier(new Modifier(name, m, mul, add));\r\n        }",
                    "Line": 69
                  },
                  {
                    "Statement": "AddModifier(new Modifier(name, m, mul, add));",
                    "Line": 70
                  }
                ]
              },
              {
                "Name": "LoadMe",
                "Modifiers": [],
                "Line": 92,
                "Parameters": [
                  {
                    "Name": "path",
                    "Type": "string",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 94,
                    "Name": "path",
                    "FullName": "System.IO.File.ReadAllLines(string)",
                    "Parameters": []
                  },
                  {
                    "Line": 97,
                    "Name": "','",
                    "FullName": "string.Split(params char[])",
                    "Parameters": []
                  },
                  {
                    "Line": 98,
                    "Name": "",
                    "FullName": "string.Trim()",
                    "Parameters": []
                  },
                  {
                    "Line": 99,
                    "Name": "",
                    "FullName": "string.Trim()",
                    "Parameters": []
                  },
                  {
                    "Line": 100,
                    "Name": "items[2]",
                    "FullName": "Character.UAComponent.ParseFloatValue(string)",
                    "Parameters": []
                  },
                  {
                    "Line": 101,
                    "Name": "items[3]",
                    "FullName": "Character.UAComponent.ParseFloatValue(string)",
                    "Parameters": []
                  },
                  {
                    "Line": 104,
                    "Name": "name, feature",
                    "FullName": "Character.UAComponent.AddWrapper(string, string)",
                    "Parameters": []
                  },
                  {
                    "Line": 105,
                    "Name": "m",
                    "FullName": "Character.UAComponent.AddModifier(Character.Modifier)",
                    "Parameters": []
                  },
                  {
                    "Line": 106,
                    "Name": "f",
                    "FullName": "Character.UAComponent.AddFeature(Character.Feature)",
                    "Parameters": []
                  }
                ],
                "Variables": [
                  {
                    "Name": "lines",
                    "Type": "string[]",
                    "Assignment": "File.ReadAllLines(path)",
                    "Line": 94
                  },
                  {
                    "Name": "items",
                    "Type": "string[]",
                    "Assignment": "l.Split(',')",
                    "Line": 97
                  },
                  {
                    "Name": "name",
                    "Type": "string",
                    "Assignment": "items[0].Trim()",
                    "Line": 98
                  },
                  {
                    "Name": "feature",
                    "Type": "string",
                    "Assignment": "items[1].Trim()",
                    "Line": 99
                  },
                  {
                    "Name": "mul_val",
                    "Type": "float",
                    "Assignment": "ParseFloatValue(items[2])",
                    "Line": 100
                  },
                  {
                    "Name": "add_val",
                    "Type": "float",
                    "Assignment": "ParseFloatValue(items[3])",
                    "Line": 101
                  },
                  {
                    "Name": "m",
                    "Type": "Modifier",
                    "Assignment": "new Modifier(name, feature, mul_val, add_val)",
                    "Line": 102
                  },
                  {
                    "Name": "f",
                    "Type": "Feature",
                    "Assignment": "new Feature(add_val, feature)",
                    "Line": 103
                  }
                ],
                "Statements": [
                  {
                    "Statement": "{\r\n            string[] lines = File.ReadAllLines(path);\r\n            foreach (string l in lines)\r\n            {\r\n                string[] items = l.Split(',');\r\n                string name = items[0].Trim();\r\n                string feature = items[1].Trim();\r\n                float mul_val = ParseFloatValue(items[2]);\r\n                float add_val = ParseFloatValue(items[3]);\r\n                Modifier m = new Modifier(name, feature, mul_val, add_val);\r\n                Feature f = new Feature(add_val, feature);\r\n                AddWrapper(name, feature);\r\n                AddModifier(m);\r\n                AddFeature(f);\r\n                \r\n            }\r\n        }",
                    "Line": 93
                  },
                  {
                    "Statement": "string[] lines = File.ReadAllLines(path);",
                    "Line": 94
                  },
                  {
                    "Statement": "foreach (string l in lines)\r\n            {\r\n                string[] items = l.Split(',');\r\n                string name = items[0].Trim();\r\n                string feature = items[1].Trim();\r\n                float mul_val = ParseFloatValue(items[2]);\r\n                float add_val = ParseFloatValue(items[3]);\r\n                Modifier m = new Modifier(name, feature, mul_val, add_val);\r\n                Feature f = new Feature(add_val, feature);\r\n                AddWrapper(name, feature);\r\n                AddModifier(m);\r\n                AddFeature(f);\r\n                \r\n            }",
                    "Line": 95
                  },
                  {
                    "Statement": "{\r\n                string[] items = l.Split(',');\r\n                string name = items[0].Trim();\r\n                string feature = items[1].Trim();\r\n                float mul_val = ParseFloatValue(items[2]);\r\n                float add_val = ParseFloatValue(items[3]);\r\n                Modifier m = new Modifier(name, feature, mul_val, add_val);\r\n                Feature f = new Feature(add_val, feature);\r\n                AddWrapper(name, feature);\r\n                AddModifier(m);\r\n                AddFeature(f);\r\n                \r\n            }",
                    "Line": 96
                  },
                  {
                    "Statement": "string[] items = l.Split(',');",
                    "Line": 97
                  },
                  {
                    "Statement": "string name = items[0].Trim();",
                    "Line": 98
                  },
                  {
                    "Statement": "string feature = items[1].Trim();",
                    "Line": 99
                  },
                  {
                    "Statement": "float mul_val = ParseFloatValue(items[2]);",
                    "Line": 100
                  },
                  {
                    "Statement": "float add_val = ParseFloatValue(items[3]);",
                    "Line": 101
                  },
                  {
                    "Statement": "Modifier m = new Modifier(name, feature, mul_val, add_val);",
                    "Line": 102
                  },
                  {
                    "Statement": "Feature f = new Feature(add_val, feature);",
                    "Line": 103
                  },
                  {
                    "Statement": "AddWrapper(name, feature);",
                    "Line": 104
                  },
                  {
                    "Statement": "AddModifier(m);",
                    "Line": 105
                  },
                  {
                    "Statement": "AddFeature(f);",
                    "Line": 106
                  }
                ]
              },
              {
                "Name": "ModifierNameByFeature",
                "Modifiers": [],
                "Line": 111,
                "Parameters": [
                  {
                    "Name": "feature",
                    "Type": "string",
                    "Assignment": null
                  }
                ],
                "Invocations": [],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            foreach (KeyValuePair<string, string> w in wrapper) if (w.Value == feature) return w.Key;\r\n            return null;\r\n        }",
                    "Line": 112
                  },
                  {
                    "Statement": "foreach (KeyValuePair<string, string> w in wrapper) if (w.Value == feature) return w.Key;",
                    "Line": 113
                  },
                  {
                    "Statement": "if (w.Value == feature) return w.Key;",
                    "Line": 113
                  },
                  {
                    "Statement": "return w.Key;",
                    "Line": 113
                  },
                  {
                    "Statement": "return null;",
                    "Line": 114
                  }
                ]
              },
              {
                "Name": "ParseFloatValue",
                "Modifiers": [],
                "Line": 117,
                "Parameters": [
                  {
                    "Name": "val",
                    "Type": "string",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 119,
                    "Name": "val, System.Globalization.NumberStyles.Any, System.Globalization.CultureInfo.InvariantCulture",
                    "FullName": "float.Parse(string, System.Globalization.NumberStyles, System.IFormatProvider)",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            return float.Parse(val, System.Globalization.NumberStyles.Any, System.Globalization.CultureInfo.InvariantCulture);\r\n        }",
                    "Line": 118
                  },
                  {
                    "Statement": "return float.Parse(val, System.Globalization.NumberStyles.Any, System.Globalization.CultureInfo.InvariantCulture);",
                    "Line": 119
                  }
                ]
              },
              {
                "Name": "AddFeature",
                "Modifiers": [],
                "Line": 122,
                "Parameters": [
                  {
                    "Name": "f",
                    "Type": "Feature",
                    "Assignment": null
                  }
                ],
                "Invocations": [],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            m_features[f.Type] = f;\r\n        }",
                    "Line": 123
                  },
                  {
                    "Statement": "m_features[f.Type] = f;",
                    "Line": 124
                  }
                ]
              },
              {
                "Name": "AddFeature",
                "Modifiers": [],
                "Line": 127,
                "Parameters": [
                  {
                    "Name": "f",
                    "Type": "string",
                    "Assignment": null
                  },
                  {
                    "Name": "val",
                    "Type": "float",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 129,
                    "Name": "new Feature(val, f)",
                    "FullName": "Character.UAComponent.AddFeature(Character.Feature)",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            AddFeature(new Feature(val, f));\r\n        }",
                    "Line": 128
                  },
                  {
                    "Statement": "AddFeature(new Feature(val, f));",
                    "Line": 129
                  }
                ]
              },
              {
                "Name": "AddWrapper",
                "Modifiers": [],
                "Line": 132,
                "Parameters": [
                  {
                    "Name": "name",
                    "Type": "string",
                    "Assignment": null
                  },
                  {
                    "Name": "feature",
                    "Type": "string",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 134,
                    "Name": "name, feature",
                    "FullName": "System.Collections.Generic.Dictionary<string, string>.Add(string, string)",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            wrapper.Add(name, feature);\r\n        }",
                    "Line": 133
                  },
                  {
                    "Statement": "wrapper.Add(name, feature);",
                    "Line": 134
                  }
                ]
              },
              {
                "Name": "GetFeature",
                "Modifiers": [],
                "Line": 137,
                "Parameters": [
                  {
                    "Name": "f",
                    "Type": "string",
                    "Assignment": null
                  }
                ],
                "Invocations": [],
                "Variables": [
                  {
                    "Name": "feature",
                    "Type": "Feature",
                    "Assignment": "m_features[keyValuePair.Key]",
                    "Line": 141
                  }
                ],
                "Statements": [
                  {
                    "Statement": "{\r\n            foreach (KeyValuePair<string, Feature> keyValuePair in m_features)\r\n            {\r\n                Feature feature = m_features[keyValuePair.Key];\r\n                if (feature.Type == f) return feature;\r\n            }\r\n            return null;\r\n        }",
                    "Line": 138
                  },
                  {
                    "Statement": "foreach (KeyValuePair<string, Feature> keyValuePair in m_features)\r\n            {\r\n                Feature feature = m_features[keyValuePair.Key];\r\n                if (feature.Type == f) return feature;\r\n            }",
                    "Line": 139
                  },
                  {
                    "Statement": "{\r\n                Feature feature = m_features[keyValuePair.Key];\r\n                if (feature.Type == f) return feature;\r\n            }",
                    "Line": 140
                  },
                  {
                    "Statement": "Feature feature = m_features[keyValuePair.Key];",
                    "Line": 141
                  },
                  {
                    "Statement": "if (feature.Type == f) return feature;",
                    "Line": 142
                  },
                  {
                    "Statement": "return feature;",
                    "Line": 142
                  },
                  {
                    "Statement": "return null;",
                    "Line": 144
                  }
                ]
              },
              {
                "Name": "GetModifier",
                "Modifiers": [],
                "Line": 147,
                "Parameters": [
                  {
                    "Name": "m",
                    "Type": "string",
                    "Assignment": null
                  }
                ],
                "Invocations": [],
                "Variables": [
                  {
                    "Name": "modifier",
                    "Type": "Modifier",
                    "Assignment": "modifiers[keyValuePair.Key]",
                    "Line": 150
                  }
                ],
                "Statements": [
                  {
                    "Statement": "{\r\n            foreach (KeyValuePair<string, Modifier> keyValuePair in modifiers)\r\n            {\r\n                Modifier modifier = modifiers[keyValuePair.Key];\r\n                if (modifier.Type == m) return modifier;\r\n            }\r\n            return null;\r\n        }",
                    "Line": 147
                  },
                  {
                    "Statement": "foreach (KeyValuePair<string, Modifier> keyValuePair in modifiers)\r\n            {\r\n                Modifier modifier = modifiers[keyValuePair.Key];\r\n                if (modifier.Type == m) return modifier;\r\n            }",
                    "Line": 148
                  },
                  {
                    "Statement": "{\r\n                Modifier modifier = modifiers[keyValuePair.Key];\r\n                if (modifier.Type == m) return modifier;\r\n            }",
                    "Line": 149
                  },
                  {
                    "Statement": "Modifier modifier = modifiers[keyValuePair.Key];",
                    "Line": 150
                  },
                  {
                    "Statement": "if (modifier.Type == m) return modifier;",
                    "Line": 151
                  },
                  {
                    "Statement": "return modifier;",
                    "Line": 151
                  },
                  {
                    "Statement": "return null;",
                    "Line": 153
                  }
                ]
              },
              {
                "Name": "CheckFeature",
                "Modifiers": [],
                "Line": 156,
                "Parameters": [
                  {
                    "Name": "f",
                    "Type": "string",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 158,
                    "Name": "f",
                    "FullName": "System.Collections.Generic.Dictionary<string, Character.Feature>.ContainsKey(string)",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            return m_features.ContainsKey(f);\r\n        }",
                    "Line": 157
                  },
                  {
                    "Statement": "return m_features.ContainsKey(f);",
                    "Line": 158
                  }
                ]
              }
            ],
            "Fields": []
          }
        ],
        "Usings": []
      }
    ],
    "Classes": [],
    "Usings": [
      {
        "Name": "System",
        "Line": 0
      },
      {
        "Name": "System.Collections",
        "Line": 1
      },
      {
        "Name": "System.Collections.Generic",
        "Line": 2
      },
      {
        "Name": "System.Linq",
        "Line": 3
      },
      {
        "Name": "UnityEngine",
        "Line": 4
      },
      {
        "Name": "System.IO",
        "Line": 5
      }
    ]
  },
  {
    "Name": "UiFeedback",
    "Interfaces": [],
    "Namespaces": [
      {
        "Line": 4,
        "Name": "Character",
        "Interfaces": [],
        "Namespaces": [],
        "Classes": [
          {
            "Name": "UiFeedback",
            "Modifier": "public",
            "Inheritance": "MonoBehaviour",
            "Line": 6,
            "Interfaces": [],
            "Properties": [],
            "Methods": [],
            "Fields": []
          }
        ],
        "Usings": []
      }
    ],
    "Classes": [],
    "Usings": [
      {
        "Name": "System.Collections",
        "Line": 0
      },
      {
        "Name": "System.Collections.Generic",
        "Line": 1
      },
      {
        "Name": "UnityEngine",
        "Line": 2
      }
    ]
  },
  {
    "Name": "UIPauseManager",
    "Interfaces": [],
    "Namespaces": [
      {
        "Line": 6,
        "Name": "Character",
        "Interfaces": [],
        "Namespaces": [],
        "Classes": [
          {
            "Name": "UIPauseManager",
            "Modifier": "public",
            "Inheritance": "NetworkBehaviour",
            "Line": 8,
            "Interfaces": [],
            "Properties": [],
            "Methods": [
              {
                "Name": "Awake",
                "Modifiers": [],
                "Line": 14,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 16,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            status = GetComponent<CharacterStatus>();\r\n           \r\n\r\n        }",
                    "Line": 15
                  },
                  {
                    "Statement": "status = GetComponent<CharacterStatus>();",
                    "Line": 16
                  }
                ]
              },
              {
                "Name": "FixedUpdate",
                "Modifiers": [],
                "Line": 21,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 26,
                    "Name": "",
                    "FullName": "Character.UIPauseManager.IsPause()",
                    "Parameters": []
                  },
                  {
                    "Line": 30,
                    "Name": "",
                    "FullName": "Character.UIPauseManager.IsGame()",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            if (!isLocalPlayer) return;\r\n            if (!inPauseMenu && status.IsPaused)\r\n            {\r\n                IsPause();\r\n            }\r\n            if (inPauseMenu && !status.IsPaused)\r\n            {\r\n                IsGame();\r\n            }\r\n        }",
                    "Line": 22
                  },
                  {
                    "Statement": "if (!isLocalPlayer) return;",
                    "Line": 23
                  },
                  {
                    "Statement": "return;",
                    "Line": 23
                  },
                  {
                    "Statement": "if (!inPauseMenu && status.IsPaused)\r\n            {\r\n                IsPause();\r\n            }",
                    "Line": 24
                  },
                  {
                    "Statement": "{\r\n                IsPause();\r\n            }",
                    "Line": 25
                  },
                  {
                    "Statement": "IsPause();",
                    "Line": 26
                  },
                  {
                    "Statement": "if (inPauseMenu && !status.IsPaused)\r\n            {\r\n                IsGame();\r\n            }",
                    "Line": 28
                  },
                  {
                    "Statement": "{\r\n                IsGame();\r\n            }",
                    "Line": 29
                  },
                  {
                    "Statement": "IsGame();",
                    "Line": 30
                  }
                ]
              },
              {
                "Name": "IsPause",
                "Modifiers": [],
                "Line": 34,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 36,
                    "Name": "true",
                    "FullName": "UnityEngine.GameObject.SetActive(bool)",
                    "Parameters": []
                  },
                  {
                    "Line": 37,
                    "Name": "false",
                    "FullName": "UnityEngine.GameObject.SetActive(bool)",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            pauseMenu.SetActive(true);\r\n            soundMenu.SetActive(false);\r\n            inPauseMenu = true;\r\n        }",
                    "Line": 35
                  },
                  {
                    "Statement": "pauseMenu.SetActive(true);",
                    "Line": 36
                  },
                  {
                    "Statement": "soundMenu.SetActive(false);",
                    "Line": 37
                  },
                  {
                    "Statement": "inPauseMenu = true;",
                    "Line": 38
                  }
                ]
              },
              {
                "Name": "IsGame",
                "Modifiers": [],
                "Line": 41,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 43,
                    "Name": "false",
                    "FullName": "UnityEngine.GameObject.SetActive(bool)",
                    "Parameters": []
                  },
                  {
                    "Line": 44,
                    "Name": "false",
                    "FullName": "UnityEngine.GameObject.SetActive(bool)",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            pauseMenu.SetActive(false);\r\n            soundMenu.SetActive(false);\r\n            inPauseMenu = false;\r\n            if (status.IsPaused) status.IsPaused = false;\r\n        }",
                    "Line": 42
                  },
                  {
                    "Statement": "pauseMenu.SetActive(false);",
                    "Line": 43
                  },
                  {
                    "Statement": "soundMenu.SetActive(false);",
                    "Line": 44
                  },
                  {
                    "Statement": "inPauseMenu = false;",
                    "Line": 45
                  },
                  {
                    "Statement": "if (status.IsPaused) status.IsPaused = false;",
                    "Line": 46
                  },
                  {
                    "Statement": "status.IsPaused = false;",
                    "Line": 46
                  }
                ]
              },
              {
                "Name": "IsSoundOption",
                "Modifiers": [],
                "Line": 49,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 51,
                    "Name": "false",
                    "FullName": "UnityEngine.GameObject.SetActive(bool)",
                    "Parameters": []
                  },
                  {
                    "Line": 52,
                    "Name": "true",
                    "FullName": "UnityEngine.GameObject.SetActive(bool)",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            pauseMenu.SetActive(false);\r\n            soundMenu.SetActive(true);\r\n            inPauseMenu = true;\r\n        }",
                    "Line": 50
                  },
                  {
                    "Statement": "pauseMenu.SetActive(false);",
                    "Line": 51
                  },
                  {
                    "Statement": "soundMenu.SetActive(true);",
                    "Line": 52
                  },
                  {
                    "Statement": "inPauseMenu = true;",
                    "Line": 53
                  }
                ]
              }
            ],
            "Fields": []
          }
        ],
        "Usings": []
      }
    ],
    "Classes": [],
    "Usings": [
      {
        "Name": "System.Collections",
        "Line": 0
      },
      {
        "Name": "System.Collections.Generic",
        "Line": 1
      },
      {
        "Name": "UnityEngine",
        "Line": 2
      },
      {
        "Name": "UnityEngine.InputSystem",
        "Line": 3
      },
      {
        "Name": "UnityEngine.Networking",
        "Line": 4
      }
    ]
  },
  {
    "Name": "WeaponManager",
    "Interfaces": [],
    "Namespaces": [
      {
        "Line": 6,
        "Name": "Weapon",
        "Interfaces": [],
        "Namespaces": [],
        "Classes": [
          {
            "Name": "WeaponManager",
            "Modifier": "public",
            "Inheritance": "NetworkBehaviour",
            "Line": 8,
            "Interfaces": [],
            "Properties": [],
            "Methods": [
              {
                "Name": "Awake",
                "Modifiers": [],
                "Line": 46,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 48,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  },
                  {
                    "Line": 49,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  },
                  {
                    "Line": 50,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            pms = GetComponent<PlayerManagerScript>();\r\n            status = GetComponent<CharacterStatus>();\r\n            audioS = GetComponent<AudioSource>();\r\n        }",
                    "Line": 47
                  },
                  {
                    "Statement": "pms = GetComponent<PlayerManagerScript>();",
                    "Line": 48
                  },
                  {
                    "Statement": "status = GetComponent<CharacterStatus>();",
                    "Line": 49
                  },
                  {
                    "Statement": "audioS = GetComponent<AudioSource>();",
                    "Line": 50
                  }
                ]
              },
              {
                "Name": "Spawn",
                "Modifiers": [],
                "Line": 53,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 61,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  },
                  {
                    "Line": 62,
                    "Name": "false",
                    "FullName": "UnityEngine.GameObject.SetActive(bool)",
                    "Parameters": []
                  },
                  {
                    "Line": 63,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  },
                  {
                    "Line": 63,
                    "Name": "",
                    "FullName": "UnityEngine.GameObject.GetComponent<Weapon.WeaponStatus>()",
                    "Parameters": []
                  },
                  {
                    "Line": 64,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  },
                  {
                    "Line": 64,
                    "Name": "",
                    "FullName": "UnityEngine.GameObject.GetComponent<Weapon.WeaponStatus>()",
                    "Parameters": []
                  },
                  {
                    "Line": 66,
                    "Name": "activeWeaponId",
                    "FullName": "Weapon.WeaponManager.ChangeWeapon(int)",
                    "Parameters": []
                  }
                ],
                "Variables": [
                  {
                    "Name": "i",
                    "Type": "int",
                    "Assignment": "0",
                    "Line": 59
                  },
                  {
                    "Name": "weapon",
                    "Type": "GameObject",
                    "Assignment": "Instantiate(weaponsList[i], weaponContainer.transform.position, weaponContainer.transform.rotation, weaponContainer.transform)",
                    "Line": 61
                  }
                ],
                "Statements": [
                  {
                    "Statement": "{\r\n            if (weaponsList.Count > 0)\r\n            {\r\n                enabledWeapons = new SortedDictionary<int, bool>();\r\n                playerWeapons = new SortedDictionary<int, GameObject>();\r\n                for (int i = 0; i < weaponsList.Count; i++)\r\n                {\r\n                    GameObject weapon = Instantiate(weaponsList[i], weaponContainer.transform.position, weaponContainer.transform.rotation, weaponContainer.transform);\r\n                    weapon.SetActive(false);\r\n                    enabledWeapons.Add(weapon.GetComponent<WeaponStatus>().Id, false);\r\n                    playerWeapons.Add(weapon.GetComponent<WeaponStatus>().Id, weapon);\r\n                }\r\n                ChangeWeapon(activeWeaponId);\r\n            }\r\n        }",
                    "Line": 54
                  },
                  {
                    "Statement": "if (weaponsList.Count > 0)\r\n            {\r\n                enabledWeapons = new SortedDictionary<int, bool>();\r\n                playerWeapons = new SortedDictionary<int, GameObject>();\r\n                for (int i = 0; i < weaponsList.Count; i++)\r\n                {\r\n                    GameObject weapon = Instantiate(weaponsList[i], weaponContainer.transform.position, weaponContainer.transform.rotation, weaponContainer.transform);\r\n                    weapon.SetActive(false);\r\n                    enabledWeapons.Add(weapon.GetComponent<WeaponStatus>().Id, false);\r\n                    playerWeapons.Add(weapon.GetComponent<WeaponStatus>().Id, weapon);\r\n                }\r\n                ChangeWeapon(activeWeaponId);\r\n            }",
                    "Line": 55
                  },
                  {
                    "Statement": "{\r\n                enabledWeapons = new SortedDictionary<int, bool>();\r\n                playerWeapons = new SortedDictionary<int, GameObject>();\r\n                for (int i = 0; i < weaponsList.Count; i++)\r\n                {\r\n                    GameObject weapon = Instantiate(weaponsList[i], weaponContainer.transform.position, weaponContainer.transform.rotation, weaponContainer.transform);\r\n                    weapon.SetActive(false);\r\n                    enabledWeapons.Add(weapon.GetComponent<WeaponStatus>().Id, false);\r\n                    playerWeapons.Add(weapon.GetComponent<WeaponStatus>().Id, weapon);\r\n                }\r\n                ChangeWeapon(activeWeaponId);\r\n            }",
                    "Line": 56
                  },
                  {
                    "Statement": "enabledWeapons = new SortedDictionary<int, bool>();",
                    "Line": 57
                  },
                  {
                    "Statement": "playerWeapons = new SortedDictionary<int, GameObject>();",
                    "Line": 58
                  },
                  {
                    "Statement": "for (int i = 0; i < weaponsList.Count; i++)\r\n                {\r\n                    GameObject weapon = Instantiate(weaponsList[i], weaponContainer.transform.position, weaponContainer.transform.rotation, weaponContainer.transform);\r\n                    weapon.SetActive(false);\r\n                    enabledWeapons.Add(weapon.GetComponent<WeaponStatus>().Id, false);\r\n                    playerWeapons.Add(weapon.GetComponent<WeaponStatus>().Id, weapon);\r\n                }",
                    "Line": 59
                  },
                  {
                    "Statement": "{\r\n                    GameObject weapon = Instantiate(weaponsList[i], weaponContainer.transform.position, weaponContainer.transform.rotation, weaponContainer.transform);\r\n                    weapon.SetActive(false);\r\n                    enabledWeapons.Add(weapon.GetComponent<WeaponStatus>().Id, false);\r\n                    playerWeapons.Add(weapon.GetComponent<WeaponStatus>().Id, weapon);\r\n                }",
                    "Line": 60
                  },
                  {
                    "Statement": "GameObject weapon = Instantiate(weaponsList[i], weaponContainer.transform.position, weaponContainer.transform.rotation, weaponContainer.transform);",
                    "Line": 61
                  },
                  {
                    "Statement": "weapon.SetActive(false);",
                    "Line": 62
                  },
                  {
                    "Statement": "enabledWeapons.Add(weapon.GetComponent<WeaponStatus>().Id, false);",
                    "Line": 63
                  },
                  {
                    "Statement": "playerWeapons.Add(weapon.GetComponent<WeaponStatus>().Id, weapon);",
                    "Line": 64
                  },
                  {
                    "Statement": "ChangeWeapon(activeWeaponId);",
                    "Line": 66
                  }
                ]
              },
              {
                "Name": "ResetWeapons",
                "Modifiers": [],
                "Line": 70,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 75,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  },
                  {
                    "Line": 75,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  },
                  {
                    "Line": 79,
                    "Name": "activeWeaponId",
                    "FullName": "Weapon.WeaponManager.ChangeWeapon(int)",
                    "Parameters": []
                  }
                ],
                "Variables": [
                  {
                    "Name": "i",
                    "Type": "int",
                    "Assignment": "0",
                    "Line": 72
                  }
                ],
                "Statements": [
                  {
                    "Statement": "{\r\n            for (int i = 0; i < enabledWeapons.Count; i++)\r\n            {\r\n                enabledWeapons[i] = true;\r\n                playerWeapons[i].GetComponent<WeaponStatus>().ResetAmmo();\r\n            }\r\n            enabledWeapons[0] = true;\r\n            activeWeaponId = 0;\r\n            ChangeWeapon(activeWeaponId);\r\n        }",
                    "Line": 71
                  },
                  {
                    "Statement": "for (int i = 0; i < enabledWeapons.Count; i++)\r\n            {\r\n                enabledWeapons[i] = true;\r\n                playerWeapons[i].GetComponent<WeaponStatus>().ResetAmmo();\r\n            }",
                    "Line": 72
                  },
                  {
                    "Statement": "{\r\n                enabledWeapons[i] = true;\r\n                playerWeapons[i].GetComponent<WeaponStatus>().ResetAmmo();\r\n            }",
                    "Line": 73
                  },
                  {
                    "Statement": "enabledWeapons[i] = true;",
                    "Line": 74
                  },
                  {
                    "Statement": "playerWeapons[i].GetComponent<WeaponStatus>().ResetAmmo();",
                    "Line": 75
                  },
                  {
                    "Statement": "enabledWeapons[0] = true;",
                    "Line": 77
                  },
                  {
                    "Statement": "activeWeaponId = 0;",
                    "Line": 78
                  },
                  {
                    "Statement": "ChangeWeapon(activeWeaponId);",
                    "Line": 79
                  }
                ]
              },
              {
                "Name": "FixedUpdate",
                "Modifiers": [],
                "Line": 82,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 86,
                    "Name": "",
                    "FullName": "Weapon.WeaponManager.SelectWeapon()",
                    "Parameters": []
                  },
                  {
                    "Line": 87,
                    "Name": "",
                    "FullName": "Weapon.WeaponManager.CheckButtonPressed()",
                    "Parameters": []
                  },
                  {
                    "Line": 88,
                    "Name": "",
                    "FullName": "Weapon.WeaponManager.UpdateWeaponFeatures()",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            if (isLocalPlayer && pms.SpawnedChar.activeSelf)\r\n            {\r\n                SelectWeapon();\r\n                CheckButtonPressed();\r\n                UpdateWeaponFeatures();\r\n            }\r\n        }",
                    "Line": 83
                  },
                  {
                    "Statement": "if (isLocalPlayer && pms.SpawnedChar.activeSelf)\r\n            {\r\n                SelectWeapon();\r\n                CheckButtonPressed();\r\n                UpdateWeaponFeatures();\r\n            }",
                    "Line": 84
                  },
                  {
                    "Statement": "{\r\n                SelectWeapon();\r\n                CheckButtonPressed();\r\n                UpdateWeaponFeatures();\r\n            }",
                    "Line": 85
                  },
                  {
                    "Statement": "SelectWeapon();",
                    "Line": 86
                  },
                  {
                    "Statement": "CheckButtonPressed();",
                    "Line": 87
                  },
                  {
                    "Statement": "UpdateWeaponFeatures();",
                    "Line": 88
                  }
                ]
              },
              {
                "Name": "UpdateWeaponFeatures",
                "Modifiers": [],
                "Line": 92,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 94,
                    "Name": "pms.ComponentManager.Components",
                    "FullName": "Character.ComponentManager.UpdateComponents(System.Collections.Generic.Dictionary<string, Character.UAComponent>)",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            componentManager.UpdateComponents(pms.ComponentManager.Components);\r\n        }",
                    "Line": 93
                  },
                  {
                    "Statement": "componentManager.UpdateComponents(pms.ComponentManager.Components);",
                    "Line": 94
                  }
                ]
              },
              {
                "Name": "SelectWeapon",
                "Modifiers": [],
                "Line": 97,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 99,
                    "Name": "NextWeapon()",
                    "FullName": "Weapon.WeaponManager.ChangeWeapon(int)",
                    "Parameters": []
                  },
                  {
                    "Line": 99,
                    "Name": "",
                    "FullName": "Weapon.WeaponManager.NextWeapon()",
                    "Parameters": []
                  },
                  {
                    "Line": 100,
                    "Name": "PreWeapon()",
                    "FullName": "Weapon.WeaponManager.ChangeWeapon(int)",
                    "Parameters": []
                  },
                  {
                    "Line": 100,
                    "Name": "",
                    "FullName": "Weapon.WeaponManager.PreWeapon()",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            if (status.IsChangingWeaponsNext && !changeButtonsPressed) ChangeWeapon(NextWeapon());\r\n            if (status.IsChangingWeaponsPre && !changeButtonsPressed) ChangeWeapon(PreWeapon());\r\n        }",
                    "Line": 98
                  },
                  {
                    "Statement": "if (status.IsChangingWeaponsNext && !changeButtonsPressed) ChangeWeapon(NextWeapon());",
                    "Line": 99
                  },
                  {
                    "Statement": "ChangeWeapon(NextWeapon());",
                    "Line": 99
                  },
                  {
                    "Statement": "if (status.IsChangingWeaponsPre && !changeButtonsPressed) ChangeWeapon(PreWeapon());",
                    "Line": 100
                  },
                  {
                    "Statement": "ChangeWeapon(PreWeapon());",
                    "Line": 100
                  }
                ]
              },
              {
                "Name": "PickUpWeapon",
                "Modifiers": [],
                "Line": 103,
                "Parameters": [
                  {
                    "Name": "pickWeap",
                    "Type": "GameObject",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 105,
                    "Name": "",
                    "FullName": "UnityEngine.GameObject.GetComponent<WeaponConsumable>()",
                    "Parameters": []
                  },
                  {
                    "Line": 106,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  },
                  {
                    "Line": 110,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  },
                  {
                    "Line": 111,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  },
                  {
                    "Line": 116,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  },
                  {
                    "Line": 117,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  }
                ],
                "Variables": [
                  {
                    "Name": "pick_consumable",
                    "Type": "WeaponConsumable",
                    "Assignment": "pickWeap.GetComponent<WeaponConsumable>()",
                    "Line": 105
                  },
                  {
                    "Name": "w_stat",
                    "Type": "WeaponStatus",
                    "Assignment": "playerWeapons[pick_consumable.Id].GetComponent<WeaponStatus>()",
                    "Line": 110
                  }
                ],
                "Statements": [
                  {
                    "Statement": "{\r\n            WeaponConsumable pick_consumable = pickWeap.GetComponent<WeaponConsumable>();\r\n            if (enabledWeapons.ContainsKey(pick_consumable.Id))\r\n            {\r\n                if (enabledWeapons[pick_consumable.Id])\r\n                {\r\n                    WeaponStatus w_stat = playerWeapons[pick_consumable.Id].GetComponent<WeaponStatus>();\r\n                    w_stat.AddAmmo(pick_consumable.Ammo);\r\n                }\r\n                else\r\n                {\r\n                    enabledWeapons[pick_consumable.Id] = true;\r\n                    ChangeWeapon(pick_consumable.Id);\r\n                    activeWeaponStatus.AddAmmo(pick_consumable.Ammo);\r\n                }\r\n            }\r\n        }",
                    "Line": 104
                  },
                  {
                    "Statement": "WeaponConsumable pick_consumable = pickWeap.GetComponent<WeaponConsumable>();",
                    "Line": 105
                  },
                  {
                    "Statement": "if (enabledWeapons.ContainsKey(pick_consumable.Id))\r\n            {\r\n                if (enabledWeapons[pick_consumable.Id])\r\n                {\r\n                    WeaponStatus w_stat = playerWeapons[pick_consumable.Id].GetComponent<WeaponStatus>();\r\n                    w_stat.AddAmmo(pick_consumable.Ammo);\r\n                }\r\n                else\r\n                {\r\n                    enabledWeapons[pick_consumable.Id] = true;\r\n                    ChangeWeapon(pick_consumable.Id);\r\n                    activeWeaponStatus.AddAmmo(pick_consumable.Ammo);\r\n                }\r\n            }",
                    "Line": 106
                  },
                  {
                    "Statement": "{\r\n                if (enabledWeapons[pick_consumable.Id])\r\n                {\r\n                    WeaponStatus w_stat = playerWeapons[pick_consumable.Id].GetComponent<WeaponStatus>();\r\n                    w_stat.AddAmmo(pick_consumable.Ammo);\r\n                }\r\n                else\r\n                {\r\n                    enabledWeapons[pick_consumable.Id] = true;\r\n                    ChangeWeapon(pick_consumable.Id);\r\n                    activeWeaponStatus.AddAmmo(pick_consumable.Ammo);\r\n                }\r\n            }",
                    "Line": 107
                  },
                  {
                    "Statement": "if (enabledWeapons[pick_consumable.Id])\r\n                {\r\n                    WeaponStatus w_stat = playerWeapons[pick_consumable.Id].GetComponent<WeaponStatus>();\r\n                    w_stat.AddAmmo(pick_consumable.Ammo);\r\n                }\r\n                else\r\n                {\r\n                    enabledWeapons[pick_consumable.Id] = true;\r\n                    ChangeWeapon(pick_consumable.Id);\r\n                    activeWeaponStatus.AddAmmo(pick_consumable.Ammo);\r\n                }",
                    "Line": 108
                  },
                  {
                    "Statement": "{\r\n                    WeaponStatus w_stat = playerWeapons[pick_consumable.Id].GetComponent<WeaponStatus>();\r\n                    w_stat.AddAmmo(pick_consumable.Ammo);\r\n                }",
                    "Line": 109
                  },
                  {
                    "Statement": "WeaponStatus w_stat = playerWeapons[pick_consumable.Id].GetComponent<WeaponStatus>();",
                    "Line": 110
                  },
                  {
                    "Statement": "w_stat.AddAmmo(pick_consumable.Ammo);",
                    "Line": 111
                  },
                  {
                    "Statement": "{\r\n                    enabledWeapons[pick_consumable.Id] = true;\r\n                    ChangeWeapon(pick_consumable.Id);\r\n                    activeWeaponStatus.AddAmmo(pick_consumable.Ammo);\r\n                }",
                    "Line": 114
                  },
                  {
                    "Statement": "enabledWeapons[pick_consumable.Id] = true;",
                    "Line": 115
                  },
                  {
                    "Statement": "ChangeWeapon(pick_consumable.Id);",
                    "Line": 116
                  },
                  {
                    "Statement": "activeWeaponStatus.AddAmmo(pick_consumable.Ammo);",
                    "Line": 117
                  }
                ]
              },
              {
                "Name": "AddAmmoToWeapon",
                "Modifiers": [],
                "Line": 122,
                "Parameters": [
                  {
                    "Name": "ammoBox",
                    "Type": "GameObject",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 124,
                    "Name": "",
                    "FullName": "UnityEngine.GameObject.GetComponent<Weapon.AmmoBox>()",
                    "Parameters": []
                  },
                  {
                    "Line": 127,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  },
                  {
                    "Line": 129,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  },
                  {
                    "Line": 130,
                    "Name": "ammo",
                    "FullName": "Weapon.WeaponStatus.AddAmmo(int)",
                    "Parameters": []
                  }
                ],
                "Variables": [
                  {
                    "Name": "ab",
                    "Type": "AmmoBox",
                    "Assignment": "ammoBox.GetComponent<AmmoBox>()",
                    "Line": 124
                  },
                  {
                    "Name": "id",
                    "Type": "int",
                    "Assignment": "ab.Id",
                    "Line": 125
                  },
                  {
                    "Name": "ammo",
                    "Type": "int",
                    "Assignment": "ab.Ammo",
                    "Line": 126
                  },
                  {
                    "Name": "weps",
                    "Type": "WeaponStatus",
                    "Assignment": "playerWeapons[id].GetComponent<WeaponStatus>()",
                    "Line": 129
                  }
                ],
                "Statements": [
                  {
                    "Statement": "{\r\n            AmmoBox ab = ammoBox.GetComponent<AmmoBox>();\r\n            int id = ab.Id;\r\n            int ammo = ab.Ammo;\r\n            if (playerWeapons.ContainsKey(id))\r\n            {\r\n                WeaponStatus weps = playerWeapons[id].GetComponent<WeaponStatus>();\r\n                weps.AddAmmo(ammo);\r\n            }\r\n        }",
                    "Line": 123
                  },
                  {
                    "Statement": "AmmoBox ab = ammoBox.GetComponent<AmmoBox>();",
                    "Line": 124
                  },
                  {
                    "Statement": "int id = ab.Id;",
                    "Line": 125
                  },
                  {
                    "Statement": "int ammo = ab.Ammo;",
                    "Line": 126
                  },
                  {
                    "Statement": "if (playerWeapons.ContainsKey(id))\r\n            {\r\n                WeaponStatus weps = playerWeapons[id].GetComponent<WeaponStatus>();\r\n                weps.AddAmmo(ammo);\r\n            }",
                    "Line": 127
                  },
                  {
                    "Statement": "{\r\n                WeaponStatus weps = playerWeapons[id].GetComponent<WeaponStatus>();\r\n                weps.AddAmmo(ammo);\r\n            }",
                    "Line": 128
                  },
                  {
                    "Statement": "WeaponStatus weps = playerWeapons[id].GetComponent<WeaponStatus>();",
                    "Line": 129
                  },
                  {
                    "Statement": "weps.AddAmmo(ammo);",
                    "Line": 130
                  }
                ]
              },
              {
                "Name": "TriggerShoot",
                "Modifiers": [],
                "Line": 134,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 136,
                    "Name": "",
                    "FullName": "Weapon.WeaponManager.WeaponShoot()",
                    "Parameters": []
                  },
                  {
                    "Line": 137,
                    "Name": "NextWeapon()",
                    "FullName": "Weapon.WeaponManager.ChangeWeapon(int)",
                    "Parameters": []
                  },
                  {
                    "Line": 137,
                    "Name": "",
                    "FullName": "Weapon.WeaponManager.NextWeapon()",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            if (activeWeaponStatus.Ammo > 0 || activeWeaponStatus.Has_infinite_ammo) WeaponShoot();\r\n            else if (activeWeaponStatus.Ammo <= 0 && !activeWeaponStatus.Has_infinite_ammo) ChangeWeapon(NextWeapon());\r\n        }",
                    "Line": 135
                  },
                  {
                    "Statement": "if (activeWeaponStatus.Ammo > 0 || activeWeaponStatus.Has_infinite_ammo) WeaponShoot();\r\n            else if (activeWeaponStatus.Ammo <= 0 && !activeWeaponStatus.Has_infinite_ammo) ChangeWeapon(NextWeapon());",
                    "Line": 136
                  },
                  {
                    "Statement": "WeaponShoot();",
                    "Line": 136
                  },
                  {
                    "Statement": "if (activeWeaponStatus.Ammo <= 0 && !activeWeaponStatus.Has_infinite_ammo) ChangeWeapon(NextWeapon());",
                    "Line": 137
                  },
                  {
                    "Statement": "ChangeWeapon(NextWeapon());",
                    "Line": 137
                  }
                ]
              },
              {
                "Name": "WeaponShoot",
                "Modifiers": [],
                "Line": 140,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 143,
                    "Name": "",
                    "FullName": "UnityEngine.AudioSource.Play()",
                    "Parameters": []
                  },
                  {
                    "Line": 144,
                    "Name": "",
                    "FullName": "Weapon.WeaponStatus.Shoot()",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            audioS.clip = activeWeaponStatus.Fire_sound;\r\n            audioS.Play();\r\n            activeWeaponStatus.Shoot();\r\n        }",
                    "Line": 141
                  },
                  {
                    "Statement": "audioS.clip = activeWeaponStatus.Fire_sound;",
                    "Line": 142
                  },
                  {
                    "Statement": "audioS.Play();",
                    "Line": 143
                  },
                  {
                    "Statement": "activeWeaponStatus.Shoot();",
                    "Line": 144
                  }
                ]
              },
              {
                "Name": "NextWeapon",
                "Modifiers": [],
                "Line": 147,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 155,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  }
                ],
                "Variables": [
                  {
                    "Name": "i",
                    "Type": "int",
                    "Assignment": null,
                    "Line": 149
                  },
                  {
                    "Name": "found",
                    "Type": "bool",
                    "Assignment": "false",
                    "Line": 150
                  },
                  {
                    "Name": "wep_stat",
                    "Type": "WeaponStatus",
                    "Assignment": "playerWeapons[i].GetComponent<WeaponStatus>()",
                    "Line": 155
                  }
                ],
                "Statements": [
                  {
                    "Statement": "{\r\n            int i;\r\n            bool found = false;\r\n            for (i = activeWeaponId + 1; i < playerWeapons.Count && !found; i++)\r\n            {\r\n                if (enabledWeapons[i])\r\n                {\r\n                    WeaponStatus wep_stat = playerWeapons[i].GetComponent<WeaponStatus>();\r\n                    if (wep_stat.Ammo > 0 || wep_stat.Has_infinite_ammo)\r\n                        found = true;\r\n                }\r\n            }\r\n            if (found) return i - 1;\r\n            return 0;\r\n        }",
                    "Line": 148
                  },
                  {
                    "Statement": "int i;",
                    "Line": 149
                  },
                  {
                    "Statement": "bool found = false;",
                    "Line": 150
                  },
                  {
                    "Statement": "for (i = activeWeaponId + 1; i < playerWeapons.Count && !found; i++)\r\n            {\r\n                if (enabledWeapons[i])\r\n                {\r\n                    WeaponStatus wep_stat = playerWeapons[i].GetComponent<WeaponStatus>();\r\n                    if (wep_stat.Ammo > 0 || wep_stat.Has_infinite_ammo)\r\n                        found = true;\r\n                }\r\n            }",
                    "Line": 151
                  },
                  {
                    "Statement": "{\r\n                if (enabledWeapons[i])\r\n                {\r\n                    WeaponStatus wep_stat = playerWeapons[i].GetComponent<WeaponStatus>();\r\n                    if (wep_stat.Ammo > 0 || wep_stat.Has_infinite_ammo)\r\n                        found = true;\r\n                }\r\n            }",
                    "Line": 152
                  },
                  {
                    "Statement": "if (enabledWeapons[i])\r\n                {\r\n                    WeaponStatus wep_stat = playerWeapons[i].GetComponent<WeaponStatus>();\r\n                    if (wep_stat.Ammo > 0 || wep_stat.Has_infinite_ammo)\r\n                        found = true;\r\n                }",
                    "Line": 153
                  },
                  {
                    "Statement": "{\r\n                    WeaponStatus wep_stat = playerWeapons[i].GetComponent<WeaponStatus>();\r\n                    if (wep_stat.Ammo > 0 || wep_stat.Has_infinite_ammo)\r\n                        found = true;\r\n                }",
                    "Line": 154
                  },
                  {
                    "Statement": "WeaponStatus wep_stat = playerWeapons[i].GetComponent<WeaponStatus>();",
                    "Line": 155
                  },
                  {
                    "Statement": "if (wep_stat.Ammo > 0 || wep_stat.Has_infinite_ammo)\r\n                        found = true;",
                    "Line": 156
                  },
                  {
                    "Statement": "found = true;",
                    "Line": 157
                  },
                  {
                    "Statement": "if (found) return i - 1;",
                    "Line": 160
                  },
                  {
                    "Statement": "return i - 1;",
                    "Line": 160
                  },
                  {
                    "Statement": "return 0;",
                    "Line": 161
                  }
                ]
              },
              {
                "Name": "PreWeapon",
                "Modifiers": [],
                "Line": 164,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 172,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  }
                ],
                "Variables": [
                  {
                    "Name": "i",
                    "Type": "int",
                    "Assignment": null,
                    "Line": 166
                  },
                  {
                    "Name": "found",
                    "Type": "bool",
                    "Assignment": "false",
                    "Line": 167
                  },
                  {
                    "Name": "wep_stat",
                    "Type": "WeaponStatus",
                    "Assignment": "playerWeapons[i].GetComponent<WeaponStatus>()",
                    "Line": 172
                  }
                ],
                "Statements": [
                  {
                    "Statement": "{\r\n            int i;\r\n            bool found = false;\r\n            for (i = activeWeaponId - 1; i >= 0 && !found; i--)\r\n            {\r\n                if (enabledWeapons[i])\r\n                {\r\n                    WeaponStatus wep_stat = playerWeapons[i].GetComponent<WeaponStatus>();\r\n                    if (wep_stat.Ammo > 0 || wep_stat.Has_infinite_ammo)\r\n                        found = true;\r\n                }\r\n            }\r\n            if (found) return i + 1;\r\n            return 0;\r\n        }",
                    "Line": 165
                  },
                  {
                    "Statement": "int i;",
                    "Line": 166
                  },
                  {
                    "Statement": "bool found = false;",
                    "Line": 167
                  },
                  {
                    "Statement": "for (i = activeWeaponId - 1; i >= 0 && !found; i--)\r\n            {\r\n                if (enabledWeapons[i])\r\n                {\r\n                    WeaponStatus wep_stat = playerWeapons[i].GetComponent<WeaponStatus>();\r\n                    if (wep_stat.Ammo > 0 || wep_stat.Has_infinite_ammo)\r\n                        found = true;\r\n                }\r\n            }",
                    "Line": 168
                  },
                  {
                    "Statement": "{\r\n                if (enabledWeapons[i])\r\n                {\r\n                    WeaponStatus wep_stat = playerWeapons[i].GetComponent<WeaponStatus>();\r\n                    if (wep_stat.Ammo > 0 || wep_stat.Has_infinite_ammo)\r\n                        found = true;\r\n                }\r\n            }",
                    "Line": 169
                  },
                  {
                    "Statement": "if (enabledWeapons[i])\r\n                {\r\n                    WeaponStatus wep_stat = playerWeapons[i].GetComponent<WeaponStatus>();\r\n                    if (wep_stat.Ammo > 0 || wep_stat.Has_infinite_ammo)\r\n                        found = true;\r\n                }",
                    "Line": 170
                  },
                  {
                    "Statement": "{\r\n                    WeaponStatus wep_stat = playerWeapons[i].GetComponent<WeaponStatus>();\r\n                    if (wep_stat.Ammo > 0 || wep_stat.Has_infinite_ammo)\r\n                        found = true;\r\n                }",
                    "Line": 171
                  },
                  {
                    "Statement": "WeaponStatus wep_stat = playerWeapons[i].GetComponent<WeaponStatus>();",
                    "Line": 172
                  },
                  {
                    "Statement": "if (wep_stat.Ammo > 0 || wep_stat.Has_infinite_ammo)\r\n                        found = true;",
                    "Line": 173
                  },
                  {
                    "Statement": "found = true;",
                    "Line": 174
                  },
                  {
                    "Statement": "if (found) return i + 1;",
                    "Line": 177
                  },
                  {
                    "Statement": "return i + 1;",
                    "Line": 177
                  },
                  {
                    "Statement": "return 0;",
                    "Line": 178
                  }
                ]
              },
              {
                "Name": "ChangeWeapon",
                "Modifiers": [],
                "Line": 181,
                "Parameters": [
                  {
                    "Name": "weaponId",
                    "Type": "int",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 184,
                    "Name": "false",
                    "FullName": "UnityEngine.GameObject.SetActive(bool)",
                    "Parameters": []
                  },
                  {
                    "Line": 185,
                    "Name": "weaponId",
                    "FullName": "Weapon.WeaponManager.CmdChangeWeapon(int)",
                    "Parameters": []
                  },
                  {
                    "Line": 188,
                    "Name": "true",
                    "FullName": "UnityEngine.GameObject.SetActive(bool)",
                    "Parameters": []
                  },
                  {
                    "Line": 189,
                    "Name": "",
                    "FullName": "UnityEngine.GameObject.GetComponent<Weapon.WeaponStatus>()",
                    "Parameters": []
                  },
                  {
                    "Line": 190,
                    "Name": "",
                    "FullName": "UnityEngine.GameObject.GetComponent<Character.ComponentManager>()",
                    "Parameters": []
                  },
                  {
                    "Line": 191,
                    "Name": "",
                    "FullName": "UnityEngine.GameObject.GetComponent<Character.FeatureManager>()",
                    "Parameters": []
                  },
                  {
                    "Line": 192,
                    "Name": "",
                    "FullName": "Weapon.WeaponManager.WeaponInPosition()",
                    "Parameters": []
                  },
                  {
                    "Line": 193,
                    "Name": "",
                    "FullName": "Weapon.WeaponManager.AnimateByWeapon()",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            //Debug.LogError(\"ChangeWepon on \" + pms.NetMan.IsHost + \" weapon id \" + weaponId);\r\n            if (activeWeapon != null) activeWeapon.SetActive(false);\r\n            if (hasAuthority) CmdChangeWeapon(weaponId);\r\n            activeWeaponId = weaponId;\r\n            activeWeapon = playerWeapons[activeWeaponId];\r\n            activeWeapon.SetActive(true);\r\n            activeWeaponStatus = activeWeapon.GetComponent<WeaponStatus>();\r\n            componentManager = activeWeapon.GetComponent<ComponentManager>();\r\n            featureManager = activeWeapon.GetComponent<FeatureManager>();\r\n            WeaponInPosition();\r\n            AnimateByWeapon();\r\n        }",
                    "Line": 182
                  },
                  {
                    "Statement": "if (activeWeapon != null) activeWeapon.SetActive(false);",
                    "Line": 184
                  },
                  {
                    "Statement": "activeWeapon.SetActive(false);",
                    "Line": 184
                  },
                  {
                    "Statement": "if (hasAuthority) CmdChangeWeapon(weaponId);",
                    "Line": 185
                  },
                  {
                    "Statement": "CmdChangeWeapon(weaponId);",
                    "Line": 185
                  },
                  {
                    "Statement": "activeWeaponId = weaponId;",
                    "Line": 186
                  },
                  {
                    "Statement": "activeWeapon = playerWeapons[activeWeaponId];",
                    "Line": 187
                  },
                  {
                    "Statement": "activeWeapon.SetActive(true);",
                    "Line": 188
                  },
                  {
                    "Statement": "activeWeaponStatus = activeWeapon.GetComponent<WeaponStatus>();",
                    "Line": 189
                  },
                  {
                    "Statement": "componentManager = activeWeapon.GetComponent<ComponentManager>();",
                    "Line": 190
                  },
                  {
                    "Statement": "featureManager = activeWeapon.GetComponent<FeatureManager>();",
                    "Line": 191
                  },
                  {
                    "Statement": "WeaponInPosition();",
                    "Line": 192
                  },
                  {
                    "Statement": "AnimateByWeapon();",
                    "Line": 193
                  }
                ]
              },
              {
                "Name": "CmdChangeWeapon",
                "Modifiers": [],
                "Line": 196,
                "Parameters": [
                  {
                    "Name": "weaponId",
                    "Type": "int",
                    "Assignment": null
                  }
                ],
                "Invocations": [],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            activeWeaponId = weaponId;\r\n        }",
                    "Line": 198
                  },
                  {
                    "Statement": "activeWeaponId = weaponId;",
                    "Line": 199
                  }
                ]
              },
              {
                "Name": "WeaponInPosition",
                "Modifiers": [],
                "Line": 202,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 205,
                    "Name": "activeWeaponStatus.Rotation",
                    "FullName": "UnityEngine.Quaternion.Euler(UnityEngine.Vector3)",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            weaponContainer.transform.localPosition = activeWeaponStatus.Position;\r\n            weaponContainer.transform.localRotation = Quaternion.Euler(activeWeaponStatus.Rotation);\r\n        }",
                    "Line": 203
                  },
                  {
                    "Statement": "weaponContainer.transform.localPosition = activeWeaponStatus.Position;",
                    "Line": 204
                  },
                  {
                    "Statement": "weaponContainer.transform.localRotation = Quaternion.Euler(activeWeaponStatus.Rotation);",
                    "Line": 205
                  }
                ]
              },
              {
                "Name": "AnimateByWeapon",
                "Modifiers": [],
                "Line": 213,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 215,
                    "Name": "activeWeaponStatus.WeaponType",
                    "FullName": "Character.PlayerManagerScript.SetAnimator(string)",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            pms.SetAnimator(activeWeaponStatus.WeaponType);\r\n        }",
                    "Line": 214
                  },
                  {
                    "Statement": "pms.SetAnimator(activeWeaponStatus.WeaponType);",
                    "Line": 215
                  }
                ]
              },
              {
                "Name": "CheckButtonPressed",
                "Modifiers": [],
                "Line": 218,
                "Parameters": [],
                "Invocations": [],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            if (!status.IsChangingWeaponsNext && !status.IsChangingWeaponsPre) changeButtonsPressed = false;\r\n            else changeButtonsPressed = true;\r\n        }",
                    "Line": 219
                  },
                  {
                    "Statement": "if (!status.IsChangingWeaponsNext && !status.IsChangingWeaponsPre) changeButtonsPressed = false;\r\n            else changeButtonsPressed = true;",
                    "Line": 220
                  },
                  {
                    "Statement": "changeButtonsPressed = false;",
                    "Line": 220
                  },
                  {
                    "Statement": "changeButtonsPressed = true;",
                    "Line": 221
                  }
                ]
              },
              {
                "Name": "GetActiveWeaponShootDelay",
                "Modifiers": [],
                "Line": 224,
                "Parameters": [],
                "Invocations": [],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            return activeWeaponStatus.Time_between_shot;\r\n        }",
                    "Line": 225
                  },
                  {
                    "Statement": "return activeWeaponStatus.Time_between_shot;",
                    "Line": 226
                  }
                ]
              },
              {
                "Name": "GetActiveWeaponName",
                "Modifiers": [],
                "Line": 229,
                "Parameters": [],
                "Invocations": [],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            return activeWeaponStatus.WeaponName;\r\n        }",
                    "Line": 230
                  },
                  {
                    "Statement": "return activeWeaponStatus.WeaponName;",
                    "Line": 231
                  }
                ]
              },
              {
                "Name": "GetActiveWeaponAmmo",
                "Modifiers": [],
                "Line": 234,
                "Parameters": [],
                "Invocations": [],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            return activeWeaponStatus.Ammo;\r\n        }",
                    "Line": 235
                  },
                  {
                    "Statement": "return activeWeaponStatus.Ammo;",
                    "Line": 236
                  }
                ]
              },
              {
                "Name": "GetActiveWeaponRange",
                "Modifiers": [],
                "Line": 239,
                "Parameters": [],
                "Invocations": [],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            return activeWeaponStatus.Range;\r\n        }",
                    "Line": 240
                  },
                  {
                    "Statement": "return activeWeaponStatus.Range;",
                    "Line": 241
                  }
                ]
              },
              {
                "Name": "GetActiveWeaponMaxAmmo",
                "Modifiers": [],
                "Line": 244,
                "Parameters": [],
                "Invocations": [],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            return activeWeaponStatus.Max_ammo;\r\n        }",
                    "Line": 245
                  },
                  {
                    "Statement": "return activeWeaponStatus.Max_ammo;",
                    "Line": 246
                  }
                ]
              }
            ],
            "Fields": []
          }
        ],
        "Usings": []
      }
    ],
    "Classes": [],
    "Usings": [
      {
        "Name": "System.Collections",
        "Line": 0
      },
      {
        "Name": "System.Collections.Generic",
        "Line": 1
      },
      {
        "Name": "UnityEngine",
        "Line": 2
      },
      {
        "Name": "Character",
        "Line": 3
      },
      {
        "Name": "UnityEngine.Networking",
        "Line": 4
      }
    ]
  },
  {
    "Name": "WeaponStatus",
    "Interfaces": [],
    "Namespaces": [
      {
        "Line": 5,
        "Name": "Weapon",
        "Interfaces": [],
        "Namespaces": [],
        "Classes": [
          {
            "Name": "WeaponStatus",
            "Modifier": "public",
            "Inheritance": "MonoBehaviour",
            "Line": 8,
            "Interfaces": [],
            "Properties": [],
            "Methods": [
              {
                "Name": "ResetAmmo",
                "Modifiers": [],
                "Line": 25,
                "Parameters": [],
                "Invocations": [],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            ammo = 0;\r\n        }",
                    "Line": 26
                  },
                  {
                    "Statement": "ammo = 0;",
                    "Line": 27
                  }
                ]
              },
              {
                "Name": "Start",
                "Modifiers": [],
                "Line": 88,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 90,
                    "Name": "",
                    "FullName": "UnityEngine.Component.GetComponent<Weapon.MuzzleManager>()",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            muzzle = GetComponent<MuzzleManager>();\r\n            if (ammo > max_ammo)\r\n            {\r\n                ammo = max_ammo;\r\n            }\r\n            \r\n        }",
                    "Line": 89
                  },
                  {
                    "Statement": "muzzle = GetComponent<MuzzleManager>();",
                    "Line": 90
                  },
                  {
                    "Statement": "if (ammo > max_ammo)\r\n            {\r\n                ammo = max_ammo;\r\n            }",
                    "Line": 91
                  },
                  {
                    "Statement": "{\r\n                ammo = max_ammo;\r\n            }",
                    "Line": 92
                  },
                  {
                    "Statement": "ammo = max_ammo;",
                    "Line": 93
                  }
                ]
              },
              {
                "Name": "AddAmmo",
                "Modifiers": [],
                "Line": 98,
                "Parameters": [
                  {
                    "Name": "value",
                    "Type": "int",
                    "Assignment": null
                  }
                ],
                "Invocations": [],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            if ((ammo + value) < max_ammo)\r\n            {\r\n                ammo += value;\r\n            }\r\n            else\r\n            {\r\n                ammo = max_ammo;\r\n            }\r\n\r\n        }",
                    "Line": 99
                  },
                  {
                    "Statement": "if ((ammo + value) < max_ammo)\r\n            {\r\n                ammo += value;\r\n            }\r\n            else\r\n            {\r\n                ammo = max_ammo;\r\n            }",
                    "Line": 100
                  },
                  {
                    "Statement": "{\r\n                ammo += value;\r\n            }",
                    "Line": 101
                  },
                  {
                    "Statement": "ammo += value;",
                    "Line": 102
                  },
                  {
                    "Statement": "{\r\n                ammo = max_ammo;\r\n            }",
                    "Line": 105
                  },
                  {
                    "Statement": "ammo = max_ammo;",
                    "Line": 106
                  }
                ]
              },
              {
                "Name": "Shoot",
                "Modifiers": [],
                "Line": 110,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 117,
                    "Name": "muzzle.Muzzle()",
                    "FullName": "UnityEngine.MonoBehaviour.StartCoroutine(System.Collections.IEnumerator)",
                    "Parameters": []
                  },
                  {
                    "Line": 117,
                    "Name": "",
                    "FullName": "Weapon.MuzzleManager.Muzzle()",
                    "Parameters": []
                  },
                  {
                    "Line": 126,
                    "Name": "muzzle.Muzzle()",
                    "FullName": "UnityEngine.MonoBehaviour.StartCoroutine(System.Collections.IEnumerator)",
                    "Parameters": []
                  },
                  {
                    "Line": 126,
                    "Name": "",
                    "FullName": "Weapon.MuzzleManager.Muzzle()",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            if (!has_infinite_ammo)\r\n            {\r\n                if (ammo > ammo_per_shot)\r\n                {\r\n                    ammo -= ammo_per_shot;\r\n                    StartCoroutine(muzzle.Muzzle());\r\n                }\r\n                else\r\n                {\r\n                    ammo = 0;\r\n                }\r\n            }\r\n            else\r\n            {\r\n                StartCoroutine(muzzle.Muzzle());\r\n            }\r\n        }",
                    "Line": 111
                  },
                  {
                    "Statement": "if (!has_infinite_ammo)\r\n            {\r\n                if (ammo > ammo_per_shot)\r\n                {\r\n                    ammo -= ammo_per_shot;\r\n                    StartCoroutine(muzzle.Muzzle());\r\n                }\r\n                else\r\n                {\r\n                    ammo = 0;\r\n                }\r\n            }\r\n            else\r\n            {\r\n                StartCoroutine(muzzle.Muzzle());\r\n            }",
                    "Line": 112
                  },
                  {
                    "Statement": "{\r\n                if (ammo > ammo_per_shot)\r\n                {\r\n                    ammo -= ammo_per_shot;\r\n                    StartCoroutine(muzzle.Muzzle());\r\n                }\r\n                else\r\n                {\r\n                    ammo = 0;\r\n                }\r\n            }",
                    "Line": 113
                  },
                  {
                    "Statement": "if (ammo > ammo_per_shot)\r\n                {\r\n                    ammo -= ammo_per_shot;\r\n                    StartCoroutine(muzzle.Muzzle());\r\n                }\r\n                else\r\n                {\r\n                    ammo = 0;\r\n                }",
                    "Line": 114
                  },
                  {
                    "Statement": "{\r\n                    ammo -= ammo_per_shot;\r\n                    StartCoroutine(muzzle.Muzzle());\r\n                }",
                    "Line": 115
                  },
                  {
                    "Statement": "ammo -= ammo_per_shot;",
                    "Line": 116
                  },
                  {
                    "Statement": "StartCoroutine(muzzle.Muzzle());",
                    "Line": 117
                  },
                  {
                    "Statement": "{\r\n                    ammo = 0;\r\n                }",
                    "Line": 120
                  },
                  {
                    "Statement": "ammo = 0;",
                    "Line": 121
                  },
                  {
                    "Statement": "{\r\n                StartCoroutine(muzzle.Muzzle());\r\n            }",
                    "Line": 125
                  },
                  {
                    "Statement": "StartCoroutine(muzzle.Muzzle());",
                    "Line": 126
                  }
                ]
              }
            ],
            "Fields": []
          }
        ],
        "Usings": []
      }
    ],
    "Classes": [],
    "Usings": [
      {
        "Name": "System.Collections",
        "Line": 0
      },
      {
        "Name": "System.Collections.Generic",
        "Line": 1
      },
      {
        "Name": "UnityEngine",
        "Line": 2
      }
    ]
  },
  {
    "Name": "ConsumableSpawner",
    "Interfaces": [],
    "Namespaces": [],
    "Classes": [
      {
        "Name": "ConsumableSpawner",
        "Modifier": "public",
        "Inheritance": "NetworkBehaviour",
        "Line": 5,
        "Interfaces": [],
        "Properties": [],
        "Methods": [
          {
            "Name": "SpawnConsumable",
            "Modifiers": [],
            "Line": 13,
            "Parameters": [],
            "Invocations": [
              {
                "Line": 17,
                "Name": null,
                "FullName": null,
                "Parameters": []
              },
              {
                "Line": 18,
                "Name": "",
                "FullName": "ConsumableSpawner.CmdSpawnConsumable()",
                "Parameters": []
              }
            ],
            "Variables": [],
            "Statements": [
              {
                "Statement": "{\r\n        if (isServer)\r\n        {\r\n            spawnedObj = Instantiate(objectToSpawn, transform.position, transform.rotation, transform);\r\n            CmdSpawnConsumable();\r\n        }\r\n    }",
                "Line": 14
              },
              {
                "Statement": "if (isServer)\r\n        {\r\n            spawnedObj = Instantiate(objectToSpawn, transform.position, transform.rotation, transform);\r\n            CmdSpawnConsumable();\r\n        }",
                "Line": 15
              },
              {
                "Statement": "{\r\n            spawnedObj = Instantiate(objectToSpawn, transform.position, transform.rotation, transform);\r\n            CmdSpawnConsumable();\r\n        }",
                "Line": 16
              },
              {
                "Statement": "spawnedObj = Instantiate(objectToSpawn, transform.position, transform.rotation, transform);",
                "Line": 17
              },
              {
                "Statement": "CmdSpawnConsumable();",
                "Line": 18
              }
            ]
          },
          {
            "Name": "CmdSpawnConsumable",
            "Modifiers": [],
            "Line": 22,
            "Parameters": [],
            "Invocations": [
              {
                "Line": 25,
                "Name": null,
                "FullName": null,
                "Parameters": []
              }
            ],
            "Variables": [],
            "Statements": [
              {
                "Statement": "{\r\n        NetworkServer.Spawn(spawnedObj);\r\n    }",
                "Line": 24
              },
              {
                "Statement": "NetworkServer.Spawn(spawnedObj);",
                "Line": 25
              }
            ]
          },
          {
            "Name": "FixedUpdate",
            "Modifiers": [],
            "Line": 33,
            "Parameters": [],
            "Invocations": [
              {
                "Line": 40,
                "Name": "true",
                "FullName": "UnityEngine.GameObject.SetActive(bool)",
                "Parameters": []
              }
            ],
            "Variables": [],
            "Statements": [
              {
                "Statement": "{\r\n        if (isCooldown)\r\n        {\r\n            if (Time.time - startCooldown >= cooldown)\r\n            {\r\n                isCooldown = false;\r\n                spawnedObj.SetActive(true);\r\n            }\r\n        }\r\n    }",
                "Line": 34
              },
              {
                "Statement": "if (isCooldown)\r\n        {\r\n            if (Time.time - startCooldown >= cooldown)\r\n            {\r\n                isCooldown = false;\r\n                spawnedObj.SetActive(true);\r\n            }\r\n        }",
                "Line": 35
              },
              {
                "Statement": "{\r\n            if (Time.time - startCooldown >= cooldown)\r\n            {\r\n                isCooldown = false;\r\n                spawnedObj.SetActive(true);\r\n            }\r\n        }",
                "Line": 36
              },
              {
                "Statement": "if (Time.time - startCooldown >= cooldown)\r\n            {\r\n                isCooldown = false;\r\n                spawnedObj.SetActive(true);\r\n            }",
                "Line": 37
              },
              {
                "Statement": "{\r\n                isCooldown = false;\r\n                spawnedObj.SetActive(true);\r\n            }",
                "Line": 38
              },
              {
                "Statement": "isCooldown = false;",
                "Line": 39
              },
              {
                "Statement": "spawnedObj.SetActive(true);",
                "Line": 40
              }
            ]
          },
          {
            "Name": "SetCooldown",
            "Modifiers": [],
            "Line": 45,
            "Parameters": [],
            "Invocations": [
              {
                "Line": 47,
                "Name": "false",
                "FullName": "UnityEngine.GameObject.SetActive(bool)",
                "Parameters": []
              }
            ],
            "Variables": [],
            "Statements": [
              {
                "Statement": "{\r\n        spawnedObj.SetActive(false);\r\n        isCooldown = true;\r\n        startCooldown = Time.time;\r\n    }",
                "Line": 46
              },
              {
                "Statement": "spawnedObj.SetActive(false);",
                "Line": 47
              },
              {
                "Statement": "isCooldown = true;",
                "Line": 48
              },
              {
                "Statement": "startCooldown = Time.time;",
                "Line": 49
              }
            ]
          },
          {
            "Name": "PickedUp",
            "Modifiers": [],
            "Line": 52,
            "Parameters": [],
            "Invocations": [],
            "Variables": [],
            "Statements": [
              {
                "Statement": "{\r\n\r\n    }",
                "Line": 53
              }
            ]
          }
        ],
        "Fields": []
      }
    ],
    "Usings": [
      {
        "Name": "System.Collections",
        "Line": 0
      },
      {
        "Name": "System.Collections.Generic",
        "Line": 1
      },
      {
        "Name": "UnityEngine",
        "Line": 2
      },
      {
        "Name": "UnityEngine.Networking",
        "Line": 3
      }
    ]
  },
  {
    "Name": "ConsumableSpawnManager",
    "Interfaces": [],
    "Namespaces": [
      {
        "Line": 5,
        "Name": "GameManager",
        "Interfaces": [],
        "Namespaces": [],
        "Classes": [
          {
            "Name": "ConsumableSpawnManager",
            "Modifier": "public",
            "Inheritance": "MonoBehaviour",
            "Line": 7,
            "Interfaces": [],
            "Properties": [],
            "Methods": [
              {
                "Name": "AddCollectible",
                "Modifiers": [],
                "Line": 13,
                "Parameters": [
                  {
                    "Name": "c",
                    "Type": "Collectible",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 15,
                    "Name": "c",
                    "FullName": "System.Collections.Generic.List<Collectible>.Add(Collectible)",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            collectibles.Add(c);\r\n        }",
                    "Line": 14
                  },
                  {
                    "Statement": "collectibles.Add(c);",
                    "Line": 15
                  }
                ]
              },
              {
                "Name": "RemoveCollectible",
                "Modifiers": [],
                "Line": 18,
                "Parameters": [
                  {
                    "Name": "c",
                    "Type": "Collectible",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 20,
                    "Name": "c",
                    "FullName": "System.Collections.Generic.List<Collectible>.Remove(Collectible)",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            collectibles.Remove(c);\r\n        }",
                    "Line": 19
                  },
                  {
                    "Statement": "collectibles.Remove(c);",
                    "Line": 20
                  }
                ]
              },
              {
                "Name": "CheckIsActive",
                "Modifiers": [],
                "Line": 23,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 25,
                    "Name": "item => item.CooldownFinished == true",
                    "FullName": "System.Collections.Generic.List<Collectible>.RemoveAll(System.Predicate<Collectible>)",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            collectibles.RemoveAll(item => item.CooldownFinished == true);\r\n        }",
                    "Line": 24
                  },
                  {
                    "Statement": "collectibles.RemoveAll(item => item.CooldownFinished == true);",
                    "Line": 25
                  }
                ]
              },
              {
                "Name": "DoCountdown",
                "Modifiers": [],
                "Line": 28,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 30,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            foreach (Collectible c in collectibles) c.DoCooldown();\r\n        }",
                    "Line": 29
                  },
                  {
                    "Statement": "foreach (Collectible c in collectibles) c.DoCooldown();",
                    "Line": 30
                  },
                  {
                    "Statement": "c.DoCooldown();",
                    "Line": 30
                  }
                ]
              },
              {
                "Name": "FixedUpdate",
                "Modifiers": [],
                "Line": 33,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 36,
                    "Name": "",
                    "FullName": "GameManager.ConsumableSpawnManager.CheckIsActive()",
                    "Parameters": []
                  },
                  {
                    "Line": 41,
                    "Name": "",
                    "FullName": "GameManager.ConsumableSpawnManager.DoCountdown()",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            if (collectibles.Count == 0) return;\r\n            CheckIsActive();\r\n            timer -= Time.deltaTime;\r\n            if (timer <= 0)\r\n            {\r\n                timer = interval;\r\n                DoCountdown();\r\n            }\r\n        }",
                    "Line": 34
                  },
                  {
                    "Statement": "if (collectibles.Count == 0) return;",
                    "Line": 35
                  },
                  {
                    "Statement": "return;",
                    "Line": 35
                  },
                  {
                    "Statement": "CheckIsActive();",
                    "Line": 36
                  },
                  {
                    "Statement": "timer -= Time.deltaTime;",
                    "Line": 37
                  },
                  {
                    "Statement": "if (timer <= 0)\r\n            {\r\n                timer = interval;\r\n                DoCountdown();\r\n            }",
                    "Line": 38
                  },
                  {
                    "Statement": "{\r\n                timer = interval;\r\n                DoCountdown();\r\n            }",
                    "Line": 39
                  },
                  {
                    "Statement": "timer = interval;",
                    "Line": 40
                  },
                  {
                    "Statement": "DoCountdown();",
                    "Line": 41
                  }
                ]
              }
            ],
            "Fields": []
          }
        ],
        "Usings": []
      }
    ],
    "Classes": [],
    "Usings": [
      {
        "Name": "System.Collections",
        "Line": 0
      },
      {
        "Name": "System.Collections.Generic",
        "Line": 1
      },
      {
        "Name": "UnityEngine",
        "Line": 2
      },
      {
        "Name": "System.Linq",
        "Line": 3
      }
    ]
  },
  {
    "Name": "LightIntensity",
    "Interfaces": [],
    "Namespaces": [],
    "Classes": [
      {
        "Name": "LightIntensity",
        "Modifier": "public",
        "Inheritance": "MonoBehaviour",
        "Line": 4,
        "Interfaces": [],
        "Properties": [],
        "Methods": [
          {
            "Name": "Awake",
            "Modifiers": [],
            "Line": 17,
            "Parameters": [],
            "Invocations": [
              {
                "Line": 19,
                "Name": "",
                "FullName": "UnityEngine.Component.GetComponent<UnityEngine.Light>()",
                "Parameters": []
              },
              {
                "Line": 23,
                "Name": "_rotationAngle, 0, 0",
                "FullName": "UnityEngine.Quaternion.Euler(float, float, float)",
                "Parameters": []
              },
              {
                "Line": 24,
                "Name": "_initialRotation, 0, 0",
                "FullName": "UnityEngine.Quaternion.Euler(float, float, float)",
                "Parameters": []
              }
            ],
            "Variables": [],
            "Statements": [
              {
                "Statement": "{\r\n        _thisLight = GetComponent<Light>();\r\n        _thisLight.intensity = _initialIntensity;\r\n        _initialRotation = 0;\r\n        rotate = _initialRotation;\r\n        _rotationAngle = Quaternion.Euler(_rotationAngle, 0, 0).x;\r\n        if(_isRotating) _thisLight.transform.localRotation = Quaternion.Euler(_initialRotation, 0, 0);\r\n    }",
                "Line": 18
              },
              {
                "Statement": "_thisLight = GetComponent<Light>();",
                "Line": 19
              },
              {
                "Statement": "_thisLight.intensity = _initialIntensity;",
                "Line": 20
              },
              {
                "Statement": "_initialRotation = 0;",
                "Line": 21
              },
              {
                "Statement": "rotate = _initialRotation;",
                "Line": 22
              },
              {
                "Statement": "_rotationAngle = Quaternion.Euler(_rotationAngle, 0, 0).x;",
                "Line": 23
              },
              {
                "Statement": "if(_isRotating) _thisLight.transform.localRotation = Quaternion.Euler(_initialRotation, 0, 0);",
                "Line": 24
              },
              {
                "Statement": "_thisLight.transform.localRotation = Quaternion.Euler(_initialRotation, 0, 0);",
                "Line": 24
              }
            ]
          },
          {
            "Name": "FixedUpdate",
            "Modifiers": [],
            "Line": 27,
            "Parameters": [],
            "Invocations": [
              {
                "Line": 29,
                "Name": "",
                "FullName": "LightIntensity.ChangeLight()",
                "Parameters": []
              }
            ],
            "Variables": [],
            "Statements": [
              {
                "Statement": "{\r\n        ChangeLight();\r\n    }",
                "Line": 28
              },
              {
                "Statement": "ChangeLight();",
                "Line": 29
              }
            ]
          },
          {
            "Name": "ChangeLight",
            "Modifiers": [],
            "Line": 32,
            "Parameters": [],
            "Invocations": [
              {
                "Line": 50,
                "Name": "rotate, 0, 0",
                "FullName": "UnityEngine.Quaternion.Euler(float, float, float)",
                "Parameters": []
              },
              {
                "Line": 56,
                "Name": "rotate, 0, 0",
                "FullName": "UnityEngine.Quaternion.Euler(float, float, float)",
                "Parameters": []
              }
            ],
            "Variables": [],
            "Statements": [
              {
                "Statement": "{\r\n        if (intensityUp)\r\n        {\r\n            _thisLight.intensity += 0.1f;\r\n            if (_thisLight.intensity >= _finalIntensity) intensityUp = false;\r\n        }\r\n        else if(!intensityUp)\r\n        {\r\n            _thisLight.intensity -= 0.1f;\r\n            if (_thisLight.intensity <= _initialIntensity) intensityUp = true;\r\n        }\r\n\r\n        if (_isRotating)\r\n        {\r\n            if (rotateForward)\r\n            {\r\n                rotate += _rotationRate;\r\n                _thisLight.transform.localRotation = Quaternion.Euler(rotate, 0, 0);\r\n                if (_thisLight.transform.localRotation.x >= _initialRotation + _rotationAngle) rotateForward = false;\r\n            }\r\n            else if (!rotateForward)\r\n            {\r\n                rotate -= _rotationRate;\r\n                _thisLight.transform.localRotation = Quaternion.Euler(rotate, 0, 0);\r\n                if (_thisLight.transform.localRotation.x <= _initialRotation) rotateForward = true;\r\n            }\r\n        }\r\n\r\n    }",
                "Line": 33
              },
              {
                "Statement": "if (intensityUp)\r\n        {\r\n            _thisLight.intensity += 0.1f;\r\n            if (_thisLight.intensity >= _finalIntensity) intensityUp = false;\r\n        }\r\n        else if(!intensityUp)\r\n        {\r\n            _thisLight.intensity -= 0.1f;\r\n            if (_thisLight.intensity <= _initialIntensity) intensityUp = true;\r\n        }",
                "Line": 34
              },
              {
                "Statement": "{\r\n            _thisLight.intensity += 0.1f;\r\n            if (_thisLight.intensity >= _finalIntensity) intensityUp = false;\r\n        }",
                "Line": 35
              },
              {
                "Statement": "_thisLight.intensity += 0.1f;",
                "Line": 36
              },
              {
                "Statement": "if (_thisLight.intensity >= _finalIntensity) intensityUp = false;",
                "Line": 37
              },
              {
                "Statement": "intensityUp = false;",
                "Line": 37
              },
              {
                "Statement": "if(!intensityUp)\r\n        {\r\n            _thisLight.intensity -= 0.1f;\r\n            if (_thisLight.intensity <= _initialIntensity) intensityUp = true;\r\n        }",
                "Line": 39
              },
              {
                "Statement": "{\r\n            _thisLight.intensity -= 0.1f;\r\n            if (_thisLight.intensity <= _initialIntensity) intensityUp = true;\r\n        }",
                "Line": 40
              },
              {
                "Statement": "_thisLight.intensity -= 0.1f;",
                "Line": 41
              },
              {
                "Statement": "if (_thisLight.intensity <= _initialIntensity) intensityUp = true;",
                "Line": 42
              },
              {
                "Statement": "intensityUp = true;",
                "Line": 42
              },
              {
                "Statement": "if (_isRotating)\r\n        {\r\n            if (rotateForward)\r\n            {\r\n                rotate += _rotationRate;\r\n                _thisLight.transform.localRotation = Quaternion.Euler(rotate, 0, 0);\r\n                if (_thisLight.transform.localRotation.x >= _initialRotation + _rotationAngle) rotateForward = false;\r\n            }\r\n            else if (!rotateForward)\r\n            {\r\n                rotate -= _rotationRate;\r\n                _thisLight.transform.localRotation = Quaternion.Euler(rotate, 0, 0);\r\n                if (_thisLight.transform.localRotation.x <= _initialRotation) rotateForward = true;\r\n            }\r\n        }",
                "Line": 45
              },
              {
                "Statement": "{\r\n            if (rotateForward)\r\n            {\r\n                rotate += _rotationRate;\r\n                _thisLight.transform.localRotation = Quaternion.Euler(rotate, 0, 0);\r\n                if (_thisLight.transform.localRotation.x >= _initialRotation + _rotationAngle) rotateForward = false;\r\n            }\r\n            else if (!rotateForward)\r\n            {\r\n                rotate -= _rotationRate;\r\n                _thisLight.transform.localRotation = Quaternion.Euler(rotate, 0, 0);\r\n                if (_thisLight.transform.localRotation.x <= _initialRotation) rotateForward = true;\r\n            }\r\n        }",
                "Line": 46
              },
              {
                "Statement": "if (rotateForward)\r\n            {\r\n                rotate += _rotationRate;\r\n                _thisLight.transform.localRotation = Quaternion.Euler(rotate, 0, 0);\r\n                if (_thisLight.transform.localRotation.x >= _initialRotation + _rotationAngle) rotateForward = false;\r\n            }\r\n            else if (!rotateForward)\r\n            {\r\n                rotate -= _rotationRate;\r\n                _thisLight.transform.localRotation = Quaternion.Euler(rotate, 0, 0);\r\n                if (_thisLight.transform.localRotation.x <= _initialRotation) rotateForward = true;\r\n            }",
                "Line": 47
              },
              {
                "Statement": "{\r\n                rotate += _rotationRate;\r\n                _thisLight.transform.localRotation = Quaternion.Euler(rotate, 0, 0);\r\n                if (_thisLight.transform.localRotation.x >= _initialRotation + _rotationAngle) rotateForward = false;\r\n            }",
                "Line": 48
              },
              {
                "Statement": "rotate += _rotationRate;",
                "Line": 49
              },
              {
                "Statement": "_thisLight.transform.localRotation = Quaternion.Euler(rotate, 0, 0);",
                "Line": 50
              },
              {
                "Statement": "if (_thisLight.transform.localRotation.x >= _initialRotation + _rotationAngle) rotateForward = false;",
                "Line": 51
              },
              {
                "Statement": "rotateForward = false;",
                "Line": 51
              },
              {
                "Statement": "if (!rotateForward)\r\n            {\r\n                rotate -= _rotationRate;\r\n                _thisLight.transform.localRotation = Quaternion.Euler(rotate, 0, 0);\r\n                if (_thisLight.transform.localRotation.x <= _initialRotation) rotateForward = true;\r\n            }",
                "Line": 53
              },
              {
                "Statement": "{\r\n                rotate -= _rotationRate;\r\n                _thisLight.transform.localRotation = Quaternion.Euler(rotate, 0, 0);\r\n                if (_thisLight.transform.localRotation.x <= _initialRotation) rotateForward = true;\r\n            }",
                "Line": 54
              },
              {
                "Statement": "rotate -= _rotationRate;",
                "Line": 55
              },
              {
                "Statement": "_thisLight.transform.localRotation = Quaternion.Euler(rotate, 0, 0);",
                "Line": 56
              },
              {
                "Statement": "if (_thisLight.transform.localRotation.x <= _initialRotation) rotateForward = true;",
                "Line": 57
              },
              {
                "Statement": "rotateForward = true;",
                "Line": 57
              }
            ]
          }
        ],
        "Fields": []
      }
    ],
    "Usings": [
      {
        "Name": "System.Collections",
        "Line": 0
      },
      {
        "Name": "System.Collections.Generic",
        "Line": 1
      },
      {
        "Name": "UnityEngine",
        "Line": 2
      }
    ]
  },
  {
    "Name": "ScoreTableManager",
    "Interfaces": [],
    "Namespaces": [
      {
        "Line": 7,
        "Name": "Character",
        "Interfaces": [],
        "Namespaces": [],
        "Classes": [
          {
            "Name": "ScoreTableManager",
            "Modifier": "public",
            "Inheritance": "MonoBehaviour",
            "Line": 9,
            "Interfaces": [],
            "Properties": [],
            "Methods": [
              {
                "Name": "FixedUpdate",
                "Modifiers": [],
                "Line": 27,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 29,
                    "Name": "",
                    "FullName": "Character.ScoreTableManager.UpdateAllEntries()",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            UpdateAllEntries();\r\n        }",
                    "Line": 28
                  },
                  {
                    "Statement": "UpdateAllEntries();",
                    "Line": 29
                  }
                ]
              },
              {
                "Name": "UpdateAllEntries",
                "Modifiers": [],
                "Line": 32,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 34,
                    "Name": "scores[t.Key]",
                    "FullName": "Character.TableEntry.UpdateMe(Character.ScoreTableManager.ScoreEntry)",
                    "Parameters": []
                  },
                  {
                    "Line": 35,
                    "Name": "",
                    "FullName": "Character.ScoreTableManager.SaveState()",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            foreach (KeyValuePair<int, TableEntry> t in tableEntries) t.Value.UpdateMe(scores[t.Key]);\r\n            SaveState();\r\n        }",
                    "Line": 33
                  },
                  {
                    "Statement": "foreach (KeyValuePair<int, TableEntry> t in tableEntries) t.Value.UpdateMe(scores[t.Key]);",
                    "Line": 34
                  },
                  {
                    "Statement": "t.Value.UpdateMe(scores[t.Key]);",
                    "Line": 34
                  },
                  {
                    "Statement": "SaveState();",
                    "Line": 35
                  }
                ]
              },
              {
                "Name": "MyEntry",
                "Modifiers": [],
                "Line": 38,
                "Parameters": [
                  {
                    "Name": "playerid",
                    "Type": "int",
                    "Assignment": null
                  }
                ],
                "Invocations": [],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            try { return scores[playerid]; }\r\n            catch (Exception) { return null; }\r\n        }",
                    "Line": 39
                  },
                  {
                    "Statement": "try { return scores[playerid]; }\r\n            catch (Exception) { return null; }",
                    "Line": 40
                  },
                  {
                    "Statement": "{ return scores[playerid]; }",
                    "Line": 40
                  },
                  {
                    "Statement": "return scores[playerid];",
                    "Line": 40
                  },
                  {
                    "Statement": "{ return null; }",
                    "Line": 41
                  },
                  {
                    "Statement": "return null;",
                    "Line": 41
                  }
                ]
              },
              {
                "Name": "AddNewPlayer",
                "Modifiers": [],
                "Line": 44,
                "Parameters": [
                  {
                    "Name": "playerName",
                    "Type": "string",
                    "Assignment": null
                  },
                  {
                    "Name": "playerId",
                    "Type": "int",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 46,
                    "Name": "\"SCORES\"",
                    "FullName": "UnityEngine.PlayerPrefs.GetString(string)",
                    "Parameters": []
                  },
                  {
                    "Line": 50,
                    "Name": "playerId, s",
                    "FullName": "System.Collections.Generic.Dictionary<int, Character.ScoreTableManager.ScoreEntry>.Add(int, Character.ScoreTableManager.ScoreEntry)",
                    "Parameters": []
                  },
                  {
                    "Line": 51,
                    "Name": "playerId",
                    "FullName": "Character.ScoreTableManager.CreateEntry(int)",
                    "Parameters": []
                  },
                  {
                    "Line": 55,
                    "Name": "jsonString",
                    "FullName": "Character.ScoreTableManager.LoadState(string)",
                    "Parameters": []
                  },
                  {
                    "Line": 56,
                    "Name": "s.playerid",
                    "FullName": "Character.ScoreTableManager.CreateEntry(int)",
                    "Parameters": []
                  },
                  {
                    "Line": 58,
                    "Name": "",
                    "FullName": "Character.ScoreTableManager.SaveState()",
                    "Parameters": []
                  }
                ],
                "Variables": [
                  {
                    "Name": "jsonString",
                    "Type": "string",
                    "Assignment": "PlayerPrefs.GetString(\"SCORES\")",
                    "Line": 46
                  },
                  {
                    "Name": "s",
                    "Type": "ScoreEntry",
                    "Assignment": "new ScoreEntry(0, 0, playerId, playerName)",
                    "Line": 49
                  }
                ],
                "Statements": [
                  {
                    "Statement": "{\r\n            string jsonString = PlayerPrefs.GetString(\"SCORES\");\r\n            if (jsonString == \"\")\r\n            { \r\n                ScoreEntry s = new ScoreEntry(0, 0, playerId, playerName);\r\n                scores.Add(playerId, s);\r\n                CreateEntry(playerId);\r\n            }\r\n            else\r\n            {\r\n                LoadState(jsonString);\r\n                foreach (ScoreEntry s in scoreList) CreateEntry(s.playerid);\r\n            }\r\n            SaveState();\r\n        }",
                    "Line": 45
                  },
                  {
                    "Statement": "string jsonString = PlayerPrefs.GetString(\"SCORES\");",
                    "Line": 46
                  },
                  {
                    "Statement": "if (jsonString == \"\")\r\n            { \r\n                ScoreEntry s = new ScoreEntry(0, 0, playerId, playerName);\r\n                scores.Add(playerId, s);\r\n                CreateEntry(playerId);\r\n            }\r\n            else\r\n            {\r\n                LoadState(jsonString);\r\n                foreach (ScoreEntry s in scoreList) CreateEntry(s.playerid);\r\n            }",
                    "Line": 47
                  },
                  {
                    "Statement": "{ \r\n                ScoreEntry s = new ScoreEntry(0, 0, playerId, playerName);\r\n                scores.Add(playerId, s);\r\n                CreateEntry(playerId);\r\n            }",
                    "Line": 48
                  },
                  {
                    "Statement": "ScoreEntry s = new ScoreEntry(0, 0, playerId, playerName);",
                    "Line": 49
                  },
                  {
                    "Statement": "scores.Add(playerId, s);",
                    "Line": 50
                  },
                  {
                    "Statement": "CreateEntry(playerId);",
                    "Line": 51
                  },
                  {
                    "Statement": "{\r\n                LoadState(jsonString);\r\n                foreach (ScoreEntry s in scoreList) CreateEntry(s.playerid);\r\n            }",
                    "Line": 54
                  },
                  {
                    "Statement": "LoadState(jsonString);",
                    "Line": 55
                  },
                  {
                    "Statement": "foreach (ScoreEntry s in scoreList) CreateEntry(s.playerid);",
                    "Line": 56
                  },
                  {
                    "Statement": "CreateEntry(s.playerid);",
                    "Line": 56
                  },
                  {
                    "Statement": "SaveState();",
                    "Line": 58
                  }
                ]
              },
              {
                "Name": "CreateEntry",
                "Modifiers": [],
                "Line": 61,
                "Parameters": [
                  {
                    "Name": "playerId",
                    "Type": "int",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 63,
                    "Name": "tableEntry, entriesContainer",
                    "FullName": "UnityEngine.Object.Instantiate<UnityEngine.Transform>(UnityEngine.Transform, UnityEngine.Transform)",
                    "Parameters": []
                  },
                  {
                    "Line": 64,
                    "Name": "",
                    "FullName": "UnityEngine.Component.GetComponent<Character.TableEntry>()",
                    "Parameters": []
                  },
                  {
                    "Line": 68,
                    "Name": "true",
                    "FullName": "UnityEngine.GameObject.SetActive(bool)",
                    "Parameters": []
                  },
                  {
                    "Line": 69,
                    "Name": "playerId",
                    "FullName": "System.Collections.Generic.Dictionary<int, Character.TableEntry>.ContainsKey(int)",
                    "Parameters": []
                  },
                  {
                    "Line": 70,
                    "Name": "playerId, newTableEntry",
                    "FullName": "System.Collections.Generic.Dictionary<int, Character.TableEntry>.Add(int, Character.TableEntry)",
                    "Parameters": []
                  }
                ],
                "Variables": [
                  {
                    "Name": "newEntry",
                    "Type": "Transform",
                    "Assignment": "Instantiate(tableEntry, entriesContainer)",
                    "Line": 63
                  },
                  {
                    "Name": "newTableEntry",
                    "Type": "TableEntry",
                    "Assignment": "newEntry.GetComponent<TableEntry>()",
                    "Line": 64
                  }
                ],
                "Statements": [
                  {
                    "Statement": "{\r\n            Transform newEntry = Instantiate(tableEntry, entriesContainer);\r\n            TableEntry newTableEntry = newEntry.GetComponent<TableEntry>();\r\n            newTableEntry.PlayerId = playerId;\r\n            newTableEntry.Gap = currentGap;\r\n            currentGap += gapValue;\r\n            newEntry.gameObject.SetActive(true);\r\n            if (tableEntries.ContainsKey(playerId)) tableEntries[playerId] = newTableEntry;\r\n            else tableEntries.Add(playerId, newTableEntry);\r\n        }",
                    "Line": 62
                  },
                  {
                    "Statement": "Transform newEntry = Instantiate(tableEntry, entriesContainer);",
                    "Line": 63
                  },
                  {
                    "Statement": "TableEntry newTableEntry = newEntry.GetComponent<TableEntry>();",
                    "Line": 64
                  },
                  {
                    "Statement": "newTableEntry.PlayerId = playerId;",
                    "Line": 65
                  },
                  {
                    "Statement": "newTableEntry.Gap = currentGap;",
                    "Line": 66
                  },
                  {
                    "Statement": "currentGap += gapValue;",
                    "Line": 67
                  },
                  {
                    "Statement": "newEntry.gameObject.SetActive(true);",
                    "Line": 68
                  },
                  {
                    "Statement": "if (tableEntries.ContainsKey(playerId)) tableEntries[playerId] = newTableEntry;\r\n            else tableEntries.Add(playerId, newTableEntry);",
                    "Line": 69
                  },
                  {
                    "Statement": "tableEntries[playerId] = newTableEntry;",
                    "Line": 69
                  },
                  {
                    "Statement": "tableEntries.Add(playerId, newTableEntry);",
                    "Line": 70
                  }
                ]
              },
              {
                "Name": "UpdateDamage",
                "Modifiers": [],
                "Line": 73,
                "Parameters": [
                  {
                    "Name": "id",
                    "Type": "int",
                    "Assignment": null
                  },
                  {
                    "Name": "dmg",
                    "Type": "int",
                    "Assignment": null
                  }
                ],
                "Invocations": [],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            try\r\n            {\r\n                scores[id].damage += dmg;\r\n            }\r\n            catch (Exception) { }\r\n        }",
                    "Line": 74
                  },
                  {
                    "Statement": "try\r\n            {\r\n                scores[id].damage += dmg;\r\n            }\r\n            catch (Exception) { }",
                    "Line": 75
                  },
                  {
                    "Statement": "{\r\n                scores[id].damage += dmg;\r\n            }",
                    "Line": 76
                  },
                  {
                    "Statement": "scores[id].damage += dmg;",
                    "Line": 77
                  },
                  {
                    "Statement": "{ }",
                    "Line": 79
                  }
                ]
              },
              {
                "Name": "UpdateKill",
                "Modifiers": [],
                "Line": 82,
                "Parameters": [
                  {
                    "Name": "id",
                    "Type": "int",
                    "Assignment": null
                  }
                ],
                "Invocations": [],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            try\r\n            {\r\n                scores[id].kills++;\r\n            }\r\n            catch (Exception) { }\r\n        }",
                    "Line": 83
                  },
                  {
                    "Statement": "try\r\n            {\r\n                scores[id].kills++;\r\n            }\r\n            catch (Exception) { }",
                    "Line": 84
                  },
                  {
                    "Statement": "{\r\n                scores[id].kills++;\r\n            }",
                    "Line": 85
                  },
                  {
                    "Statement": "scores[id].kills++;",
                    "Line": 86
                  },
                  {
                    "Statement": "{ }",
                    "Line": 88
                  }
                ]
              },
              {
                "Name": "LoadState",
                "Modifiers": [],
                "Line": 90,
                "Parameters": [
                  {
                    "Name": "savedScore",
                    "Type": "string",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 92,
                    "Name": "savedScore",
                    "FullName": "UnityEngine.JsonUtility.FromJson<Character.ScoreTableManager.ScoreEntryList>(string)",
                    "Parameters": []
                  },
                  {
                    "Line": 96,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  },
                  {
                    "Line": 97,
                    "Name": null,
                    "FullName": null,
                    "Parameters": []
                  },
                  {
                    "Line": 98,
                    "Name": "id",
                    "FullName": "System.Collections.Generic.Dictionary<int, Character.ScoreTableManager.ScoreEntry>.ContainsKey(int)",
                    "Parameters": []
                  },
                  {
                    "Line": 99,
                    "Name": "id, e",
                    "FullName": "System.Collections.Generic.Dictionary<int, Character.ScoreTableManager.ScoreEntry>.Add(int, Character.ScoreTableManager.ScoreEntry)",
                    "Parameters": []
                  }
                ],
                "Variables": [
                  {
                    "Name": "l",
                    "Type": "ScoreEntryList",
                    "Assignment": "JsonUtility.FromJson<ScoreEntryList>(savedScore)",
                    "Line": 92
                  },
                  {
                    "Name": "i",
                    "Type": "int",
                    "Assignment": "0",
                    "Line": 94
                  },
                  {
                    "Name": "id",
                    "Type": "int",
                    "Assignment": "scoreList.ElementAt(i).playerid",
                    "Line": 96
                  },
                  {
                    "Name": "e",
                    "Type": "ScoreEntry",
                    "Assignment": "scoreList.ElementAt(i)",
                    "Line": 97
                  }
                ],
                "Statements": [
                  {
                    "Statement": "{\r\n            ScoreEntryList l = JsonUtility.FromJson<ScoreEntryList>(savedScore);\r\n            scoreList = l.list;\r\n            for (int i = 0; i < scoreList.Count; i++)\r\n            {\r\n                int id = scoreList.ElementAt(i).playerid;\r\n                ScoreEntry e = scoreList.ElementAt(i);\r\n                if (scores.ContainsKey(id)) scores[id] = e;\r\n                else scores.Add(id, e);\r\n            }\r\n        }",
                    "Line": 91
                  },
                  {
                    "Statement": "ScoreEntryList l = JsonUtility.FromJson<ScoreEntryList>(savedScore);",
                    "Line": 92
                  },
                  {
                    "Statement": "scoreList = l.list;",
                    "Line": 93
                  },
                  {
                    "Statement": "for (int i = 0; i < scoreList.Count; i++)\r\n            {\r\n                int id = scoreList.ElementAt(i).playerid;\r\n                ScoreEntry e = scoreList.ElementAt(i);\r\n                if (scores.ContainsKey(id)) scores[id] = e;\r\n                else scores.Add(id, e);\r\n            }",
                    "Line": 94
                  },
                  {
                    "Statement": "{\r\n                int id = scoreList.ElementAt(i).playerid;\r\n                ScoreEntry e = scoreList.ElementAt(i);\r\n                if (scores.ContainsKey(id)) scores[id] = e;\r\n                else scores.Add(id, e);\r\n            }",
                    "Line": 95
                  },
                  {
                    "Statement": "int id = scoreList.ElementAt(i).playerid;",
                    "Line": 96
                  },
                  {
                    "Statement": "ScoreEntry e = scoreList.ElementAt(i);",
                    "Line": 97
                  },
                  {
                    "Statement": "if (scores.ContainsKey(id)) scores[id] = e;\r\n                else scores.Add(id, e);",
                    "Line": 98
                  },
                  {
                    "Statement": "scores[id] = e;",
                    "Line": 98
                  },
                  {
                    "Statement": "scores.Add(id, e);",
                    "Line": 99
                  }
                ]
              },
              {
                "Name": "SaveState",
                "Modifiers": [],
                "Line": 102,
                "Parameters": [],
                "Invocations": [
                  {
                    "Line": 104,
                    "Name": "",
                    "FullName": "System.Collections.Generic.List<Character.ScoreTableManager.ScoreEntry>.Clear()",
                    "Parameters": []
                  },
                  {
                    "Line": 107,
                    "Name": "k.Value",
                    "FullName": "System.Collections.Generic.List<Character.ScoreTableManager.ScoreEntry>.Add(Character.ScoreTableManager.ScoreEntry)",
                    "Parameters": []
                  },
                  {
                    "Line": 111,
                    "Name": "l",
                    "FullName": "UnityEngine.JsonUtility.ToJson(object)",
                    "Parameters": []
                  },
                  {
                    "Line": 112,
                    "Name": "\"SCORES\", jsonString",
                    "FullName": "UnityEngine.PlayerPrefs.SetString(string, string)",
                    "Parameters": []
                  }
                ],
                "Variables": [
                  {
                    "Name": "l",
                    "Type": "ScoreEntryList",
                    "Assignment": "new ScoreEntryList()",
                    "Line": 109
                  },
                  {
                    "Name": "jsonString",
                    "Type": "string",
                    "Assignment": "JsonUtility.ToJson(l)",
                    "Line": 111
                  }
                ],
                "Statements": [
                  {
                    "Statement": "{\r\n            scoreList.Clear();\r\n            foreach (KeyValuePair<int, ScoreEntry> k in scores)\r\n            {\r\n                scoreList.Add(k.Value);\r\n            }\r\n            ScoreEntryList l = new ScoreEntryList();\r\n            l.List = scoreList;\r\n            string jsonString = JsonUtility.ToJson(l);\r\n            PlayerPrefs.SetString(\"SCORES\", jsonString);\r\n        }",
                    "Line": 103
                  },
                  {
                    "Statement": "scoreList.Clear();",
                    "Line": 104
                  },
                  {
                    "Statement": "foreach (KeyValuePair<int, ScoreEntry> k in scores)\r\n            {\r\n                scoreList.Add(k.Value);\r\n            }",
                    "Line": 105
                  },
                  {
                    "Statement": "{\r\n                scoreList.Add(k.Value);\r\n            }",
                    "Line": 106
                  },
                  {
                    "Statement": "scoreList.Add(k.Value);",
                    "Line": 107
                  },
                  {
                    "Statement": "ScoreEntryList l = new ScoreEntryList();",
                    "Line": 109
                  },
                  {
                    "Statement": "l.List = scoreList;",
                    "Line": 110
                  },
                  {
                    "Statement": "string jsonString = JsonUtility.ToJson(l);",
                    "Line": 111
                  },
                  {
                    "Statement": "PlayerPrefs.SetString(\"SCORES\", jsonString);",
                    "Line": 112
                  }
                ]
              }
            ],
            "Fields": []
          }
        ],
        "Usings": []
      }
    ],
    "Classes": [],
    "Usings": [
      {
        "Name": "System.Collections",
        "Line": 0
      },
      {
        "Name": "System.Collections.Generic",
        "Line": 1
      },
      {
        "Name": "UnityEngine",
        "Line": 2
      },
      {
        "Name": "System",
        "Line": 3
      },
      {
        "Name": "System.Linq",
        "Line": 4
      },
      {
        "Name": "Newtonsoft.Json",
        "Line": 5
      }
    ]
  },
  {
    "Name": "TableEntry",
    "Interfaces": [],
    "Namespaces": [
      {
        "Line": 5,
        "Name": "Character",
        "Interfaces": [],
        "Namespaces": [],
        "Classes": [
          {
            "Name": "TableEntry",
            "Modifier": "public",
            "Inheritance": "MonoBehaviour",
            "Line": 7,
            "Interfaces": [],
            "Properties": [],
            "Methods": [
              {
                "Name": "Start",
                "Modifiers": [],
                "Line": 28,
                "Parameters": [],
                "Invocations": [],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            kills.text = \"0\";\r\n            damage.text = \"0\";\r\n        }",
                    "Line": 29
                  },
                  {
                    "Statement": "kills.text = \"0\";",
                    "Line": 30
                  },
                  {
                    "Statement": "damage.text = \"0\";",
                    "Line": 31
                  }
                ]
              },
              {
                "Name": "UpdateGap",
                "Modifiers": [],
                "Line": 34,
                "Parameters": [],
                "Invocations": [],
                "Variables": [
                  {
                    "Name": "newY",
                    "Type": "float",
                    "Assignment": "transform.position.y - gap",
                    "Line": 36
                  }
                ],
                "Statements": [
                  {
                    "Statement": "{\r\n            float newY = transform.position.y - gap;\r\n            transform.position = new Vector2(transform.position.x, newY);\r\n        }",
                    "Line": 35
                  },
                  {
                    "Statement": "float newY = transform.position.y - gap;",
                    "Line": 36
                  },
                  {
                    "Statement": "transform.position = new Vector2(transform.position.x, newY);",
                    "Line": 37
                  }
                ]
              },
              {
                "Name": "UpdateMe",
                "Modifiers": [],
                "Line": 40,
                "Parameters": [
                  {
                    "Name": "entry",
                    "Type": "ScoreTableManager.ScoreEntry",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 42,
                    "Name": "entry.player",
                    "FullName": "Character.TableEntry.UpdateName(string)",
                    "Parameters": []
                  },
                  {
                    "Line": 43,
                    "Name": "entry.kills",
                    "FullName": "Character.TableEntry.UpdateKills(int)",
                    "Parameters": []
                  },
                  {
                    "Line": 44,
                    "Name": "entry.damage",
                    "FullName": "Character.TableEntry.UpdateDamage(int)",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            UpdateName(entry.player);\r\n            UpdateKills(entry.kills);\r\n            UpdateDamage(entry.damage);\r\n        }",
                    "Line": 41
                  },
                  {
                    "Statement": "UpdateName(entry.player);",
                    "Line": 42
                  },
                  {
                    "Statement": "UpdateKills(entry.kills);",
                    "Line": 43
                  },
                  {
                    "Statement": "UpdateDamage(entry.damage);",
                    "Line": 44
                  }
                ]
              },
              {
                "Name": "UpdateName",
                "Modifiers": [],
                "Line": 47,
                "Parameters": [
                  {
                    "Name": "p",
                    "Type": "string",
                    "Assignment": null
                  }
                ],
                "Invocations": [],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            player.text = p;\r\n        }",
                    "Line": 48
                  },
                  {
                    "Statement": "player.text = p;",
                    "Line": 49
                  }
                ]
              },
              {
                "Name": "UpdateKills",
                "Modifiers": [],
                "Line": 52,
                "Parameters": [
                  {
                    "Name": "k",
                    "Type": "int",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 54,
                    "Name": "",
                    "FullName": "int.ToString()",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            kills.text = k.ToString();\r\n        }",
                    "Line": 53
                  },
                  {
                    "Statement": "kills.text = k.ToString();",
                    "Line": 54
                  }
                ]
              },
              {
                "Name": "UpdateDamage",
                "Modifiers": [],
                "Line": 57,
                "Parameters": [
                  {
                    "Name": "d",
                    "Type": "int",
                    "Assignment": null
                  }
                ],
                "Invocations": [
                  {
                    "Line": 59,
                    "Name": "",
                    "FullName": "int.ToString()",
                    "Parameters": []
                  }
                ],
                "Variables": [],
                "Statements": [
                  {
                    "Statement": "{\r\n            damage.text = d.ToString();\r\n        }",
                    "Line": 58
                  },
                  {
                    "Statement": "damage.text = d.ToString();",
                    "Line": 59
                  }
                ]
              }
            ],
            "Fields": []
          }
        ],
        "Usings": []
      }
    ],
    "Classes": [],
    "Usings": [
      {
        "Name": "System.Collections",
        "Line": 0
      },
      {
        "Name": "System.Collections.Generic",
        "Line": 1
      },
      {
        "Name": "UnityEngine",
        "Line": 2
      },
      {
        "Name": "UnityEngine.UI",
        "Line": 3
      }
    ]
  }
]